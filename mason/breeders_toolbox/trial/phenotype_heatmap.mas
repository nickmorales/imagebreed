
<%args>
$trial_id
$stockref => undef
$data_level => 'plot'
$suppress_initial_working_modal => undef
</%args>

<& /util/import_css.mas, paths => ['fieldmap/leaflet-search.min.css', 'fieldmap/leaflet.css'] &>
<& /util/import_javascript.mas, classes => [ 'jqueryui.js', 'jquery.js', 'jstree.dist.jstree', 'd3.d3v4Min.js', "thickbox", "CXGN.Page.FormattingHelpers", 'brapi.fieldmap.leaflet', 'brapi.fieldmap.L-Path-Transform', 'brapi.fieldmap.leaflet-search', 'brapi.fieldmap.turf', 'brapi.BrAPI', 'brapi.BrAPIFieldmap' ] &>

<style>
    #trait_heatmap {display: inline; }
    #trial_no_phenoMSG {display: none; }
    #trial_no_rowColMSG {display: none; }
    #trial_heatmap_div  {display: none; }
    #chart {display: none; }
    #chart_fm {display: none; }
    #d3legend {display: none; }
    #plot_image_ids {display: none;}

    #container_heatmap {
        /*border:2px dashed #000;*/
        height: 390px;
        width: 700px;
        overflow: auto;
        /*overflow: scroll;*/
        display: none;
        margin: 10px;
    }
    #container_fm {
        /*border:2px dashed #000;*/
        height: 390px;
        width: 700px;
        overflow: auto;
        /*overflow: scroll;*/
        display: none;
        margin: 10px;
        transition: all 1s ease-in-out;
    }

    rect.bordered {
        stroke: #E6E6E6;
        stroke-width:2px;
      }

      text.mono {
        font-size: 9pt;
        font-family: Consolas, courier;
        fill: #aaa;
      }

      text.axis-workweek {
        fill: #000;
      }

      text.axis-worktime {
        fill: #000;
      }

      .legend { list-style: none; }
      .legend li { float: left; margin-right: 10px; }
      .legend span { border: 1px solid #ccc; float: left; width: 12px; height: 12px; margin: 2px; }

      .legend .d3block_even_number { background-color: #c7e9b4; }
      .legend .d3block_odd_number { background-color: #41b6c4; }
      .legend .d3checks { background-color: #081d58; }
      .legend .d3rep_even_number { background-color: red; height: 8px; width: 18px;}
      .legend .d3rep_odd_number { background-color: green; height: 8px; width: 18px;}

      .rotated {
          transform: rotate(-180deg);
      }


</style>

<div class="well well-sm">
    <div class="form-group form-group-sm" id="traitdiv" style="display:inline-block">
        <label for="trait_list_dropdown" class="col-sm-2 control-label">Select Trait:</label></br>
        <div class="col-sm-12">
            <div id="heatmap_traits_assayed_dropdown">
                Loading Traits Assayed...
            </div>
            <div id="heatmap_traits_assayed_download_div" style="display:none">
                <br/><button class='btn btn-primary btn-sm' id='trial_phenotype_heatmap_download'>Download Heatmap</button>
            </div>
        </div>
    </div>
</div>

<div class="form-group form-group-sm" id="ctrldiv" style="diaplay:none">
    <label for="check_list_dropdown" class="col-sm-2 control-label">View Check Plots:</label></br>
    <div class="col-sm-12">
        <div id="heatmap_trial_checks_dropdown">
        </div>
        <div class="col-sm-4" id="check_plot_link">
        </div>
    </div>
    <br/>

</div>

<!--div id="view_ctrl_button" style="display:none">
  <a id="view_ctrl_button_link"><button class="btn btn-primary"  type="button" id="view_ctrl_id_button" value="delete_cords" >View Controls</button></a>
</div-->


<div class="well well-sm">

<div class="d3legend" id="d3legend"> <p></br>  &nbsp;&nbsp; <ul class="legend">
  <li><span class="d3block_even_number"></span> Even Block Numbers (e.g. 2,4,...)</li>
  <li><span class="d3block_odd_number"></span> Odd Block Numbers (e.g. 1,3,...)</li>
  <li><span class="d3checks"></span> Checks</li>
  <li><span class="d3rep_odd_number"></span> Odd Rep Numbers (e.g. 1,3,...)</li>
  <li><span class="d3rep_even_number"></span> Even Rep Numbers (e.g. 2,4,...)</li>
  <li> <img src="/static/css/images/plot_images.png" alt="Camera" height="20" width="20"> Plot Has Image</li>
  <li><button type="button" id="rotate_map" class="btn btn-success btn-sm">Rotate Map</button></li>
  <a id="hm_replace_accessions_link"><button class="btn btn-success" type="button" id="hm_replace_accession_button" value="replace_accession" style="display:none;">Replace Accession</button></a>
</div>

<div id="container_heatmap" ></div>
<div id="container_fm" ></div>
<div id="trait_heatmap" >loading...</div>
<div id="container_heatmap_geo" ></div>
<div id="trial_no_phenoMSG" >Upload trial phenotypes to view trait assayed heatmap</div>
<div class="container" id="trial_no_rowColMSG">
    <div class="well">
    <!--    <centre><div id="trial_no_rowColMSG2" ><b>Trial plots have no row and column number to display heatmap</b></div></centre> -->
    </div>
</div>

<canvas id='trial_phenotype_heatmap_download_image_canvas' width="3000" height="3000" style="display:none"></canvas>

<div id="chart"></div>

</div>

<div id="delete_field_map_dialog_message" title="Physical Field Map Deletion" style="display:none;">
   <p>
       <span class="ui-icon ui-icon-circle-check" style="float: left; margin: 0 7px 50px 0;"></span>
       The field coordinates were deleted successfully...
   </p>
</div>

<div id="delete_field_map_dialog" title="Physical Field Map Deletion" style="display:none;">
   <div id="trait_list_dc" name="trait_list">
       <label id="trait_list_label_dc" for="trait_list_list_select" style="display: inline-block; width: 300px;">Please, confirm field map deletion... <br />

       </label>

   </div>
</div>

<div class="modal  fade" id="suppress_plot_pheno_dialog" name="suppress_plot_pheno_dialog" tabindex="-1" role="dialog" aria-labelledby="SuppressPlotPhenoDialog">
    <div class="modal-dialog " role="document">
        <div class="modal-content">
            <div class="modal-header" style="text-align: center">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="SuppressPlotPhenoDialog">Suppress Plot Phenotype Measurement </h4>
            </div>
            <div class="modal-body">
                <div class="container-fluid">

                    <form class="form-horizontal" role="form" method="post" enctype="multipart/form-data" encoding="multipart/form-data" id="suppress_plot_pheno_form" name="suppress_plot_pheno_form">

                    <center>
                    <p3> Suppressed measurement will be seen as an outlier and can be excluded during phenotype analysis and download.</p3>
                    </center></br>
                        <div class="form-group">
                            <label class="col-sm-3 control-label">Plot Name:</label>
                            <div class="col-sm-8" id="myplot_name">

                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-sm-3 control-label">Phenotype Value: </label>
                            <div class="col-sm-8" id="pheno_value">

                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-sm-3 control-label">Phenotype ID: </label>
                            <div class="col-sm-8" id="mypheno_id">

                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-sm-3 control-label">Trait ID: </label>
                            <div class="col-sm-8" id="mytrait_id">

                            </div>
                        </div>

                    </form>
                </div>
            </div>
            <div class="modal-footer">
                <button id="close_suppress_plot_pheno_dialog" type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" name="suppress_plot_pheno_dialog_submit" id="suppress_plot_pheno_dialog_submit">Suppress Phenotype</button>
            </div>
        </div>
    </div>
</div>

<div class="modal  fade" id="suppress_phenotype_dialog_success_message" name="suppress_phenotype_dialog_success_message" tabindex="-1" role="dialog" aria-labelledby="SuppressPhenoDialog">
    <div class="modal-dialog " role="document">
        <div class="modal-content">
            <div class="modal-header" style="text-align: center">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="SuppressPhenoDialog">Suppress Phenotype For Plot </h4>
            </div>
            <div class="modal-body">
                <div class="container-fluid">

                    <form class="form-horizontal" role="form" method="post" enctype="multipart/form-data" encoding="multipart/form-data" id="suppress_plotPheno_form" name="suppress_plotPheno_form">

                    <p3> Phenotype was suppressed successfully...</p3>

                    </form>
                </div>
            </div>
            <div class="modal-footer">
                <button id="close_suppress_plot_pheno_dialog" type="button" class="btn btn-default" data-dismiss="modal">Close</button>

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="hm_replace_plot_accessions_dialog" name="hm_replace_plot_accessions_dialog" tabindex="-1" role="dialog" aria-labelledby="HmReplacePlotAccessionsDialog">
    <div class="modal-dialog " role="document">
        <div class="modal-content">
            <div class="modal-header" style="text-align: center">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="HmReplacePlotAccessionsDialog">Replace Plot Accession</h4>
            </div>
            <div class="modal-body">
                <div class="container-fluid">

                    <form class="form-horizontal" role="form" method="post" enctype="multipart/form-data" encoding="multipart/form-data" id="hm_replace_plot_accession_form" name="hm_replace_plot_accession_form">
                      <div id="hm_edit_plot_information">
                      </div>

                      <div class="form-group">
                        <label class="col-sm-3 control-label">Plot Name: </label>
                        <div class="col-sm-9" id="hm_edit_plot_name">
                        </div>
                      </div>

                      <div class="form-group">
                        <label class="col-sm-3 control-label">Plot Number: </label>
                        <div class="col-sm-9" id="hm_edit_plot_number">
                        </div>
                      </div>

                      <div class="form-group">
                        <label class="col-sm-3 control-label">Plot Database ID: </label>
                        <div class="col-sm-9" id="hm_edit_plot_id">
                        </div>
                      </div>

                      <div class="form-group">
                        <label class="col-sm-3 control-label">Accession: </label>
                        <div class="col-sm-9" id="hm_edit_plot_accession">
                        </div>
                      </div>


                      <div class="form-group">
                        <label class="col-sm-3 control-label">Enter New Accession: </label>
                        <div class="col-sm-9" >
                          <input class="form-control" id="hm_accession" name="hm_accession"></input>
                        </div>
                      </div>

                      <div class="form-group">
                        <label class="col-sm-3 control-label">New Plot Name:<br> (Optional) </label>
                        <div class="col-sm-9">
                          <input class="form-control" id="hm_new_plot_name" name="hm_new_plot_name"></input>
                        </div>
                      </div>


                    </form>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary " name="hm_view_plot_image_submit" id="hm_view_plot_image_submit">View Plot Images</button>
                <button id="hm_close_replace_plot_accession_dialog" type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" name="hm_replace_plot_accession_submit" id="hm_replace_plot_accession_submit">Replace Plot Accession</button>
            </div>
        </div>
    </div>
</div>

<div class="modal  fade" id="hm_replace_accessions_dialog_message" name="hm_replace_accessions_dialog_message" tabindex="-1" role="dialog" aria-labelledby="HmDialog">
    <div class="modal-dialog " role="document">
        <div class="modal-content">
            <div class="modal-header" style="text-align: center">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="HmDialog"><b>Replace Plot Accessions</b></h4>
            </div>
            <div class="modal-body">
                <div class="container-fluid">

                    <p3> Plot accession was replaced successfully...</p3>

                </div>
            </div>
            <div class="modal-footer">
                <button id="close_replace_accession_dialog" type="button" class="btn btn-default" onclick=location.reload() data-dismiss="modal">Close</button>

            </div>
        </div>
    </div>
</div>

<%perl>
my $dbh = $stockref->{dbh};
my $image_ids =  $stockref->{image_ids} || [] ;
</%perl>

<div class="modal  fade" id="view_plot_image_dialog" name="view_plot_image_dialog" tabindex="-1" role="dialog" aria-labelledby="ViewPlotImage">
    <div class="modal-dialog " role="document">
        <div class="modal-content">
            <div class="modal-header" style="text-align: center">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="ViewPlotImage">View Plot Images</h4>
            </div>
            <div class="modal-body">
                <div class="container-fluid">

                    <form class="form-horizontal" role="form" method="post" enctype="multipart/form-data" encoding="multipart/form-data" id="view_plot_image_form" name="view_plot_image_form">

                    <div class="col-sm-9" id="plot_image_ids"></div>

                    <div class="col-sm-9" id="show_plot_image_ids"></div>

                    </form>
                </div>
            </div>
            <div class="modal-footer">
                <button id="view_plot_image_dialog" type="button" class="btn btn-default" data-dismiss="modal">Close</button>

            </div>
        </div>
    </div>
</div>

<script defer="defer" type="text/javascript" >

var trial_id = <% $trial_id %>;
var value = 'plot';
var selected = 'fieldmap';
var trialStudyDesign;
var phenotypes_id = [];

var image = [];
var image_ids = [];
var list_of_checks;
var checks = {};

jQuery(document).ready( function() {

    var auth_token;
    var require_login = "<%  $c->get_conf('brapi_require_login') %>";
    if (require_login === '1'){
        auth_token = "<%  CXGN::Login->new($c->dbc->dbh)->get_login_cookie() %>";
        if (!auth_token){
            alert("Login required to display");
        }
    }

    // Copies a variable number of methods from source to target.
    d3.rebind = function(target, source) {
        var i = 1, n = arguments.length, method;
        while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
        return target;
    };

    // Method is assumed to be a standard D3 getter-setter:
    // If passed with no arguments, gets the value.
    // If passed with arguments, sets the value and returns the target.
    function d3_rebind(target, source, method) {
        return function() {
            var value = method.apply(source, arguments);
            return value === source ? target : value;
        };
    }

    function makeArray(count, content) {
        var result = [];
        var counting = 0;
        if(typeof(content) == "function") {
            counting = 1;
            for(var i=0; i<count; i++) {
                result.push(counting);
                counting++;
            }
        } else {
            counting = 1;
            for(var i=0; i<count; i++) {
                result.push(counting);
                counting++;
            }
        }
        return result;
    }

    function preprocessSortFieldMapDataBrAPIPhenotypeSearch(response) {
        var data = response.result.data;
        var datasort = data.sort(function(obj1, obj2) {
            // Ascending: first plotNumber less than the previous
            return obj1.plotNumber - obj2.plotNumber;
        });
        var newData = datasort;
        return newData;
    }

    function preprocessSortFieldMapDataBrAPIStudiesLayout(response) {
        var data = response.result.data;
        var datasort = data.sort(function(obj1, obj2) {
            // Ascending: first plotNumber less than the previous
            return obj1.additionalInfo.plotNumber - obj2.additionalInfo.plotNumber;
        });
        var newData = datasort;
        return newData;
    }

    function preprocessFieldMapData(datasort) {
        var newData = datasort;
        var rows = [];
        var cols = [];
        var blocks = [];
        var accession_names = [];
        var accession_ids = [];
        var pheno_ids = [];
        var pheno_values = [];
        var plot_names = [];
        var replicates = [];
        var plot_mums = [];
        var check = [];
        var replicates = [];
        var plot_ids = [];
        var trait_names = [];
        var trait_ids = [];
        var design = trialStudyDesign;
        var plot_mums = [];
        var observ_object = [];
        var plotImageDbIds = [];
        var plant_names = [];

        jQuery.each(newData, function(key_obj, value_obj) {
            jQuery.each(value_obj, function(key, value) {
                if (key == 'Y'){
                    rows.push(value);
                }
                if (key == 'X'){
                    cols.push(value);
                }
                if (key == 'blockNumber'){
                    blocks.push(value);
                }
                if (key == 'entryType'){
                    check.push(value);
                }
                if (key == 'germplasmDbId'){
                    accession_ids.push(value);
                }
                if (key == 'germplasmName'){
                    accession_names.push(value);
                }
                if (key == 'plotNumber'){
                    plot_mums.push(value);
                }
                if (key == 'observationUnitDbId'){
                    plot_ids.push(value);
                }
                if (key == 'observationUnitName'){
                    plot_names.push(value);
                }
                if (key == 'replicate'){
                    replicates.push(value);
                }
                if (key == 'designType'){
                    design = value;
                }
                if (key == 'observations'){
                    var valueObs = value[0];
                    pheno_ids.push(valueObs.observationDbId);
                    trait_ids.push(valueObs.observationVariableDbId);
                    trait_names.push(valueObs.observationVariableName);
                    pheno_values.push(valueObs.value);
                }
                if (key == 'additionalInfo'){
                    if (value != null) {
                        jQuery.each(value, function(key_add, value_add){
                            if (key_add == 'plotNumber'){
                                plot_mums.push(value_add);
                            }
                            if (key_add == 'designType'){
                                design = value_add;
                                trialStudyDesign = value_add;
                            }
                            if (key_add == 'plotImageDbIds'){
                                plotImageDbIds.push(value_add);
                            }
                            if (key_add == 'plantNames'){
                                var s = value_add.length;
                                plant_names.push(s);
                            }
                        });
                    }
                }
            });
        });

        var psudo_rows = [];
        var map_option = 0;
        for (i=0; i<plot_names.length; i++){
            if (rows[i] != null) {}
            else if (rows[i] == null) {
                map_option = 1;
                if (blocks[i] && design != 'splitplot'){
                    var r = blocks[i];
                    psudo_rows.push(r);
                }
                else if (replicates[i] && !blocks[i] && design != 'splitplot'){
                    var s = replicates[i];
                    psudo_rows.push(s);
                }
                else if (design == 'splitplot'){
                    var s = replicates[i];
                    psudo_rows.push(s);
                }
            }
        }

        var false_coord;
        if (map_option == 1){
            rows = psudo_rows;
            false_coord = 'false_coord';
        }
        var unique_rows = [];
        var unique_cols = [];
        var unique = rows.filter(function(itm, i, rows) {
            if (i == rows.indexOf(itm)){
                unique_rows.push(itm);
            }
        });

        var psudo_cols = [];
        var psudo_columns = [];
        var counts = {};
        if (map_option == 1){
            for (var i = 0; i < rows.length; i++) {
                counts[rows[i]] = 1 + (counts[rows[i]] || 0);
            }
            jQuery.each(counts, function(key, value){
                psudo_cols.push(makeArray(value, key));
            });
            var psudo_columns = [].concat.apply([], psudo_cols);
            cols = psudo_columns;
        }
        var unique = cols.filter(function(itm, i, cols) {
            if (i == cols.indexOf(itm)){
                unique_cols.push(itm);
            }
        });

        var plot_popUp;
        var datasets = [];
        for (var i=0; i<plot_names.length; i++) {
            if (plant_names[i] < 1) {
                plot_popUp = plot_names[i]+"\nplot_No: "+plot_mums[i]+"\nblock_No: "+blocks[i]+"\nrep_No:"+replicates[i]+"\nstock:"+accession_names[i];
            }
            else {
                plot_popUp = plot_names[i]+"\nplot_No: "+plot_mums[i]+"\nblock_No: "+blocks[i]+"\nrep_No:"+replicates[i]+"\nstock:"+accession_names[i]+"\nnumber_of_plants:"+plant_names[i];
            }
            datasets.push({
                plotname:plot_names[i],
                plot_id:plot_ids[i],
                stock:accession_names[i],
                plotn:plot_mums[i],
                blkn:blocks[i],
                rep:replicates[i],
                row:rows[i],
                col:cols[i],
                pheno:pheno_values[i],
                plot_msg:plot_popUp,
                pheno_id:pheno_ids[i],
                plot_image_ids:plotImageDbIds[i],
            });
        }

        var col_max = Math.max.apply(Math,unique_cols);
        var row_max = Math.max.apply(Math,unique_rows);
        var rep_max = Math.max.apply(Math,replicates);
        var block_max = Math.max.apply(Math,blocks);
        var col_length = cols[0];
        var row_length = rows[0];
        var controls = [];
        var unique_ctrl = [];
        var plots = plot_mums;

        unique_rows = [];
        unique_cols = [];
        for (let i=1; i<=row_max; i++){
            unique_rows.push(i);
        }
        for (let i=1; i<=col_max; i++){
            unique_cols.push(i);
        }

        var stocks = accession_names;
        for (var i = 0; i < check.length; i++) {
            if ( check[i] == "Check") {
                var s = stocks[i];
                controls.push(s);
            }
        }

        if (controls){
            var unique = controls.filter(function(itm, i, controls) {
                if (i == controls.indexOf(itm)){
                    unique_ctrl.push(itm);
                }
            });

            list_of_checks = unique_ctrl;
            for (var i = 0; i < stocks.length; i++) {
                for (var n = 0; n < unique_ctrl.length; n++){
                    if ( unique_ctrl[n] == stocks[i]) {
                        var p = plots[i];
                        var s = stocks[i];
                        checks[p] = s;
                    }
                }
            }
        }
        //console.log(datasets);
        return [datasets, col_length, row_length, col_max, row_max, rep_max, block_max, rows, cols, unique_rows, unique_cols, unique_ctrl, false_coord];
    }

    function assayed_trait_heatmap_view(selected) {
        var selectedTrait = selected;
        jQuery.ajax( {
            type: 'POST',
            url: '/brapi/v1/phenotypes-search',
            data: {
                'observationLevel':'<% $data_level %>',
                'studyDbId':trial_id,
                'observationVariableDbId':selectedTrait,
                'pageSize':1000,
                'page':0
            },
            headers: (auth_token)? {'Authorization': `Bearer ` + auth_token } : {},
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response) {
                jQuery("#working_modal").modal("hide");

                var newData = preprocessSortFieldMapDataBrAPIPhenotypeSearch(response);
                var [datasets, col_length, row_length, col_max, row_max, rep_max, block_max, rows, cols, unique_rows, unique_cols, unique_ctrl, false_coord] = preprocessFieldMapData(newData);

                if (col_length && row_length) {
                    jQuery("#chart").css({"display": "inline-block"});
                    jQuery("#container_heatmap").css({"display": "inline-block", "overflow": "auto"});
                    jQuery("#trait_heatmap").css("display", "none");

                    var default_width = 50 * col_max;
                    var default_Width_used;
                    if (default_width < 684){
                        default_Width_used = 684;
                    } else {
                        default_Width_used = 50 * col_max;
                    }

                    var margin = { top: 50, right: 0, bottom: 100, left: 30 },
                    width = default_Width_used + 30 - margin.left - margin.right,
                    height = 50 * row_max + 150 - margin.top - margin.bottom,
                    gridSize = 50,
                    gridSize2 = 38,
                    legendElementWidth = gridSize2*2,
                    buckets = 9,
                    colors = ["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"], // alternatively colorbrewer.YlGnBu[9]
                    rows = unique_rows,
                    columns = unique_cols.sort((a,b)=>a-b);

                    d3.select('#container_heatmap').selectAll("*").remove();

                    var svg = d3.select("#container_heatmap").append("svg")
                        .attr("width", width + margin.left + margin.right)
                        .attr("height", height + margin.top + margin.bottom)
                        .append("g")
                        .attr("transform", "translate(" + margin.left + "," + 100 + ")");

                    var rowLabels = svg.selectAll(".rowLabel")
                        .data(rows)
                        .enter().append("text")
                        .text(function (d) { return d; })
                        .attr("x", 0 )
                        .attr("y", function (d, i) { return i * gridSize; })
                        .style("text-anchor", "end")
                        .attr("transform", "translate(-6," + gridSize / 1.5 + ")")
                        .attr("class", function (d, i) { return ((i >= 0 && i <= 4) ? "rowLabel mono axis axis-workweek" : "rowLabel mono axis"); });

                    var columnLabels = svg.selectAll(".columnLabel")
                        .data(columns)
                        .enter().append("text")
                        .text(function(d) { return d; })
                        .attr("x", function(d, i) { return i * gridSize; })
                        .attr("y", 0 )
                        .style("text-anchor", "middle")
                        .attr("transform", "translate(" + gridSize / 2 + ", -6)")
                        .attr("class", function(d, i) { return ((i >= 7 && i <= 16) ? "columnLabel mono axis axis-worktime" : "columnLabel mono axis"); });

                    var heatmapChart = function(datasets) {

                        datasets.forEach(function(d) {
                            d.row = +d.row;
                            d.col = +d.col;
                            d.pheno = +d.pheno;
                        });

                        var colorScale = d3.scaleQuantile()
                            .domain([0, buckets - 1, d3.max(datasets, function (d) { return d.pheno; })])
                            .range(colors);

                        var cards = svg.selectAll(".col")
                            .data(datasets, function(d) {return d.row+':'+d.col;});

                        cards.append("title");

                        cards.enter().append("rect")
                            .attr("x", function(d) { return (d.col - 1) * gridSize; })
                            .attr("y", function(d) { return (d.row - 1) * gridSize; })
                            .attr("rx", 4)
                            .attr("ry", 4)
                            .attr("class", "col bordered")
                            .attr("width", gridSize)
                            .attr("height", gridSize)
                            .attr("id", "phenotype_heatmap_grid")
                            .style("fill", colors[0])
                            .on("click", function(d) {
                                var phenoValue = d.pheno ;
                                var plotName = d.plotname ;
                                var phenoID = d.pheno_id;
                                jQuery("#suppress_plot_pheno_dialog").modal("show");
                                jQuery("#myplot_name").html(plotName);
                                jQuery("#pheno_value").html(phenoValue);
                                jQuery("#mytrait_id").html(selected);
                                jQuery("#mypheno_id").html(phenoID);
                            })
                            .on("mouseover", function(d) {
                                d3.select(this).style('fill', 'green');
                            })
                            .on("mouseout", function(d) {
                                var colorScale = d3.scaleQuantile()
                                    .domain([0, buckets - 1, d3.max(datasets, function (d) { return d.pheno; })])
                                    .range(colors);

                                var cards = svg.selectAll(".col")
                                    .data(datasets, function(d) {return d.row+':'+d.col;});

                                cards.append("title");

                                cards.enter().append("rect")
                                    .attr("x", function(d) { return (d.col - 1) * gridSize; })
                                    .attr("y", function(d) { return (d.row - 1) * gridSize; })
                                    .attr("rx", 4)
                                    .attr("ry", 4)
                                    .attr("class", "col bordered")
                                    .attr("width", gridSize)
                                    .attr("height", gridSize)
                                    .style("fill", colors[0]);

                                cards.style("fill", function(d) { return colorScale(d.pheno); }) ;

                                cards.select("title").text(function(d) { return d.plot_msg; }) ;

                                cards.exit().remove();
                            });

                        //cards.transition().duration(1000)
                        cards.style("fill", function(d) { return colorScale(d.pheno); }) ;

                        cards.select("title").text(function(d) { return d.plot_msg; }) ;

                        cards.exit().remove();

                        var legend = svg.selectAll(".legend")
                            .data([0].concat(colorScale.quantiles()), function(d) { return d; });

                        legend.enter().append("g")
                            .attr("class", "legend");

                        legend.append("rect")
                            .attr("x", function(d, i) { return legendElementWidth * i; })
                            .attr("y", 0 - 90)
                            .attr("width", legendElementWidth)
                            .attr("height", gridSize2 / 2)
                            .style("fill", function(d, i) { return colors[i]; });

                        legend.append("text")
                            .attr("class", "mono")
                            .text(function(d) { return ">= " + Math.round(d); })
                            .attr("x", function(d, i) { return legendElementWidth * i; })
                            .attr("y", 0 - 90 + gridSize2);

                        legend.exit().remove();

                        var temp_heatmap_element = document.getElementById('phenotype_heatmap_grid');
                        temp_heatmap_element.dispatchEvent(new MouseEvent('mouseout', {bubbles: true}))
                    };

                    heatmapChart(datasets);
                    if (false_coord){
                        alert("Pseudo row and column numbers have been used in displaying the heat map. Plot's row and column numbers were generated from block_number and displayed in zigzag format. You can upload row and column numbers for this trial to reflect the true field layout.");
                    }
                }
                else  {
                    jQuery("#container_heatmap").css("display", "none");
                    jQuery("#trait_heatmap").css("display", "none");
                    jQuery("#trial_no_rowColMSG").css("display", "none");
                }
            },
            error: function(reponse) {
                jQuery("#working_modal").modal("hide");
                alert('Error displaying traits assayed heatmap');
            }
        });
    }

    function btnClick(n){
        if (n.length == 0){
            jQuery("#hm_view_plot_image_submit").addClass("disabled");
        } else {
            jQuery("#hm_view_plot_image_submit").removeClass("disabled");
        }
        return true;
    }

    function field_map_view() {

        jQuery("#ctrldiv").css("display", "none");

        jQuery.ajax( {
            headers: (auth_token)? {'Authorization': `Bearer ` + auth_token } : {},
            url: '/brapi/v1/studies/'+trial_id+'/layout?pageSize=10000&page=0',
            beforeSend: function() {
%  if (!$suppress_initial_working_modal) {
                jQuery("#working_modal").modal("show");
%  }
            },
            success: function(response) {

%  if (!$suppress_initial_working_modal) {
                jQuery("#working_modal").modal("hide");
%  }

                var data = preprocessSortFieldMapDataBrAPIStudiesLayout(response);
                var [datasets, col_length, row_length, col_max, row_max, rep_max, block_max, rows, cols, unique_rows, unique_cols, unique_ctrl, false_coord] = preprocessFieldMapData(data);

                if (col_length && row_length) {
                    jQuery("#chart_fm").css({"display": "inline-block"});
                    jQuery("#container_fm").css({"display": "inline-block", "overflow": "auto"});
                    jQuery("#trait_heatmap").css("display", "none");
                    jQuery("#d3legend").css("display", "inline-block");
                    jQuery("#container_heatmap").css("display", "none");
                    jQuery("#trait_heatmap").css("display", "none");

                    var margin = { top: 50, right: 0, bottom: 100, left: 30 },
                    width = 50 * col_max + 30 - margin.left - margin.right,
                    height = 50 * row_max + 100 - margin.top - margin.bottom,
                    gridSize = 50,
                    legendElementWidth = gridSize*2,
                    buckets = 9,
                    colors = ["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"], // alternatively colorbrewer.YlGnBu[9]
                    rows = unique_rows,
                    columns = unique_cols.sort((a,b)=>a-b);

                    d3.select('#container_fm').selectAll("*").remove();

                    var svg = d3.select("#container_fm").append("svg")
                        .attr("width", width + margin.left + margin.right)
                        .attr("height", height + margin.top + margin.bottom)
                        .append("g")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                    var rowLabels = svg.selectAll(".rowLabel")
                        .data(rows)
                        .enter().append("text")
                        .text(function (d) { return d; })
                        .attr("x", 0 )
                        .attr("y", function (d, i) { return i * gridSize; })
                        .style("text-anchor", "end")
                        .attr("transform", "translate(-6," + gridSize / 1.5 + ")")
                        .attr("class", function (d, i) { return ((i >= 0 && i <= 4) ? "rowLabel mono axis axis-workweek" : "rowLabel mono axis"); });

                    var columnLabels = svg.selectAll(".columnLabel")
                        .data(columns)
                        .enter().append("text")
                        .text(function(d) { return d; })
                        .attr("x", function(d, i) { return i * gridSize; })
                        .attr("y", 0 )
                        .style("text-anchor", "middle")
                        .attr("transform", "translate(" + gridSize / 2 + ", -6)")
                        .attr("class", function(d, i) { return ((i >= 7 && i <= 16) ? "columnLabel mono axis axis-worktime" : "columnLabel mono axis"); });

                    var heatmapChart = function(datasets) {
                        datasets.forEach(function(d) {
                            d.row = +d.row;
                            d.col = +d.col;
                            d.blkn = +d.blkn;
                        });

                    var cards = svg.selectAll(".col")
                        .data(datasets, function(d) {return d.row+':'+d.col;});

                    cards.append("title");
                    var image_icon = function (d, i){
                        image = d.plot_image_ids;
                        var plot_image;
                        if (image.length > 0){
                            plot_image = "/static/css/images/plot_images.png";
                        } else {
                            plot_image = "";
                        }
                        return plot_image;
                    }

                    var colors = function (d, i){
                        if (block_max == 1){
                            color = '#41b6c4';
                        }
                        else if (block_max > 1){
                            if (d.blkn % 2 == 0){
                                color = '#c7e9b4';
                            }
                            else{
                                color = '#41b6c4'
                            }
                        }
                        else{
                            color = '#c7e9b4';
                        }
                        if (unique_ctrl) {
                            for (var i = 0; i < unique_ctrl.length; i++) {
                                if ( unique_ctrl[i] == d.stock) {
                                    color = '#081d58';
                                }
                            }
                        }
                        return color;
                    }

                    var strokes = function (d, i){
                        var stroke;
                        if (rep_max == 1){
                          stroke = 'green';
                        }
                        else if (rep_max > 1){
                            if (d.rep % 2 == 0){
                                stroke = 'red';
                            }
                            else {
                                stroke = 'green'
                            }
                        }
                        else {
                            stroke = 'red';
                        }
                        return stroke;
                    }

                    cards.enter().append("rect")
                        .attr("x", function(d) { return (d.col - 1) * gridSize; })
                        .attr("y", function(d) { return (d.row - 1) * gridSize; })
                        .attr("rx", 4)
                        .attr("ry", 4)
                        .attr("class", "col bordered")
                        .attr("width", gridSize)
                        .attr("height", gridSize)
                        .style("stroke-width", 2)
                        .style("stroke", strokes)
                        .style("fill", colors)

                        .on("mouseover", function(d) {
                            d3.select(this).style('fill', 'green');
                        })
                        .on("mouseout", function(d) {
                            var cards = svg.selectAll(".col")
                                .data(datasets, function(d) {return d.row+':'+d.col;});

                            cards.append("title");

                            cards.enter().append("rect")
                                .attr("x", function(d) { return (d.col - 1) * gridSize; })
                                .attr("y", function(d) { return (d.row - 1) * gridSize; })
                                .attr("rx", 4)
                                .attr("ry", 4)
                                .attr("class", "col bordered")
                                .attr("width", gridSize)
                                .attr("height", gridSize)
                                .style("stroke-width", 2)
                                .style("stroke", strokes)
                                .style("fill", colors);

                            cards.style("fill", colors);

                            cards.select("title").text(function(d) {
                                return d.plot_msg;
                            });

                            cards.exit().remove();
                            //console.log('out');
                        })
                        .on("dblclick", function(d) {
                            window.location.href = '/stock/'+d.plot_id+'/view';
                        })
                        .on("click", function(d) {
                            image_ids = d.plot_image_ids;
                            var replace_accession = d.stock;
                            var replace_plot_id = d.plot_id;
                            var replace_plot_name = d.plotname;
                            var replace_plot_number = d.plotn;

                            jQuery('#plot_image_ids').html(image_ids);
                            jQuery('#hm_replace_accessions_link').find('button').trigger('click');
                            jQuery("#hm_replace_accessions_link").on("click", function(){ btnClick(image_ids); });
                            jQuery('#hm_edit_plot_information').html('<b>Selected Plot Information: </b>');
                            jQuery('#hm_edit_plot_name').html(replace_plot_name);
                            jQuery('#hm_edit_plot_number').html(replace_plot_number);
                            old_plot_id = jQuery('#hm_edit_plot_id').html(replace_plot_id);
                            old_plot_accession = jQuery('#hm_edit_plot_accession').html(replace_accession);
                            jQuery('#hm_replace_plot_accessions_dialog').modal('show');

                            new jQuery.ajax({
                                type: 'POST',
                                url: '/ajax/breeders/trial/<% $trial_id %>/retrieve_plot_images',
                                dataType: "json",
                                data: {
                                    'image_ids': JSON.stringify(image_ids),
                                    'plot_name': replace_plot_name,
                                    'plot_id': replace_plot_id,
                                },
                                success: function (response) {
                                    var images = response.image_html;
                                    if (response.error) {
                                        alert("Error Retrieving Plot Images: "+response.error);
                                    }
                                    else {
                                        jQuery("#show_plot_image_ids").html(images);
                                        // jQuery('#view_plot_image_dialog').modal("show");
                                    }
                                },
                                error: function () {
                                    alert('An error occurred retrieving plot images');
                                }
                            });

                        });

                        //cards.transition().duration(1000)
                        cards.style("fill", colors) ;

                        cards.select("title").text(function(d) { return d.plot_msg; }) ;

                        cards.append("text");
                        cards.enter().append("text")
                            .attr("x", function(d) { return (d.col - 1) * gridSize + 10; })
                            .attr("y", function(d) { return (d.row - 1) * gridSize + 20 ; })
                            .text(function(d) { return d.plotn; });

                        cards.select("text").text(function(d) { return d.plotn; }) ;

                        cards.append("image");
                        cards.enter().append("image")
                            .attr("xlink:href", image_icon)
                            .attr("x", function(d) { return (d.col - 1) * gridSize + 2; })
                            .attr("y", function(d) { return (d.row - 1) * gridSize + 3 ; })
                            .attr('width', 10)
                            .attr('height', 10)

                        cards.exit().remove();

                    };

                    heatmapChart(datasets);
                    if (false_coord){
                        alert("Psudo row and column numbers have been used in displaying the heat map. Plots row and column numbers were generated from block_number and displayed in zigzag format. You can upload row and column numbers for this trial to reflect the field layout.");
                    }
                }
                else  {
                    jQuery("#container_heatmap").css("display", "none");
                    jQuery("#trait_heatmap").css("display", "none");
                    jQuery("#trial_no_rowColMSG").css("display", "inline-block");
                }
            },
            error: function(reponse) {
%  if (!$suppress_initial_working_modal) {
                jQuery("#working_modal").modal("hide");
%  }
                alert('Error displaying traits assayed heatmap');
            }
        });
    }

    var r = 0;
    jQuery('#rotate_map').click(function(){
        jQuery("#container_fm").css('transform','rotate(' + (r += 180) + 'deg)');
        //jQuery("#container_heatmap").css('transform','rotate(' + (r += 180) + 'deg)');
    });

    function geo_field_map_view(){
        jQuery('#container_heatmap_geo_div').width(jQuery('#container_heatmap_geo').parent().width());
        jQuery('#container_heatmap_geo_div').height(jQuery('#container_heatmap_geo').parent().width()*0.7);


        var brapi_endpoint = "/brapi/v2";
        var auth_token;
        var require_login = "<%  $c->get_conf('brapi_require_login') %>";
        if (require_login === '1'){
            auth_token = "<%  CXGN::Login->new($c->dbc->dbh)->get_login_cookie() %>";
            if (!auth_token){
                alert("Login required to display field map");
            }
        }

        var fieldMap = new BrAPIFieldmap("#container_heatmap_geo_div",brapi_endpoint);

        fieldMap.brapi_endpoint = brapi_endpoint;
        fieldMap.opts.brapi_pageSize = 1000;
        fieldMap.opts.brapi_auth = auth_token;
        fieldMap.load('<% $trial_id %>').then((value)=>{if (!value) alert("No geo reference data in this trial!"); } );
    }

    jQuery("#hm_view_plot_image_submit").click( function() {
        jQuery("#view_plot_image_dialog").modal("show");
    });

    jQuery("#hm_accession").autocomplete({
        appendTo: "#hm_replace_plot_accessions_dialog",
        source: '/ajax/stock/accession_autocomplete',
    });

    jQuery("#hm_replace_plot_accession_form").submit( function() {
        event.preventDefault();
        hm_replace_plotAccession_fieldMap();
    });

    jQuery('#hm_replace_plot_accession_submit').click( function() {
        hm_replace_plotAccession_fieldMap();
    });

    function hm_replace_plotAccession_fieldMap() {
        jQuery('#hm_replace_plot_accessions_dialog').modal("hide");

        var new_accession = jQuery('#hm_accession').val();
        var new_plot_name = jQuery('#hm_new_plot_name').val();
        var old_accession = jQuery('#hm_edit_plot_accession').html();
        var old_plot_id = jQuery('#hm_edit_plot_id').html();
        var old_plot_name = jQuery('#hm_edit_plot_name').html();

        new jQuery.ajax({
            type: 'POST',
            url: '/ajax/breeders/trial/<% $trial_id %>/replace_plot_accessions',
            dataType: "json",
            beforeSend: function() {
                jQuery('#working_modal').modal("show");
            },
            data: {
                'new_accession': new_accession,
                'new_plot_name': new_plot_name,
                'old_accession': old_accession,
                'old_plot_id': old_plot_id,
                'old_plot_name': old_plot_name,
            },
            success: function (response) {
                jQuery('#working_modal').modal("hide");

                if (response.error) {
                    alert("Error Replacing Plot Accession: "+response.error);
                }
                else {
                    jQuery('#hm_replace_accessions_dialog_message').modal("show");
                }
            },
            error: function () {
                jQuery('#working_modal').modal("hide");
                alert('An error occurred replacing plot accession');
            }
        });
    }

    jQuery('#pheno_heatmap_onswitch').click( function() {
        jQuery("#trait_heatmap").css("display", "none");

        field_map_view();

        jQuery.ajax ( {
            headers: (auth_token)? {'Authorization': `Bearer ` + auth_token } : {},
            url: '/brapi/v1/studies/'+ <% $trial_id %> +'/observationvariables?pageSize=1000000',
            beforeSend: function() {
            },
            success: function(response){
                var data = response.result.data;
                var varName = [];
                var varID = [];
                jQuery.each(data, function(key_obj, value_obj) {
                    jQuery.each(value_obj, function(key, value) {
                        if (key == 'name'){
                            varName.push(value);
                        }
                        if (key == 'observationVariableDbId'){
                            varID.push(value);
                        }
                    });
                });

                if (varName != '' && varID != '' ) {
                    var traits_assayed_html = "<select class='form-control' id='trait_list_dropdown'>";
                    traits_assayed_html = traits_assayed_html + "<optgroup label='Field Map'>";
                    traits_assayed_html = traits_assayed_html + "<option value='fieldmap'>view field layout</option>";
                    traits_assayed_html = traits_assayed_html + "<option value='geofieldmap'>view geo field layout</option></optgroup>";
                    traits_assayed_html = traits_assayed_html + "<optgroup label='Assayed Traits'>";
                    for (i=0; i<varID.length; i++) {
                        traits_assayed_html = traits_assayed_html + "<option value='"+ varID[i] + "' >" + varName[i] + "</option>";
                    }
                    traits_assayed_html = traits_assayed_html +"</optgroup>";
                    traits_assayed_html = traits_assayed_html +"</select>";

                    jQuery("#trait_heatmap").css("display", "none");
                    jQuery("#heatmap_traits_assayed_dropdown").html(traits_assayed_html);
                }
                else {
                    var traits_assayed_html = "<select class='form-control' id='trait_list_dropdown'>";
                    traits_assayed_html = traits_assayed_html + "<optgroup label='Field Map'>";
                    traits_assayed_html = traits_assayed_html + "<option value='fieldmap'>view field layout</option>";
                    traits_assayed_html = traits_assayed_html + "<option value='geofieldmap'>view geo field layout</option></optgroup>";
                    traits_assayed_html = traits_assayed_html + "<optgroup label='Assayed Traits'>";
                    traits_assayed_html = traits_assayed_html +"</optgroup>";
                    traits_assayed_html = traits_assayed_html +"</select>";
                    jQuery("#trait_heatmap").css("display", "none");
                    jQuery("#heatmap_traits_assayed_dropdown").html(traits_assayed_html);
                }
            },
            error: function(response){
                alert('Error retrieving traits assayed in this trial');
            }
        });
    });

    jQuery('#pheno_heatmap_offswitch').click( function() {
        d3.select('#container_heatmap').selectAll("*").remove();
        d3.select('#container_fm').selectAll("*").remove();

        jQuery("#trait_heatmap").css("display", "none");
        jQuery("#trial_heatmap_div").css("display", "none");
        jQuery("#container_heatmap").css("display", "none");
        jQuery("#chart_fm").css("display", "none");
        jQuery("#container_fm").css("display", "none");
        jQuery("#trial_no_phenoMSG").css("display", "none");
        jQuery("#d3legend").css("display", "none");
    });

    jQuery(document).on('change', '#trait_list_dropdown', function () {
        selected = jQuery("#trait_list_dropdown").val();
        console.log(selected);

        d3.select('#container_heatmap').selectAll("*").remove();
        d3.select('#container_fm').selectAll("*").remove();

        if (selected == 'fieldmap'){
            jQuery("#view_ctrl_button").css("display", "none");
            jQuery("#ctrldiv").css("display", "none");
            d3.select("#container_heatmap_geo_div").remove();
            jQuery('#heatmap_traits_assayed_download_div').hide();

            field_map_view();

        } else if (selected == 'geofieldmap'){
            jQuery('#working_modal').modal("show");
            d3.select("#container_heatmap_geo_div").remove();
            d3.select('#container_heatmap_geo').append('div').attr("id","container_heatmap_geo_div");
            jQuery("#container_heatmap").css("display", "none");
            jQuery("#d3legend").css("display", "none");
            jQuery("#container_fm").css("display", "none");
            jQuery("#delete_button_fm").css("display", "none");
            jQuery("#view_ctrl_button").css("display", "none");
            jQuery("#ctrldiv").css("display", "none");
            jQuery('#heatmap_traits_assayed_download_div').hide();

            geo_field_map_view();
            jQuery('#working_modal').modal("hide");

        } else  if (selected != ''){
            d3.select("#container_heatmap_geo_div").remove();
            jQuery("#d3legend").css("display", "none");
            jQuery("#container_fm").css("display", "none");
            jQuery("#delete_button_fm").css("display", "none");
            jQuery("#ctrldiv").css("display", "none");
            jQuery("#view_ctrl_button").show();
            jQuery('#heatmap_traits_assayed_download_div').show();

            assayed_trait_heatmap_view(selected);
        }
    });

    jQuery(document).on('click', '#trial_phenotype_heatmap_download', function(){
        var html = d3.select("svg")
            .attr("version", 1.1)
            .attr("xmlns", "http://www.w3.org/2000/svg")
            .node().parentNode.innerHTML;;

        //console.log(html);
        var imgsrc = 'data:image/svg+xml;base64,'+ btoa(html);
        var img = '<img src="'+imgsrc+'">';

        var canvas = document.getElementById("trial_phenotype_heatmap_download_image_canvas"),
        context = canvas.getContext("2d");

        var image = new Image;
        image.src = imgsrc;
        image.onload = function() {
            context.drawImage(image, 0, 0);

            var canvasdata = canvas.toDataURL("image/png");

            var pngimg = '<img src="'+canvasdata+'">';

            var a = document.createElement("a");
            a.download = "trial_phenotype_heatmap.png";
            a.href = canvasdata;
            a.click();
        };
    });

    jQuery("#suppress_plot_pheno_dialog_submit").click(function() {
        suppress_plot_phenotype();
    });

    function suppress_plot_phenotype() {
        jQuery("#suppress_plot_pheno_dialog").modal("hide");
        var sup_plotName = jQuery('#myplot_name').html();
        var sup_traitValue = jQuery('#pheno_value').html();
        var sup_traitID = jQuery('#mytrait_id').html();
        var sup_phenoID = jQuery('#mypheno_id').html();

        new jQuery.ajax({
            type: 'POST',
            url: '/ajax/breeders/trial/<% $trial_id %>/suppress_phenotype',
            dataType: "json",
            data: {
                'plot_name': sup_plotName,
                'phenotype_value': sup_traitValue,
                'trait_id': sup_traitID,
                'phenotype_id': sup_phenoID,
            },
            beforeSend: function() {
                jQuery('#working_modal').modal("show");
            },
            success: function(response){
                jQuery('#working_modal').modal("hide");
                if (response.error) {
                    alert("Error Suppressing Phenotype: "+response.error);
                } else {
                    jQuery('#suppress_phenotype_dialog_success_message').modal("show");
                }
            },
            error: function() {
                jQuery('#working_modal').modal("hide");
                alert('An error occurred suppressing phenotype');
            }
        });
    }

    function heatmap_check_change(value) {
        var val = jQuery("#check_list_dropdown").val(value);
        var ret = value.split(",");
        var valStock = ret[0];
        var valPlot = ret[1];
        jQuery('#check_plot_link').html(valPlot + " came from Plot:"+ valStock);
    }

    jQuery("#view_ctrl_id_button").click(function(){
        jQuery("#view_ctrl_button").css("display", "none");
        jQuery("#ctrldiv").css("display", "inline-block");

        var list_of_checks = checks;
        var trial_checks_html = "<select class='form-control' id='check_list_dropdown'>";
        trial_checks_html = trial_checks_html + "<option value=''>checks and plot numbers</option>";
        jQuery.each(list_of_checks, function( key, value) {
        trial_checks_html = trial_checks_html + "<option value="+ key + "," + value + " >" + "Plot:"+ key + "  [" + value +"]"+ "</option>";
        });
        trial_checks_html = trial_checks_html +"</select>";
        jQuery("#heatmap_trial_checks_dropdown").html(trial_checks_html);
        jQuery("#heatmap_trial_checks_dropdown>select").change(function(){
            heatmap_check_change(this.value);
        });
    });

});

</script>
