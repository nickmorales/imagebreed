package CXGN::DroneImagery::DroneImageryAnalyticsRunSimulation;

=head1 NAME

CXGN::DroneImagery::ImagesSearch - an object to handle searching for raw drone imagery uploaded

=head1 USAGE

my $result = CXGN::DroneImagery::DroneImageryAnalyticsRunSimulation::perform_drone_imagery_analytics(@args);

=head1 DESCRIPTION


=head1 AUTHORS

=cut

use strict;
use warnings;
use Moose;
use Data::Dumper;
use LWP::UserAgent;
use JSON;
use SGN::Model::Cvterm;
use DateTime;
use CXGN::UploadFile;
use SGN::Image;
use CXGN::DroneImagery::ImagesSearch;
use URI::Encode qw(uri_encode uri_decode);
use File::Basename qw | basename dirname|;
use File::Slurp qw(write_file);
use File::Temp 'tempfile';
use CXGN::Calendar;
use Image::Size;
use Text::CSV;
use CXGN::Phenotypes::StorePhenotypes;
use CXGN::Phenotypes::PhenotypeMatrix;
use CXGN::BrAPI::FileResponse;
use CXGN::Onto;
use R::YapRI::Base;
use R::YapRI::Data::Matrix;
use CXGN::Tag;
use CXGN::DroneImagery::ImageTypes;
use Time::Piece;
use POSIX;
use Math::Round;
use Parallel::ForkManager;
use CXGN::NOAANCDC;
use CXGN::BreederSearch;
use CXGN::Phenotypes::SearchFactory;
use CXGN::BreedersToolbox::Accessions;
use CXGN::Genotype::GRM;
use CXGN::Pedigree::ARM;
use CXGN::AnalysisModel::SaveModel;
use CXGN::AnalysisModel::GetModel;
use Math::Polygon;
use Math::Trig;
use List::MoreUtils qw(first_index);
use List::Util qw(sum);
use Scalar::Util qw(looks_like_number);
use SGN::Controller::AJAX::DroneImagery::DroneImagery;
use Storable qw(dclone);
use Statistics::Descriptive;

sub perform_drone_imagery_analytics {
    my ($schema, $a_env, $b_env, $ro_env, $row_ro_env, $env_variance_percent, $protocol_id, $statistics_select, $analytics_select, $tolparinv, $use_area_under_curve, $legendre_order_number, $permanent_environment_structure, $legendre_coeff_exec_array, $trait_name_encoder_hash, $trait_name_encoder_rev_hash, $stock_info_hash, $plot_id_map_hash, $sorted_trait_names_array, $accession_id_factor_map_hash, $rep_time_factors_array, $ind_rep_factors_array, $unique_accession_names_array, $plot_id_count_map_reverse_hash, $sorted_scaled_ln_times_array, $time_count_map_reverse_hash, $accession_id_factor_map_reverse_hash, $seen_times_hash, $plot_id_factor_map_reverse_hash, $trait_to_time_map_hash, $unique_plot_names_array, $stock_name_row_col_hash, $phenotype_data_original_hash, $plot_rep_time_factor_map_hash, $stock_row_col_hash, $stock_row_col_id_hash, $polynomial_map_hash, $plot_ids_ordered_array, $csv, $timestamp, $user_name, $stats_tempfile, $grm_file, $grm_rename_tempfile, $tmp_stats_dir, $stats_out_tempfile, $stats_out_tempfile_row, $stats_out_tempfile_col, $stats_out_tempfile_residual, $stats_out_tempfile_2dspl, $stats_prep2_tempfile, $stats_out_param_tempfile, $parameter_tempfile, $parameter_asreml_tempfile, $stats_tempfile_2, $permanent_environment_structure_tempfile, $permanent_environment_structure_env_tempfile, $permanent_environment_structure_env_tempfile2, $permanent_environment_structure_env_tempfile_mat, $sim_env_changing_mat_tempfile, $sim_env_changing_mat_full_tempfile, $yhat_residual_tempfile, $blupf90_solutions_tempfile, $coeff_genetic_tempfile, $coeff_pe_tempfile, $stats_out_tempfile_varcomp, $time_min, $time_max, $header_string, $env_sim_exec, $min_row, $max_row, $min_col, $max_col, $mean_row, $sig_row, $mean_col, $sig_col, $sim_env_change_over_time, $correlation_between_times, $field_trial_id_list, $simulated_environment_real_data_trait_id, $fixed_effect_type, $perform_cv) = @_;
    my @legendre_coeff_exec = @$legendre_coeff_exec_array;
    my %trait_name_encoder = %$trait_name_encoder_hash;
    my %trait_name_encoder_rev = %$trait_name_encoder_rev_hash;
    my %stock_info = %$stock_info_hash;
    my %plot_id_map = %$plot_id_map_hash;
    my @sorted_trait_names = @$sorted_trait_names_array;
    my %accession_id_factor_map = %$accession_id_factor_map_hash;
    my @rep_time_factors = @$rep_time_factors_array;
    my @unique_accession_names = @$unique_accession_names_array;
    my @ind_rep_factors = @$ind_rep_factors_array;
    my %plot_id_count_map_reverse = %$plot_id_count_map_reverse_hash;
    my @sorted_scaled_ln_times = @$sorted_scaled_ln_times_array;
    my %time_count_map_reverse = %$time_count_map_reverse_hash;
    my %seen_times = %$seen_times_hash;
    my %accession_id_factor_map_reverse = %$accession_id_factor_map_reverse_hash;
    my %plot_id_factor_map_reverse = %$plot_id_factor_map_reverse_hash;
    my %trait_to_time_map = %$trait_to_time_map_hash;
    my @unique_plot_names = @$unique_plot_names_array;
    my %stock_name_row_col = %$stock_name_row_col_hash;
    my %phenotype_data_original = %$phenotype_data_original_hash;
    my %plot_rep_time_factor_map = %$plot_rep_time_factor_map_hash;
    my %stock_row_col = %$stock_row_col_hash;
    my %stock_row_col_id = %$stock_row_col_id_hash;
    my %polynomial_map = %$polynomial_map_hash;
    my @plot_ids_ordered = @$plot_ids_ordered_array;
    my $col_number_span = 1 + $max_col - $min_col;
    my $row_number_span = 1 + $max_row - $min_row;

    print STDERR "CALC $permanent_environment_structure\n";

    my $number_plots = scalar(@unique_plot_names);
    my $number_traits = scalar(@sorted_trait_names);

    my ($statistical_ontology_term, $analysis_model_training_data_file_type, $analysis_model_language, @sorted_residual_trait_names, %rr_unique_traits, %rr_residual_unique_traits, $statistics_cmd, $cmd_f90, $cmd_asreml, $statistics_cmd_reading, $prepare_file_cv_cmd, $prepare_file_cv2_cmd, $statistics_cmd_cv_1, $statistics_cmd_cv_2, %cmd_statistics_uni, $number_accessions);
    my $tolparinv_10 = $tolparinv*10;
    my $legendre_order_number_env_var_pos = $legendre_order_number+1+2;
    my ($result_blup_data_original, $result_blup_data_delta_original, $result_blup_spatial_data_original, $result_blup_pe_data_original, $result_blup_pe_data_delta_original, $result_residual_data_original, $result_fitted_data_original, %fixed_effects_original, %rr_genetic_coefficients_original, %rr_temporal_coefficients_original);
    my (@rr_coeff_genetic_covariance_original, @rr_coeff_env_covariance_original, @rr_coeff_genetic_correlation_original, @rr_coeff_env_correlation_original, $rr_residual_variance_original);
    my (@varcomp_original);
    my $model_sum_square_residual_original = 0;
    my $model_sum_square_cv1_original = 0;
    my $model_sum_square_cv2_original = 0;
    my $model_sum_square_cv3_original = 0;
    my $model_sum_square_cv4_original = 0;
    my $model_sum_square_cv5_original = 0;
    my $model_sum_square_cv1_2_original = 0;
    my $model_sum_square_cv2_2_original = 0;
    my $model_sum_square_cv3_2_original = 0;
    my $model_sum_square_cv4_2_original = 0;
    my $model_sum_square_cv5_2_original = 0;
    my $genetic_effect_min_original = 1000000000;
    my $genetic_effect_max_original = -1000000000;
    my $env_effect_min_original = 1000000000;
    my $env_effect_max_original = -1000000000;
    my $genetic_effect_sum_square_original = 0;
    my $genetic_effect_sum_original = 0;
    my $env_effect_sum_square_original = 0;
    my $env_effect_sum_original = 0;
    my $residual_sum_square_original = 0;
    my $residual_sum_original = 0;
    my (@param_file_rows_data, @param_file_rows_data_cv1, @param_file_rows_data_cv2, @param_file_rows_data_cv3, @param_file_rows_data_cv4, @param_file_rows_data_cv5, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5, @param_file_rows_6, @param_file_rows_7);

    my ($stats_out_cv1_predict_tempfile_fh, $stats_out_cv1_predict_tempfile) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);
    my ($stats_out_cv2_predict_tempfile_fh, $stats_out_cv2_predict_tempfile) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);
    my ($stats_out_cv3_predict_tempfile_fh, $stats_out_cv3_predict_tempfile) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);
    my ($stats_out_cv4_predict_tempfile_fh, $stats_out_cv4_predict_tempfile) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);
    my ($stats_out_cv5_predict_tempfile_fh, $stats_out_cv5_predict_tempfile) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);

    my ($stats_out_cv1_2_predict_tempfile_fh, $stats_out_cv1_2_predict_tempfile) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);
    my ($stats_out_cv2_2_predict_tempfile_fh, $stats_out_cv2_2_predict_tempfile) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);
    my ($stats_out_cv3_2_predict_tempfile_fh, $stats_out_cv3_2_predict_tempfile) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);
    my ($stats_out_cv4_2_predict_tempfile_fh, $stats_out_cv4_2_predict_tempfile) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);
    my ($stats_out_cv5_2_predict_tempfile_fh, $stats_out_cv5_2_predict_tempfile) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);

    my ($parameter_tempfile_cv1_fh, $parameter_tempfile_cv1) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);
    my ($parameter_tempfile_cv2_fh, $parameter_tempfile_cv2) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);
    my ($parameter_tempfile_cv3_fh, $parameter_tempfile_cv3) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);
    my ($parameter_tempfile_cv4_fh, $parameter_tempfile_cv4) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);
    my ($parameter_tempfile_cv5_fh, $parameter_tempfile_cv5) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);

    my ($parameter_tempfile_cv1_2_fh, $parameter_tempfile_cv1_2) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);
    my ($parameter_tempfile_cv2_2_fh, $parameter_tempfile_cv2_2) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);
    my ($parameter_tempfile_cv3_2_fh, $parameter_tempfile_cv3_2) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);
    my ($parameter_tempfile_cv4_2_fh, $parameter_tempfile_cv4_2) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);
    my ($parameter_tempfile_cv5_2_fh, $parameter_tempfile_cv5_2) = tempfile("drone_stats_XXXXX", DIR=> $tmp_stats_dir);

    print STDERR "RUN FIRST ENV ESTIMATION\n";
    if ($statistics_select eq 'sommer_grm_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_spatial_pure_2dspl_genetic_blups') {
        $statistical_ontology_term = "Multivariate linear mixed model genetic BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000001"; #In the JS this is set to either the genetic or spatial BLUP term (Multivariate linear mixed model 2D spline spatial BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000003) when saving analysis results

        $analysis_model_language = "R";
        $analysis_model_training_data_file_type = "nicksmixedmodelsanalytics_v1.01_sommer_grm_spatial_genetic_blups_phenotype_file";

        my @encoded_traits = values %trait_name_encoder;
        my $encoded_trait_string = join ',', @encoded_traits;
        $number_traits = scalar(@encoded_traits);
        my $cbind_string = $number_traits > 1 ? "cbind($encoded_trait_string)" : $encoded_trait_string;

        $prepare_file_cv_cmd = 'R -e "library(data.table);
        mat <- data.frame(fread(\''.$stats_tempfile.'\', header=TRUE, sep=\',\'));
        cv_step_size <- length(mat\$plot_id) %/% 5;
        cv_step_size_modulo <- length(mat\$plot_id) %% 5;
        ';
        my @encoded_traits_cv_check;
        my @encoded_traits_cv_1;
        my @encoded_traits_cv_1_2;
        my @encoded_traits_cv_save_1;
        my @encoded_traits_cv_save_1_2;
        my @encoded_traits_cv_2;
        my @encoded_traits_cv_2_2;
        my @encoded_traits_cv_save_2;
        my @encoded_traits_cv_save_2_2;
        my @encoded_traits_cv_3;
        my @encoded_traits_cv_3_2;
        my @encoded_traits_cv_save_3;
        my @encoded_traits_cv_save_3_2;
        my @encoded_traits_cv_4;
        my @encoded_traits_cv_4_2;
        my @encoded_traits_cv_save_4;
        my @encoded_traits_cv_save_4_2;
        my @encoded_traits_cv_5;
        my @encoded_traits_cv_5_2;
        my @encoded_traits_cv_save_5;
        my @encoded_traits_cv_save_5_2;

        foreach my $t_coded (@encoded_traits) {
            $prepare_file_cv_cmd .= 'randomized_positions <- sample(length(mat\$plot_id));';

            push @encoded_traits_cv_check, $t_coded.' = mat\$'.$t_coded;

            my $t_coded_cv1 = $t_coded.'_CV1';
            push @encoded_traits_cv_1, $t_coded_cv1;
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv1.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv1.'[randomized_positions[1:cv_step_size]] <- median(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_1, $t_coded_cv1.' = mat\$'.$t_coded_cv1;

            my $t_coded_cv2 = $t_coded.'_CV2';
            push @encoded_traits_cv_2, $t_coded_cv2;
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv2.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv2.'[randomized_positions[(cv_step_size+1):(2*cv_step_size)]] <- median(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_2, $t_coded_cv2.' = mat\$'.$t_coded_cv2;

            my $t_coded_cv3 = $t_coded.'_CV3';
            push @encoded_traits_cv_3, $t_coded_cv3;
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv3.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv3.'[randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]] <- median(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_3, $t_coded_cv3.' = mat\$'.$t_coded_cv3;

            my $t_coded_cv4 = $t_coded.'_CV4';
            push @encoded_traits_cv_4, $t_coded_cv4;
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv4.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv4.'[randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]] <- median(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_4, $t_coded_cv4.' = mat\$'.$t_coded_cv4;

            my $t_coded_cv5 = $t_coded.'_CV5';
            push @encoded_traits_cv_5, $t_coded_cv5;
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv5.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv5.'[randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]] <- median(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_5, $t_coded_cv5.' = mat\$'.$t_coded_cv5;
        }
        $prepare_file_cv_cmd .= '
        write.table(mat, file=\''.$stats_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\',\');
        "';

        $prepare_file_cv2_cmd = 'R -e "library(data.table);
        mat <- data.frame(fread(\''.$stats_tempfile.'\', header=TRUE, sep=\',\'));
        cv_step_size <- length(mat\$plot_id) %/% 5;
        cv_step_size_modulo <- length(mat\$plot_id) %% 5;
        ';

        foreach my $t_coded (@encoded_traits) {
            $prepare_file_cv2_cmd .= 'randomized_positions <- sample(length(mat\$plot_id));';

            my $t_coded_cv1_2 = $t_coded.'_CV1_2';
            push @encoded_traits_cv_1_2, $t_coded_cv1_2;
            $prepare_file_cv2_cmd .= 'mat\$'.$t_coded_cv1_2.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv1_2.'[randomized_positions[1:cv_step_size]] <- mean(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_1_2, 'mat\$'.$t_coded_cv1_2;

            my $t_coded_cv2_2 = $t_coded.'_CV2_2';
            push @encoded_traits_cv_2_2, $t_coded_cv2_2;
            $prepare_file_cv2_cmd .= 'mat\$'.$t_coded_cv2_2.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv2_2.'[randomized_positions[(cv_step_size+1):(2*cv_step_size)]] <- mean(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_2_2, 'mat\$'.$t_coded_cv2_2;

            my $t_coded_cv3_2 = $t_coded.'_CV3_2';
            push @encoded_traits_cv_3_2, $t_coded_cv3_2;
            $prepare_file_cv2_cmd .= 'mat\$'.$t_coded_cv3_2.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv3_2.'[randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]] <- mean(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_3_2, 'mat\$'.$t_coded_cv3_2;

            my $t_coded_cv4_2 = $t_coded.'_CV4_2';
            push @encoded_traits_cv_4_2, $t_coded_cv4_2;
            $prepare_file_cv2_cmd .= 'mat\$'.$t_coded_cv4_2.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv4_2.'[randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]] <- mean(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_4_2, 'mat\$'.$t_coded_cv4_2;

            my $t_coded_cv5_2 = $t_coded.'_CV5_2';
            push @encoded_traits_cv_5_2, $t_coded_cv5_2;
            $prepare_file_cv2_cmd .= 'mat\$'.$t_coded_cv5_2.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv5_2.'[randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]] <- mean(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_5_2, 'mat\$'.$t_coded_cv5_2;
        }
        $prepare_file_cv2_cmd .= '
        write.table(mat, file=\''.$stats_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\',\');
        "';

        $statistics_cmd_reading = 'R -e "library(sommer); library(data.table); library(reshape2);
        mat <- data.frame(fread(\''.$stats_tempfile.'\', header=TRUE, sep=\',\'));
        geno_mat_3col <- data.frame(fread(\''.$grm_file.'\', header=FALSE, sep=\'\t\'));
        geno_mat <- acast(geno_mat_3col, V1~V2, value.var=\'V3\');
        geno_mat[is.na(geno_mat)] <- 0;
        mat\$rowNumber <- as.numeric(mat\$rowNumber);
        mat\$colNumber <- as.numeric(mat\$colNumber);
        mat\$rowNumberFactor <- as.factor(mat\$rowNumberFactor);
        mat\$colNumberFactor <- as.factor(mat\$colNumberFactor);
        ';
        my $statistics_cmd_model = '';
        if ($statistics_select eq 'sommer_grm_spatial_genetic_blups') {
            $statistics_cmd_model .= 'mix <- mmer('.$cbind_string.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(rowNumberFactor, Gtc=diag('.$number_traits.')) +vs(colNumberFactor, Gtc=diag('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.');
            ';
        }
        elsif ($statistics_select eq 'sommer_grm_spatial_pure_2dspl_genetic_blups') {
            $statistics_cmd_model .= 'mix <- mmer('.$cbind_string.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.');
            ';
        }
        $statistics_cmd_model .= 'if (!is.null(mix\$U)) {
        #gen_cor <- cov2cor(mix\$sigma\$\`u:id\`);
        write.table(mix\$U\$\`u:id\`, file=\''.$stats_out_tempfile.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');
        write.table(mix\$U\$\`u:rowNumberFactor\`, file=\''.$stats_out_tempfile_row.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');
        write.table(mix\$U\$\`u:colNumberFactor\`, file=\''.$stats_out_tempfile_col.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = mix\$data\$plot_id, residuals = mix\$residuals, fitted = mix\$fitted), file=\''.$stats_out_tempfile_residual.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        write.table(summary(mix)\$varcomp, file=\''.$stats_out_tempfile_varcomp.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');
        X <- with(mat, spl2D(rowNumber, colNumber));
        spatial_blup_results <- data.frame(plot_id = mat\$plot_id);
        ';
        my $trait_index = 1;
        foreach my $enc_trait_name (@encoded_traits) {
            $statistics_cmd_model .= '
        blups'.$trait_index.' <- mix\$U\$\`u:rowNumber\`\$'.$enc_trait_name.';
        spatial_blup_results\$'.$enc_trait_name.' <- data.matrix(X) %*% data.matrix(blups'.$trait_index.');
            ';
            $trait_index++;
        }
        $statistics_cmd_model .= 'write.table(spatial_blup_results, file=\''.$stats_out_tempfile_2dspl.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        }
        "';

        my $encoded_trait_cv_string_1 = join ',', @encoded_traits_cv_1;
        my $cbind_string_cv_1 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_1)" : $encoded_trait_cv_string_1;
        my $encoded_trait_cv_string_2 = join ',', @encoded_traits_cv_2;
        my $cbind_string_cv_2 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_2)" : $encoded_trait_cv_string_2;
        my $encoded_trait_cv_string_3 = join ',', @encoded_traits_cv_3;
        my $cbind_string_cv_3 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_3)" : $encoded_trait_cv_string_3;
        my $encoded_trait_cv_string_4 = join ',', @encoded_traits_cv_4;
        my $cbind_string_cv_4 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_4)" : $encoded_trait_cv_string_4;
        my $encoded_trait_cv_string_5 = join ',', @encoded_traits_cv_5;
        my $cbind_string_cv_5 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_5)" : $encoded_trait_cv_string_5;

        my $encoded_trait_cv_string_1_2 = join ',', @encoded_traits_cv_1_2;
        my $cbind_string_cv_1_2 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_1_2)" : $encoded_trait_cv_string_1_2;
        my $encoded_trait_cv_string_2_2 = join ',', @encoded_traits_cv_2_2;
        my $cbind_string_cv_2_2 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_2_2)" : $encoded_trait_cv_string_2_2;
        my $encoded_trait_cv_string_3_2 = join ',', @encoded_traits_cv_3_2;
        my $cbind_string_cv_3_2 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_3_2)" : $encoded_trait_cv_string_3_2;
        my $encoded_trait_cv_string_4_2 = join ',', @encoded_traits_cv_4_2;
        my $cbind_string_cv_4_2 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_4_2)" : $encoded_trait_cv_string_4_2;
        my $encoded_trait_cv_string_5_2 = join ',', @encoded_traits_cv_5_2;
        my $cbind_string_cv_5_2 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_5_2)" : $encoded_trait_cv_string_5_2;

        $statistics_cmd_cv_1 = '';
        $statistics_cmd_cv_2 = '';
        my $cv_classify_string = 'c(\'id\')';
        if ($statistics_select eq 'sommer_grm_spatial_genetic_blups') {
            $statistics_cmd_cv_1 .= '
            mix_cv_1 <- mmer('.$cbind_string_cv_1.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(rowNumberFactor, Gtc=diag('.$number_traits.')) +vs(colNumberFactor, Gtc=diag('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.');
            mix_cv_2 <- mmer('.$cbind_string_cv_2.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(rowNumberFactor, Gtc=diag('.$number_traits.')) +vs(colNumberFactor, Gtc=diag('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.');
            mix_cv_3 <- mmer('.$cbind_string_cv_3.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(rowNumberFactor, Gtc=diag('.$number_traits.')) +vs(colNumberFactor, Gtc=diag('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.');
            mix_cv_4 <- mmer('.$cbind_string_cv_4.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(rowNumberFactor, Gtc=diag('.$number_traits.')) +vs(colNumberFactor, Gtc=diag('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.');
            mix_cv_5 <- mmer('.$cbind_string_cv_5.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(rowNumberFactor, Gtc=diag('.$number_traits.')) +vs(colNumberFactor, Gtc=diag('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.');
            ';
            $statistics_cmd_cv_2 .= '
            mix_cv_2_1 <- mmer('.$cbind_string_cv_1_2.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(rowNumberFactor, Gtc=diag('.$number_traits.')) +vs(colNumberFactor, Gtc=diag('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.');
            mix_cv_2_2 <- mmer('.$cbind_string_cv_2_2.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(rowNumberFactor, Gtc=diag('.$number_traits.')) +vs(colNumberFactor, Gtc=diag('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.');
            mix_cv_2_3 <- mmer('.$cbind_string_cv_3_2.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(rowNumberFactor, Gtc=diag('.$number_traits.')) +vs(colNumberFactor, Gtc=diag('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.');
            mix_cv_2_4 <- mmer('.$cbind_string_cv_4_2.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(rowNumberFactor, Gtc=diag('.$number_traits.')) +vs(colNumberFactor, Gtc=diag('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.');
            mix_cv_2_5 <- mmer('.$cbind_string_cv_5_2.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(rowNumberFactor, Gtc=diag('.$number_traits.')) +vs(colNumberFactor, Gtc=diag('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.');
            ';
        }
        elsif ($statistics_select eq 'sommer_grm_spatial_pure_2dspl_genetic_blups') {
            $statistics_cmd_cv_1 .= '
            mix_cv_1 <- mmer('.$cbind_string_cv_1.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.' );
            mix_cv_2 <- mmer('.$cbind_string_cv_2.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.' );
            mix_cv_3 <- mmer('.$cbind_string_cv_3.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.' );
            mix_cv_4 <- mmer('.$cbind_string_cv_4.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.' );
            mix_cv_5 <- mmer('.$cbind_string_cv_5.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.' );
            ';
            $statistics_cmd_cv_2 .= '
            mix_cv_2_1 <- mmer('.$cbind_string_cv_1_2.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.');
            mix_cv_2_2 <- mmer('.$cbind_string_cv_2_2.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.');
            mix_cv_2_3 <- mmer('.$cbind_string_cv_3_2.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.');
            mix_cv_2_4 <- mmer('.$cbind_string_cv_4_2.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.');
            mix_cv_2_5 <- mmer('.$cbind_string_cv_5_2.'~1 + replicate, random=~vs(id, Gu=geno_mat, Gtc=unsm('.$number_traits.')) +vs(spl2D(rowNumber, colNumber), Gtc=diag('.$number_traits.')), rcov=~vs(units, Gtc=unsm('.$number_traits.')), data=mat, tolparinv='.$tolparinv.');
            ';
        }
        my $encoded_traits_cv_save_1 = join ',', @encoded_traits_cv_save_1;
        my $encoded_traits_cv_save_2 = join ',', @encoded_traits_cv_save_2;
        my $encoded_traits_cv_save_3 = join ',', @encoded_traits_cv_save_3;
        my $encoded_traits_cv_save_4 = join ',', @encoded_traits_cv_save_4;
        my $encoded_traits_cv_save_5 = join ',', @encoded_traits_cv_save_5;
        my $encoded_traits_cv_save_1_2 = join ',', @encoded_traits_cv_save_1_2;
        my $encoded_traits_cv_save_2_2 = join ',', @encoded_traits_cv_save_2_2;
        my $encoded_traits_cv_save_3_2 = join ',', @encoded_traits_cv_save_3_2;
        my $encoded_traits_cv_save_4_2 = join ',', @encoded_traits_cv_save_4_2;
        my $encoded_traits_cv_save_5_2 = join ',', @encoded_traits_cv_save_5_2;
        my $encoded_traits_cv_check = join ',', @encoded_traits_cv_check;
        $statistics_cmd_cv_1 .= '
        write.table(data.frame(plot_id = mix_cv_1\$data\$plot_id, '.$encoded_traits_cv_check.','.$encoded_traits_cv_save_1.', residuals = mix_cv_1\$residuals, fitted = mix_cv_1\$fitted), file=\''.$stats_out_cv1_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = mix_cv_2\$data\$plot_id, '.$encoded_traits_cv_check.','.$encoded_traits_cv_save_2.', residuals = mix_cv_2\$residuals, fitted = mix_cv_2\$fitted), file=\''.$stats_out_cv2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = mix_cv_3\$data\$plot_id, '.$encoded_traits_cv_check.','.$encoded_traits_cv_save_3.', residuals = mix_cv_3\$residuals, fitted = mix_cv_3\$fitted), file=\''.$stats_out_cv3_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = mix_cv_4\$data\$plot_id, '.$encoded_traits_cv_check.','.$encoded_traits_cv_save_4.', residuals = mix_cv_4\$residuals, fitted = mix_cv_4\$fitted), file=\''.$stats_out_cv4_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = mix_cv_5\$data\$plot_id, '.$encoded_traits_cv_check.','.$encoded_traits_cv_save_5.', residuals = mix_cv_5\$residuals, fitted = mix_cv_5\$fitted), file=\''.$stats_out_cv5_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        "';
        $statistics_cmd_cv_2 .= '
        write.table(data.frame(plot_id = mix_cv_2_1\$data\$plot_id, '.$encoded_traits_cv_check.','.$encoded_traits_cv_save_1_2.', residuals = mix_cv_2_1\$residuals, fitted = mix_cv_2_1\$fitted), file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = mix_cv_2_2\$data\$plot_id, '.$encoded_traits_cv_check.','.$encoded_traits_cv_save_2_2.', residuals = mix_cv_2_2\$residuals, fitted = mix_cv_2_2\$fitted), file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = mix_cv_2_3\$data\$plot_id, '.$encoded_traits_cv_check.','.$encoded_traits_cv_save_3_2.', residuals = mix_cv_2_3\$residuals, fitted = mix_cv_2_3\$fitted), file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = mix_cv_2_4\$data\$plot_id, '.$encoded_traits_cv_check.','.$encoded_traits_cv_save_4_2.', residuals = mix_cv_2_4\$residuals, fitted = mix_cv_2_4\$fitted), file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = mix_cv_2_5\$data\$plot_id, '.$encoded_traits_cv_check.','.$encoded_traits_cv_save_5_2.', residuals = mix_cv_2_5\$residuals, fitted = mix_cv_2_5\$fitted), file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        "';

        # p_cv1 <- predict.mmer(object=mix_cv_2_1, classify = '.$cv_classify_string.', tolparinv='.$tolparinv_10.' );
        # p_cv2 <- predict.mmer(object=mix_cv_2_2, classify = '.$cv_classify_string.', tolparinv='.$tolparinv_10.' );
        # p_cv3 <- predict.mmer(object=mix_cv_2_3, classify = '.$cv_classify_string.', tolparinv='.$tolparinv_10.' );
        # p_cv4 <- predict.mmer(object=mix_cv_2_4, classify = '.$cv_classify_string.', tolparinv='.$tolparinv_10.' );
        # p_cv5 <- predict.mmer(object=mix_cv_2_5, classify = '.$cv_classify_string.', tolparinv='.$tolparinv_10.' );
        # p_cv1;
        # write.table(p_cv1\$pvals, file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        # write.table(p_cv2\$pvals, file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        # write.table(p_cv3\$pvals, file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        # write.table(p_cv4\$pvals, file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        # write.table(p_cv5\$pvals, file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');

        $statistics_cmd = $statistics_cmd_reading.$statistics_cmd_model;

        # print STDERR Dumper $prepare_file_cv_cmd;
        # print STDERR Dumper $statistics_cmd;
        eval {
            my $status_prepare_file_cv = system($prepare_file_cv_cmd);
            my $status_prepare_file_cv2 = system($prepare_file_cv2_cmd);
            my $status = system($statistics_cmd);
            if ($perform_cv) {
                my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
            }
        };
        my $run_stats_fault = 0;
        if ($@) {
            print STDERR "R ERROR\n";
            print STDERR Dumper $@;
            $run_stats_fault = 1;
        }
        else {
            my $current_gen_row_count = 0;
            my $current_env_row_count = 0;

            open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                my $header = <$fh>;
                my @header_cols;
                if ($csv->parse($header)) {
                    @header_cols = $csv->fields();
                }

                while (my $row = <$fh>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $col_counter = 0;
                    foreach my $encoded_trait (@header_cols) {
                        my $trait = $trait_name_encoder_rev{$encoded_trait};
                        my $stock_id = $columns[0];

                        my $stock_name = $stock_info{$stock_id}->{uniquename};
                        my $value = $columns[$col_counter+1];
                        if (defined $value && $value ne '') {
                            $result_blup_data_original->{$stock_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $genetic_effect_min_original) {
                                $genetic_effect_min_original = $value;
                            }
                            elsif ($value >= $genetic_effect_max_original) {
                                $genetic_effect_max_original = $value;
                            }

                            $genetic_effect_sum_original += abs($value);
                            $genetic_effect_sum_square_original = $genetic_effect_sum_square_original + $value*$value;
                        }
                        $col_counter++;
                    }
                    $current_gen_row_count++;
                }
            close($fh);

            open(my $fh_2dspl, '<', $stats_out_tempfile_2dspl) or die "Could not open file '$stats_out_tempfile_2dspl' $!";
                print STDERR "Opened $stats_out_tempfile_2dspl\n";
                my $header_2dspl = <$fh_2dspl>;
                my @header_cols_2dspl;
                if ($csv->parse($header_2dspl)) {
                    @header_cols_2dspl = $csv->fields();
                }
                shift @header_cols_2dspl;
                while (my $row_2dspl = <$fh_2dspl>) {
                    my @columns;
                    if ($csv->parse($row_2dspl)) {
                        @columns = $csv->fields();
                    }
                    my $col_counter = 0;
                    foreach my $encoded_trait (@header_cols_2dspl) {
                        my $trait = $trait_name_encoder_rev{$encoded_trait};
                        my $plot_id = $columns[0];

                        my $plot_name = $plot_id_map{$plot_id};
                        my $value = $columns[$col_counter+1];
                        if (defined $value && $value ne '') {
                            $result_blup_spatial_data_original->{$plot_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $env_effect_min_original) {
                                $env_effect_min_original = $value;
                            }
                            elsif ($value >= $env_effect_max_original) {
                                $env_effect_max_original = $value;
                            }

                            $env_effect_sum_original += abs($value);
                            $env_effect_sum_square_original = $env_effect_sum_square_original + $value*$value;
                        }
                        $col_counter++;
                    }
                    $current_env_row_count++;
                }
            close($fh_2dspl);

            open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                print STDERR "Opened $stats_out_tempfile_residual\n";
                my $header_residual = <$fh_residual>;
                my @header_cols_residual;
                if ($csv->parse($header_residual)) {
                    @header_cols_residual = $csv->fields();
                }
                while (my $row = <$fh_residual>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $residual = $columns[1 + $_];
                        my $fitted = $columns[1 + $number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_original->{$stock_name}->{$trait_name} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_original += abs($residual);
                            $residual_sum_square_original = $residual_sum_square_original + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_original->{$stock_name}->{$trait_name} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_original = $model_sum_square_residual_original + $residual*$residual;
                    }
                }
            close($fh_residual);

            open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                my $header_cv1 = <$fh_cv1>;
                my @header_cols_cv1;
                if ($csv->parse($header_cv1)) {
                    @header_cols_cv1 = $csv->fields();
                }
                while (my $row = <$fh_cv1>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_original = $model_sum_square_cv1_original + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv1);

            open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                my $header_cv2 = <$fh_cv2>;
                my @header_cols_cv2;
                if ($csv->parse($header_cv2)) {
                    @header_cols_cv2 = $csv->fields();
                }
                while (my $row = <$fh_cv2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_original = $model_sum_square_cv2_original + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv2);

            open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                my $header_cv3 = <$fh_cv3>;
                my @header_cols_cv3;
                if ($csv->parse($header_cv3)) {
                    @header_cols_cv3 = $csv->fields();
                }
                while (my $row = <$fh_cv3>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_original = $model_sum_square_cv3_original + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv3);

            open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                my $header_cv4 = <$fh_cv4>;
                my @header_cols_cv4;
                if ($csv->parse($header_cv4)) {
                    @header_cols_cv4 = $csv->fields();
                }
                while (my $row = <$fh_cv4>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_original = $model_sum_square_cv4_original + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv4);

            open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                my $header_cv5 = <$fh_cv5>;
                my @header_cols_cv5;
                if ($csv->parse($header_cv5)) {
                    @header_cols_cv5 = $csv->fields();
                }
                while (my $row = <$fh_cv5>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_original = $model_sum_square_cv5_original + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv5);

            open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                my $header_cv1_2 = <$fh_cv1_2>;
                my @header_cols_cv1_2;
                if ($csv->parse($header_cv1_2)) {
                    @header_cols_cv1_2 = $csv->fields();
                }
                while (my $row = <$fh_cv1_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_original = $model_sum_square_cv1_2_original + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv1_2);

            open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                my $header_cv2_2 = <$fh_cv2_2>;
                my @header_cols_cv2_2;
                if ($csv->parse($header_cv2_2)) {
                    @header_cols_cv2_2 = $csv->fields();
                }
                while (my $row = <$fh_cv2_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_original = $model_sum_square_cv2_2_original + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv2_2);

            open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                my $header_cv3_2 = <$fh_cv3_2>;
                my @header_cols_cv3_2;
                if ($csv->parse($header_cv3_2)) {
                    @header_cols_cv3_2 = $csv->fields();
                }
                while (my $row = <$fh_cv3_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_original = $model_sum_square_cv3_2_original + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv3_2);

            open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                my $header_cv4_2 = <$fh_cv4_2>;
                my @header_cols_cv4_2;
                if ($csv->parse($header_cv4_2)) {
                    @header_cols_cv4_2 = $csv->fields();
                }
                while (my $row = <$fh_cv4_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_original = $model_sum_square_cv4_2_original + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv4_2);

            open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                my $header_cv5_2 = <$fh_cv5_2>;
                my @header_cols_cv5_2;
                if ($csv->parse($header_cv5_2)) {
                    @header_cols_cv5_2 = $csv->fields();
                }
                while (my $row = <$fh_cv5_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_original = $model_sum_square_cv5_2_original + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv5_2);

            open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                print STDERR "Opened $stats_out_tempfile_varcomp\n";
                my $header_varcomp = <$fh_varcomp>;
                my @header_cols_varcomp;
                if ($csv->parse($header_varcomp)) {
                    @header_cols_varcomp = $csv->fields();
                }
                while (my $row = <$fh_varcomp>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    push @varcomp_original, \@columns;
                }
            close($fh_varcomp);

            if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                $run_stats_fault = 1;
            }
        }

        if ($run_stats_fault == 1) {
            print STDERR "ERROR IN R CMD\n";
            return {error=>'Error in R! Try a larger tolerance'};
        }
    }
    elsif ($statistics_select eq 'sommer_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_pure_2dspl_genetic_blups') {
        $statistical_ontology_term = "Univariate linear mixed model genetic BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000001"; #In the JS this is set to either the genetic or spatial BLUP term (Multivariate linear mixed model 2D spline spatial BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000003) when saving analysis results

        $analysis_model_language = "R";
        $analysis_model_training_data_file_type = "nicksmixedmodelsanalytics_v1.01_sommer_grm_univariate_spatial_genetic_blups_phenotype_file";

        my @encoded_traits = values %trait_name_encoder;
        $number_traits = scalar(@encoded_traits);

        foreach my $t (@encoded_traits) {

            $prepare_file_cv_cmd = 'R -e "library(data.table);
            mat <- data.frame(fread(\''.$stats_tempfile.'\', header=TRUE, sep=\',\'));
            randomized_positions <- sample(length(mat\$plot_id));
            cv_step_size <- length(mat\$plot_id) %/% 5;
            cv_step_size_modulo <- length(mat\$plot_id) %% 5;
            ';
            my $t_coded_cv1 = $t.'_CV1';
            my $t_coded_cv1_2 = $t.'_CV1_2';
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv1.' <- mat\$'.$t.';
            mat\$'.$t_coded_cv1_2.' <- mat\$'.$t.';
            mat\$'.$t_coded_cv1.'[randomized_positions[1:cv_step_size]] <- median(mat\$'.$t.');
            mat\$'.$t_coded_cv1_2.'[randomized_positions[1:cv_step_size]] <- mean(mat\$'.$t.');
            ';
            my $t_coded_cv2 = $t.'_CV2';
            my $t_coded_cv2_2 = $t.'_CV2_2';
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv2.' <- mat\$'.$t.';
            mat\$'.$t_coded_cv2_2.' <- mat\$'.$t.';
            mat\$'.$t_coded_cv2.'[randomized_positions[(cv_step_size+1):(2*cv_step_size)]] <- median(mat\$'.$t.');
            mat\$'.$t_coded_cv2_2.'[randomized_positions[(cv_step_size+1):(2*cv_step_size)]] <- mean(mat\$'.$t.');
            ';
            my $t_coded_cv3 = $t.'_CV3';
            my $t_coded_cv3_2 = $t.'_CV3_2';
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv3.' <- mat\$'.$t.';
            mat\$'.$t_coded_cv3_2.' <- mat\$'.$t.';
            mat\$'.$t_coded_cv3.'[randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]] <- median(mat\$'.$t.');
            mat\$'.$t_coded_cv3_2.'[randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]] <- mean(mat\$'.$t.');
            ';
            my $t_coded_cv4 = $t.'_CV4';
            my $t_coded_cv4_2 = $t.'_CV4_2';
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv4.' <- mat\$'.$t.';
            mat\$'.$t_coded_cv4_2.' <- mat\$'.$t.';
            mat\$'.$t_coded_cv4.'[randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]] <- median(mat\$'.$t.');
            mat\$'.$t_coded_cv4_2.'[randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]] <- mean(mat\$'.$t.');
            ';
            my $t_coded_cv5 = $t.'_CV5';
            my $t_coded_cv5_2 = $t.'_CV5_2';
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv5.' <- mat\$'.$t.';
            mat\$'.$t_coded_cv5_2.' <- mat\$'.$t.';
            mat\$'.$t_coded_cv5.'[randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]] <- median(mat\$'.$t.');
            mat\$'.$t_coded_cv5_2.'[randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]] <- mean(mat\$'.$t.');
            ';
            $prepare_file_cv_cmd .= '
            write.table(mat, file=\''.$stats_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\',\');
            "';

            $statistics_cmd_reading = 'R -e "library(sommer); library(data.table); library(reshape2);
            mat <- data.frame(fread(\''.$stats_tempfile.'\', header=TRUE, sep=\',\'));
            geno_mat_3col <- data.frame(fread(\''.$grm_file.'\', header=FALSE, sep=\'\t\'));
            geno_mat <- acast(geno_mat_3col, V1~V2, value.var=\'V3\');
            geno_mat[is.na(geno_mat)] <- 0;
            mat\$rowNumber <- as.numeric(mat\$rowNumber);
            mat\$colNumber <- as.numeric(mat\$colNumber);
            mat\$rowNumberFactor <- as.factor(mat\$rowNumberFactor);
            mat\$colNumberFactor <- as.factor(mat\$colNumberFactor);
            ';
            my $statistics_cmd_model = '';
            if ($statistics_select eq 'sommer_grm_univariate_spatial_genetic_blups') {
                $statistics_cmd_model .= 'mix <- mmer('.$t.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(rowNumberFactor) +vs(colNumberFactor) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.');
                ';
            }
            elsif ($statistics_select eq 'sommer_grm_univariate_spatial_pure_2dspl_genetic_blups') {
                $statistics_cmd_model .= 'mix <- mmer('.$t.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.');
                ';
            }
            $statistics_cmd_model .= 'if (!is.null(mix\$U)) {
            #gen_cor <- cov2cor(mix\$sigma\$\`u:id\`);
            write.table(mix\$U\$\`u:id\`, file=\''.$stats_out_tempfile.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');
            write.table(mix\$U\$\`u:rowNumberFactor\`, file=\''.$stats_out_tempfile_row.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');
            write.table(mix\$U\$\`u:colNumberFactor\`, file=\''.$stats_out_tempfile_col.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mix\$data\$plot_id, residuals = mix\$residuals, fitted = mix\$fitted), file=\''.$stats_out_tempfile_residual.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            write.table(summary(mix)\$varcomp, file=\''.$stats_out_tempfile_varcomp.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');
            X <- with(mat, spl2D(rowNumber, colNumber));
            spatial_blup_results <- data.frame(plot_id = mat\$plot_id);
            blups1 <- mix\$U\$\`u:rowNumber\`\$'.$t.';
            spatial_blup_results\$'.$t.' <- data.matrix(X) %*% data.matrix(blups1);
            write.table(spatial_blup_results, file=\''.$stats_out_tempfile_2dspl.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            }
            "';

            $statistics_cmd_cv_1 = '';
            $statistics_cmd_cv_2 = '';
            my $cv_classify_string = 'c(\'id\')';
            if ($statistics_select eq 'sommer_grm_univariate_spatial_genetic_blups') {
                $statistics_cmd_cv_1 .= '
                mix_cv1 <- mmer('.$t_coded_cv1.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(rowNumberFactor) +vs(colNumberFactor) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.' );
                mix_cv2 <- mmer('.$t_coded_cv2.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(rowNumberFactor) +vs(colNumberFactor) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.' );
                mix_cv3 <- mmer('.$t_coded_cv3.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(rowNumberFactor) +vs(colNumberFactor) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.' );
                mix_cv4 <- mmer('.$t_coded_cv4.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(rowNumberFactor) +vs(colNumberFactor) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.' );
                mix_cv5 <- mmer('.$t_coded_cv5.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(rowNumberFactor) +vs(colNumberFactor) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.' );
                ';

                $statistics_cmd_cv_2 .= '
                mix_cv_2_1 <- mmer('.$t_coded_cv1_2.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(rowNumberFactor) +vs(colNumberFactor) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.');
                mix_cv_2_2 <- mmer('.$t_coded_cv2_2.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(rowNumberFactor) +vs(colNumberFactor) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.');
                mix_cv_2_3 <- mmer('.$t_coded_cv3_2.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(rowNumberFactor) +vs(colNumberFactor) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.');
                mix_cv_2_4 <- mmer('.$t_coded_cv4_2.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(rowNumberFactor) +vs(colNumberFactor) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.');
                mix_cv_2_5 <- mmer('.$t_coded_cv5_2.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(rowNumberFactor) +vs(colNumberFactor) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.');
                ';
            }
            elsif ($statistics_select eq 'sommer_grm_univariate_spatial_pure_2dspl_genetic_blups') {
                $statistics_cmd_cv_1 .= '
                mix_cv1 <- mmer('.$t_coded_cv1.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.' );
                mix_cv2 <- mmer('.$t_coded_cv2.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.' );
                mix_cv3 <- mmer('.$t_coded_cv3.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.' );
                mix_cv4 <- mmer('.$t_coded_cv4.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.' );
                mix_cv5 <- mmer('.$t_coded_cv5.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.' );
                ';

                $statistics_cmd_cv_2 .= '
                mix_cv_2_1 <- mmer('.$t_coded_cv1_2.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.');
                mix_cv_2_2 <- mmer('.$t_coded_cv2_2.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.');
                mix_cv_2_3 <- mmer('.$t_coded_cv3_2.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.');
                mix_cv_2_4 <- mmer('.$t_coded_cv4_2.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.');
                mix_cv_2_5 <- mmer('.$t_coded_cv5_2.'~1 + replicate, random=~vs(id, Gu=geno_mat) +vs(spl2D(rowNumber, colNumber)), rcov=~vs(units), data=mat, tolparinv='.$tolparinv_10.');
                ';
            }
            $statistics_cmd_cv_1 .= '
                write.table(data.frame(plot_id = mix_cv1\$data\$plot_id, '.$t.' = mat\$'.$t.','.$t_coded_cv1.' = mat\$'.$t_coded_cv1.', residuals = mix_cv1\$residuals, fitted = mix_cv1\$fitted), file=\''.$stats_out_cv1_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
                write.table(data.frame(plot_id = mix_cv2\$data\$plot_id, '.$t.' = mat\$'.$t.','.$t_coded_cv2.' = mat\$'.$t_coded_cv2.', residuals = mix_cv2\$residuals, fitted = mix_cv2\$fitted), file=\''.$stats_out_cv2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
                write.table(data.frame(plot_id = mix_cv3\$data\$plot_id, '.$t.' = mat\$'.$t.','.$t_coded_cv3.' = mat\$'.$t_coded_cv3.', residuals = mix_cv3\$residuals, fitted = mix_cv3\$fitted), file=\''.$stats_out_cv3_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
                write.table(data.frame(plot_id = mix_cv4\$data\$plot_id, '.$t.' = mat\$'.$t.','.$t_coded_cv4.' = mat\$'.$t_coded_cv4.', residuals = mix_cv4\$residuals, fitted = mix_cv4\$fitted), file=\''.$stats_out_cv4_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
                write.table(data.frame(plot_id = mix_cv5\$data\$plot_id, '.$t.' = mat\$'.$t.','.$t_coded_cv5.' = mat\$'.$t_coded_cv5.', residuals = mix_cv5\$residuals, fitted = mix_cv5\$fitted), file=\''.$stats_out_cv5_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            "';
            $statistics_cmd_cv_2 .= '
                write.table(data.frame(plot_id = mix_cv_2_1\$data\$plot_id, '.$t.' = mat\$'.$t.','.$t_coded_cv1_2.' = mat\$'.$t_coded_cv1_2.', residuals = mix_cv_2_1\$residuals, fitted = mix_cv_2_1\$fitted), file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
                write.table(data.frame(plot_id = mix_cv_2_2\$data\$plot_id, '.$t.' = mat\$'.$t.','.$t_coded_cv2_2.' = mat\$'.$t_coded_cv2_2.', residuals = mix_cv_2_2\$residuals, fitted = mix_cv_2_2\$fitted), file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
                write.table(data.frame(plot_id = mix_cv_2_3\$data\$plot_id, '.$t.' = mat\$'.$t.','.$t_coded_cv3_2.' = mat\$'.$t_coded_cv3_2.', residuals = mix_cv_2_3\$residuals, fitted = mix_cv_2_3\$fitted), file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
                write.table(data.frame(plot_id = mix_cv_2_4\$data\$plot_id, '.$t.' = mat\$'.$t.','.$t_coded_cv4_2.' = mat\$'.$t_coded_cv4_2.', residuals = mix_cv_2_4\$residuals, fitted = mix_cv_2_4\$fitted), file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
                write.table(data.frame(plot_id = mix_cv_2_5\$data\$plot_id, '.$t.' = mat\$'.$t.','.$t_coded_cv5_2.' = mat\$'.$t_coded_cv5_2.', residuals = mix_cv_2_5\$residuals, fitted = mix_cv_2_5\$fitted), file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            "';

            # p_cv1 <- predict.mmer(object=mix_cv_2_1, classify = '.$cv_classify_string.', tolparinv='.$tolparinv_10.' );
            # p_cv2 <- predict.mmer(object=mix_cv_2_2, classify = '.$cv_classify_string.', tolparinv='.$tolparinv_10.' );
            # p_cv3 <- predict.mmer(object=mix_cv_2_3, classify = '.$cv_classify_string.', tolparinv='.$tolparinv_10.' );
            # p_cv4 <- predict.mmer(object=mix_cv_2_4, classify = '.$cv_classify_string.', tolparinv='.$tolparinv_10.' );
            # p_cv5 <- predict.mmer(object=mix_cv_2_5, classify = '.$cv_classify_string.', tolparinv='.$tolparinv_10.' );
            # p_cv1;
            # write.table(p_cv1\$pvals, file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            # write.table(p_cv2\$pvals, file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            # write.table(p_cv3\$pvals, file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            # write.table(p_cv4\$pvals, file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            # write.table(p_cv5\$pvals, file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');

            $statistics_cmd = $statistics_cmd_reading.$statistics_cmd_model;

            $cmd_statistics_uni{$t} = {
                prepare_file_cv_cmd => $prepare_file_cv_cmd,
                statistics_cmd => $statistics_cmd,
                statistics_cmd_reading => $statistics_cmd_reading,
                statistics_cmd_cv_1 => $statistics_cmd_cv_1,
                statistics_cmd_cv_2 => $statistics_cmd_cv_2
            };

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };
            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;
                    my @header_cols;
                    if ($csv->parse($header)) {
                        @header_cols = $csv->fields();
                    }

                    while (my $row = <$fh>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $col_counter = 0;
                        foreach my $encoded_trait (@header_cols) {
                            if ($encoded_trait eq $t) {
                                my $trait = $trait_name_encoder_rev{$encoded_trait};
                                my $stock_id = $columns[0];

                                my $stock_name = $stock_info{$stock_id}->{uniquename};
                                my $value = $columns[$col_counter+1];
                                if (defined $value && $value ne '') {
                                    $result_blup_data_original->{$stock_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                                    if ($value < $genetic_effect_min_original) {
                                        $genetic_effect_min_original = $value;
                                    }
                                    elsif ($value >= $genetic_effect_max_original) {
                                        $genetic_effect_max_original = $value;
                                    }

                                    $genetic_effect_sum_original += abs($value);
                                    $genetic_effect_sum_square_original = $genetic_effect_sum_square_original + $value*$value;
                                }
                            }
                            $col_counter++;
                        }
                        $current_gen_row_count++;
                    }
                close($fh);

                open(my $fh_2dspl, '<', $stats_out_tempfile_2dspl) or die "Could not open file '$stats_out_tempfile_2dspl' $!";
                    print STDERR "Opened $stats_out_tempfile_2dspl\n";
                    my $header_2dspl = <$fh_2dspl>;
                    my @header_cols_2dspl;
                    if ($csv->parse($header_2dspl)) {
                        @header_cols_2dspl = $csv->fields();
                    }
                    shift @header_cols_2dspl;
                    while (my $row_2dspl = <$fh_2dspl>) {
                        my @columns;
                        if ($csv->parse($row_2dspl)) {
                            @columns = $csv->fields();
                        }
                        my $col_counter = 0;
                        foreach my $encoded_trait (@header_cols_2dspl) {
                            if ($encoded_trait eq $t) {
                                my $trait = $trait_name_encoder_rev{$encoded_trait};
                                my $plot_id = $columns[0];

                                my $plot_name = $plot_id_map{$plot_id};
                                my $value = $columns[$col_counter+1];
                                if (defined $value && $value ne '') {
                                    $result_blup_spatial_data_original->{$plot_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                                    if ($value < $env_effect_min_original) {
                                        $env_effect_min_original = $value;
                                    }
                                    elsif ($value >= $env_effect_max_original) {
                                        $env_effect_max_original = $value;
                                    }

                                    $env_effect_sum_original += abs($value);
                                    $env_effect_sum_square_original = $env_effect_sum_square_original + $value*$value;
                                }
                            }
                            $col_counter++;
                        }
                        $current_env_row_count++;
                    }
                close($fh_2dspl);

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_original->{$stock_name}->{$trait_name} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_original += abs($residual);
                            $residual_sum_square_original = $residual_sum_square_original + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_original->{$stock_name}->{$trait_name} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_original = $model_sum_square_residual_original + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_original = $model_sum_square_cv1_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_original = $model_sum_square_cv2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_original = $model_sum_square_cv3_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_original = $model_sum_square_cv4_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_original = $model_sum_square_cv5_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_original = $model_sum_square_cv1_2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_original = $model_sum_square_cv2_2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_original = $model_sum_square_cv3_2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_original = $model_sum_square_cv4_2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_original = $model_sum_square_cv5_2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        push @varcomp_original, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {

        $analysis_model_language = "F90";

        $statistical_ontology_term = "Multivariate linear mixed model genetic BLUPs using genetic relationship matrix and temporal Legendre polynomial random regression on days after planting computed using Sommer R|SGNSTAT:0000004"; #In the JS this is set to either the genetic of permanent environment BLUP term (Multivariate linear mixed model permanent environment BLUPs using genetic relationship matrix and temporal Legendre polynomial random regression on days after planting computed using Sommer R|SGNSTAT:0000005) when saving results

        if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups') {
            $analysis_model_training_data_file_type = "nicksmixedmodelsanalytics_v1.01_blupf90_grm_temporal_leg_random_regression_GDD_genetic_blups_phenotype_file";
        }
        elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups') {
            $analysis_model_training_data_file_type = "nicksmixedmodelsanalytics_v1.01_blupf90_grm_temporal_leg_random_regression_DAP_genetic_blups_phenotype_file";
        }
        elsif ($statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {
            $analysis_model_training_data_file_type = "nicksmixedmodelsanalytics_v1.01_airemlf90_grm_temporal_leg_random_regression_GDD_genetic_blups_phenotype_file";
        }
        elsif ($statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
            $analysis_model_training_data_file_type = "nicksmixedmodelsanalytics_v1.01_airemlf90_grm_temporal_leg_random_regression_DAP_genetic_blups_phenotype_file";
        }

        my $pheno_var_pos = $legendre_order_number+1;

        $statistics_cmd = 'R -e "
            pheno <- read.csv(\''.$stats_prep2_tempfile.'\', header=FALSE, sep=\',\');
            v <- var(pheno);
            v <- v[1:'.$pheno_var_pos.', 1:'.$pheno_var_pos.'];
            #v <- matrix(rep(0.1, '.$pheno_var_pos.'*'.$pheno_var_pos.'), nrow = '.$pheno_var_pos.');
            #diag(v) <- rep(1, '.$pheno_var_pos.');
            write.table(v, file=\''.$stats_out_param_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\'\t\');
        "';
        my $status_r = system($statistics_cmd);

        my @pheno_var;
        open(my $fh_r, '<', $stats_out_param_tempfile) or die "Could not open file '$stats_out_param_tempfile' $!";
            print STDERR "Opened $stats_out_param_tempfile\n";

            while (my $row = <$fh_r>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @pheno_var, \@columns;
            }
        close($fh_r);
        # print STDERR Dumper \@pheno_var;

        my @grm_old;
        open(my $fh_grm_old, '<', $grm_file) or die "Could not open file '$grm_file' $!";
            print STDERR "Opened $grm_file\n";

            while (my $row = <$fh_grm_old>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @grm_old, \@columns;
            }
        close($fh_grm_old);

        my %grm_hash_ordered;
        foreach (@grm_old) {
            my $l1 = $accession_id_factor_map{$_->[0]};
            my $l2 = $accession_id_factor_map{$_->[1]};
            my $val = sprintf("%.8f", $_->[2]);
            if ($l1 < $l2) {
                $grm_hash_ordered{$l1}->{$l2} = $val;
            }
            else {
                $grm_hash_ordered{$l2}->{$l1} = $val;
            }
        }

        open(my $fh_grm_new, '>', $grm_rename_tempfile) or die "Could not open file '$grm_rename_tempfile' $!";
            print STDERR "Opened $grm_rename_tempfile\n";

            foreach my $i (sort {$a <=> $b} keys %grm_hash_ordered) {
                my $v = $grm_hash_ordered{$i};
                foreach my $j (sort {$a <=> $b} keys %$v) {
                    my $val = $v->{$j};
                    print $fh_grm_new "$i $j $val\n";
                }
            }
        close($fh_grm_new);

        my $stats_tempfile_2_basename = basename($stats_tempfile_2);
        my $grm_file_basename = basename($grm_rename_tempfile);
        my $permanent_environment_structure_file_basename = basename($permanent_environment_structure_tempfile);
        #my @phenotype_header = ("id", "plot_id", "replicate", "time", "replicate_time", "ind_replicate", @legendre_coeffs, "phenotype");

        my $effect_1_levels = scalar(@rep_time_factors);
        my $effect_grm_levels = scalar(@unique_accession_names);
        my $effect_pe_levels = scalar(@ind_rep_factors);

        $stats_out_cv1_predict_tempfile .= '.dat';
        $stats_out_cv2_predict_tempfile .= '.dat';
        $stats_out_cv3_predict_tempfile .= '.dat';
        $stats_out_cv4_predict_tempfile .= '.dat';
        $stats_out_cv5_predict_tempfile .= '.dat';

        $parameter_tempfile_cv1 .= '.f90';
        $parameter_tempfile_cv2 .= '.f90';
        $parameter_tempfile_cv3 .= '.f90';
        $parameter_tempfile_cv4 .= '.f90';
        $parameter_tempfile_cv5 .= '.f90';

        print STDERR Dumper $stats_tempfile_2;
        my $data_cv_cmd = 'R -e "mat <- read.csv(\''.$stats_tempfile_2.'\', header=FALSE, sep=\' \');
        randomized_positions <- sample(length(mat[,1]));
        cv_step_size <- length(mat[,1]) %/% 5;
        cv_step_size_modulo <- length(mat[,1]) %% 5;
        mat_CV1 <- mat; mat_CV2 <- mat; mat_CV3 <- mat; mat_CV4 <- mat; mat_CV5 <- mat;
        mat_CV1[c(randomized_positions[1:cv_step_size]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV2[c(randomized_positions[(cv_step_size+1):(2*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV3[c(randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV4[c(randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV5[c(randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV1_2 <- mat; mat_CV2_2 <- mat; mat_CV3_2 <- mat; mat_CV4_2 <- mat; mat_CV5_2 <- mat;
        mat_CV1_2[c(randomized_positions[1:cv_step_size]),ncol(mat)] <- -999;
        mat_CV2_2[c(randomized_positions[(cv_step_size+1):(2*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV3_2[c(randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV4_2[c(randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV5_2[c(randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]),ncol(mat)] <- -999;
        write.table(mat, file=\''.$stats_tempfile_2.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV1, file=\''.$stats_out_cv1_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV2, file=\''.$stats_out_cv2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV3, file=\''.$stats_out_cv3_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV4, file=\''.$stats_out_cv4_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV5, file=\''.$stats_out_cv5_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV1_2, file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV2_2, file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV3_2, file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV4_2, file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV5_2, file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        "';
        my $status_cv_files = system($data_cv_cmd);

        my $stats_out_cv1_predict_tempfile_basename = basename($stats_out_cv1_predict_tempfile);
        my $stats_out_cv2_predict_tempfile_basename = basename($stats_out_cv2_predict_tempfile);
        my $stats_out_cv3_predict_tempfile_basename = basename($stats_out_cv3_predict_tempfile);
        my $stats_out_cv4_predict_tempfile_basename = basename($stats_out_cv4_predict_tempfile);
        my $stats_out_cv5_predict_tempfile_basename = basename($stats_out_cv5_predict_tempfile);

        my $stats_out_cv1_2_predict_tempfile_basename = basename($stats_out_cv1_2_predict_tempfile);
        my $stats_out_cv2_2_predict_tempfile_basename = basename($stats_out_cv2_2_predict_tempfile);
        my $stats_out_cv3_2_predict_tempfile_basename = basename($stats_out_cv3_2_predict_tempfile);
        my $stats_out_cv4_2_predict_tempfile_basename = basename($stats_out_cv4_2_predict_tempfile);
        my $stats_out_cv5_2_predict_tempfile_basename = basename($stats_out_cv5_2_predict_tempfile);

        @param_file_rows_data = ('DATAFILE', $stats_tempfile_2_basename);
        @param_file_rows_data_cv1 = ('DATAFILE', $stats_out_cv1_predict_tempfile_basename);
        @param_file_rows_data_cv2 = ('DATAFILE', $stats_out_cv2_predict_tempfile_basename);
        @param_file_rows_data_cv3 = ('DATAFILE', $stats_out_cv3_predict_tempfile_basename);
        @param_file_rows_data_cv4 = ('DATAFILE', $stats_out_cv4_predict_tempfile_basename);
        @param_file_rows_data_cv5 = ('DATAFILE', $stats_out_cv5_predict_tempfile_basename);
        @param_file_rows_1 = (
            'NUMBER_OF_TRAITS',
            '1',
            'NUMBER_OF_EFFECTS',
            ($legendre_order_number + 1)*2 + 1,
            'OBSERVATION(S)',
            $legendre_order_number + 1 + 6 + 1,
            'WEIGHT(S)',
            '',
            'EFFECTS: POSITION_IN_DATAFILE NUMBER_OF_LEVELS TYPE_OF_EFFECT',
            '5 '.$effect_1_levels.' cross',
        );
        my $p_counter = 1;
        foreach (0 .. $legendre_order_number) {
            push @param_file_rows_1, 6+$p_counter.' '.$effect_grm_levels.' cov 1';
            $p_counter++;
        }
        my $p2_counter = 1;
        my @hetres_group;
        foreach (0 .. $legendre_order_number) {
            push @param_file_rows_1, 6+$p2_counter.' '.$effect_pe_levels.' cov 6';
            push @hetres_group, 6+$p2_counter;
            $p2_counter++;
        }
        my @random_group1;
        foreach (1..$legendre_order_number+1) {
            push @random_group1, 1+$_;
        }
        my $random_group_string1 = join ' ', @random_group1;
        my @random_group2;
        foreach (1..$legendre_order_number+1) {
            push @random_group2, 1+scalar(@random_group1)+$_;
        }
        my $random_group_string2 = join ' ', @random_group2;
        my $hetres_group_string = join ' ', @hetres_group;
        push @param_file_rows_1, (
            'RANDOM_RESIDUAL VALUES',
            '1',
            'RANDOM_GROUP',
            $random_group_string1,
            'RANDOM_TYPE'
        );
        if (!$protocol_id) {
            push @param_file_rows_1, (
                'diagonal',
                'FILE',
                ''
            );
        }
        else {
            push @param_file_rows_1, (
                'user_file_inv',
                'FILE',
                $grm_file_basename
            );
        }
        @param_file_rows_2 = (
            '(CO)VARIANCES'
        );
        foreach (@pheno_var) {
            my $s = join ' ', @$_;
            push @param_file_rows_2, $s;
        }
        @param_file_rows_3 = (
            'RANDOM_GROUP',
            $random_group_string2,
            'RANDOM_TYPE'
        );

        if ($permanent_environment_structure eq 'identity' || $permanent_environment_structure eq 'env_corr_structure') {
            push @param_file_rows_3, (
                'diagonal',
                'FILE',
                ''
            );
        }
        else {
            push @param_file_rows_3, (
                'user_file_inv',
                'FILE',
                $permanent_environment_structure_file_basename
            );
        }

        @param_file_rows_4 = (
            '(CO)VARIANCES'
        );
        foreach (@pheno_var) {
            my $s = join ' ', @$_;
            push @param_file_rows_4, $s;
        }
        my $hetres_pol_string = join ' ', @sorted_scaled_ln_times;
        @param_file_rows_5 = (
            'OPTION hetres_pos '.$hetres_group_string,
            'OPTION hetres_pol '.$hetres_pol_string,
            'OPTION conv_crit '.$tolparinv,
            'OPTION missing -999',
            'OPTION residual',
        );

        open(my $Fp, ">", $parameter_tempfile) || die "Can't open file ".$parameter_tempfile;
            foreach ((@param_file_rows_data, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp "$_\n";
            }
        close($Fp);

        open(my $Fp_cv1, ">", $parameter_tempfile_cv1) || die "Can't open file ".$parameter_tempfile_cv1;
            foreach ((@param_file_rows_data_cv1, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv1 "$_\n";
            }
        close($Fp_cv1);

        open(my $Fp_cv2, ">", $parameter_tempfile_cv2) || die "Can't open file ".$parameter_tempfile_cv2;
            foreach ((@param_file_rows_data_cv2, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv2 "$_\n";
            }
        close($Fp_cv2);

        open(my $Fp_cv3, ">", $parameter_tempfile_cv3) || die "Can't open file ".$parameter_tempfile_cv3;
            foreach ((@param_file_rows_data_cv3, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv3 "$_\n";
            }
        close($Fp_cv3);

        open(my $Fp_cv4, ">", $parameter_tempfile_cv4) || die "Can't open file ".$parameter_tempfile_cv4;
            foreach ((@param_file_rows_data_cv4, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv4 "$_\n";
            }
        close($Fp_cv4);

        open(my $Fp_cv5, ">", $parameter_tempfile_cv5) || die "Can't open file ".$parameter_tempfile_cv5;
            foreach ((@param_file_rows_data_cv5, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv5 "$_\n";
            }
        close($Fp_cv5);

        my $command_name = '';
        if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'blupf90_grm_random_regression_dap_blups') {
            $command_name = 'blupf90';
        }
        elsif ($statistics_select eq 'airemlf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
            $command_name = 'airemlf90';
        }

        my $parameter_tempfile_basename = basename($parameter_tempfile);
        my $parameter_tempfile_cv1_basename = basename($parameter_tempfile_cv1);
        my $parameter_tempfile_cv2_basename = basename($parameter_tempfile_cv2);
        my $parameter_tempfile_cv3_basename = basename($parameter_tempfile_cv3);
        my $parameter_tempfile_cv4_basename = basename($parameter_tempfile_cv4);
        my $parameter_tempfile_cv5_basename = basename($parameter_tempfile_cv5);
        my $parameter_tempfile_cv1_2_basename = basename($parameter_tempfile_cv1_2);
        my $parameter_tempfile_cv2_2_basename = basename($parameter_tempfile_cv2_2);
        my $parameter_tempfile_cv3_2_basename = basename($parameter_tempfile_cv3_2);
        my $parameter_tempfile_cv4_2_basename = basename($parameter_tempfile_cv4_2);
        my $parameter_tempfile_cv5_2_basename = basename($parameter_tempfile_cv5_2);

        $stats_out_tempfile .= '.log';
        $cmd_f90 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_basename.' | '.$command_name.' > '.$stats_out_tempfile;
        print STDERR Dumper $cmd_f90;
        my $status = system($cmd_f90);

        my @log_output_rows;
        open(my $fh_log, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
            print STDERR "Opened $stats_out_tempfile\n";
            while (my $row = <$fh_log>) {
                print STDERR $row;
                push @log_output_rows, $row;
            }
        close($fh_log);

        my $log_output = join '', @log_output_rows;
        my ($gen_var_string) = $log_output =~ /Genetic variance\(s\) for effect  2(.*?)correlations/gs;
        @rr_coeff_genetic_covariance_original = split ' ', $gen_var_string;
        print STDERR Dumper \@rr_coeff_genetic_covariance_original;
        my ($env_var_string) = $log_output =~ /Genetic variance\(s\) for effect  $legendre_order_number_env_var_pos(.*?)correlations/gs;
        @rr_coeff_env_covariance_original = split ' ', $env_var_string;
        print STDERR Dumper \@rr_coeff_env_covariance_original;
        my (@gen_cor_string) = $log_output =~ /correlations(.*?)eigenvectors/gs;
        @rr_coeff_genetic_correlation_original = split ' ', $gen_cor_string[0];
        print STDERR Dumper \@rr_coeff_genetic_correlation_original;
        @rr_coeff_env_correlation_original = split ' ', $gen_cor_string[1];
        print STDERR Dumper \@rr_coeff_env_correlation_original;
        my ($res_se_string) = $log_output =~ /SE for R(.*?)\* FINISHED \(AIREMLF90\)/gs;
        print STDERR Dumper $res_se_string;
        # $rr_residual_variance_original = ($res_se_string**2)*$number_plots;
        $rr_residual_variance_original = $res_se_string;
        print STDERR Dumper $rr_residual_variance_original;

        @param_file_rows_6 = (
            '(CO)VARIANCES'
        );
        my $cov_gen_counter = 0;
        foreach my $i (0..$legendre_order_number) {
            my @cov_row;
            foreach my $j (0..$legendre_order_number) {
                push @cov_row, $rr_coeff_genetic_covariance_original[$cov_gen_counter];
                $cov_gen_counter++;
            }
            my $s = join ' ', @cov_row;
            push @param_file_rows_6, $s;
        }

        @param_file_rows_7 = (
            '(CO)VARIANCES'
        );
        my $cov_env_counter = 0;
        foreach my $i (0..$legendre_order_number) {
            my @cov_row;
            foreach my $j (0..$legendre_order_number) {
                push @cov_row, $rr_coeff_env_covariance_original[$cov_env_counter];
                $cov_env_counter++;
            }
            my $s = join ' ', @cov_row;
            push @param_file_rows_7, $s;
        }

        open(my $Fp_cv1_2, ">", $parameter_tempfile_cv1_2) || die "Can't open file ".$parameter_tempfile_cv1_2;
            foreach ((@param_file_rows_data_cv1, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv1_2 "$_\n";
            }
        close($Fp_cv1_2);

        open(my $Fp_cv2_2, ">", $parameter_tempfile_cv2_2) || die "Can't open file ".$parameter_tempfile_cv2_2;
            foreach ((@param_file_rows_data_cv2, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv2_2 "$_\n";
            }
        close($Fp_cv2_2);

        open(my $Fp_cv3_2, ">", $parameter_tempfile_cv3_2) || die "Can't open file ".$parameter_tempfile_cv3_2;
            foreach ((@param_file_rows_data_cv3, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv3_2 "$_\n";
            }
        close($Fp_cv3_2);

        open(my $Fp_cv4_2, ">", $parameter_tempfile_cv4_2) || die "Can't open file ".$parameter_tempfile_cv4_2;
            foreach ((@param_file_rows_data_cv4, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv4_2 "$_\n";
            }
        close($Fp_cv4_2);

        open(my $Fp_cv5_2, ">", $parameter_tempfile_cv5_2) || die "Can't open file ".$parameter_tempfile_cv5_2;
            foreach ((@param_file_rows_data_cv5, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv5_2 "$_\n";
            }
        close($Fp_cv5_2);

        my $q_time = "SELECT t.cvterm_id FROM cvterm as t JOIN cv ON(t.cv_id=cv.cv_id) WHERE t.name=? and cv.name=?;";
        my $h_time = $schema->storage->dbh()->prepare($q_time);

        $yhat_residual_tempfile = $tmp_stats_dir."/yhat_residual";
        open(my $fh_yhat_res, '<', $yhat_residual_tempfile) or die "Could not open file '$yhat_residual_tempfile' $!";
            print STDERR "Opened $yhat_residual_tempfile\n";

            my $pred_res_counter = 0;
            my $trait_counter = 0;
            while (my $row = <$fh_yhat_res>) {
                # print STDERR $row;
                my @vals = split ' ', $row;
                my $pred = $vals[0];
                my $residual = $vals[1];
                $model_sum_square_residual_original = $model_sum_square_residual_original + $residual*$residual;

                my $plot_name = $plot_id_count_map_reverse{$pred_res_counter};
                my $time = $time_count_map_reverse{$pred_res_counter};

                $rr_residual_unique_traits{$seen_times{$time}}++;

                if (defined $residual && $residual ne '') {
                    $result_residual_data_original->{$plot_name}->{$seen_times{$time}} = [$residual, $timestamp, $user_name, '', ''];
                    $residual_sum_original += abs($residual);
                    $residual_sum_square_original = $residual_sum_square_original + $residual*$residual;
                }
                if (defined $pred && $pred ne '') {
                    $result_fitted_data_original->{$plot_name}->{$seen_times{$time}} = [$pred, $timestamp, $user_name, '', ''];
                }

                $pred_res_counter++;
            }
        close($fh_yhat_res);

        $blupf90_solutions_tempfile = $tmp_stats_dir."/solutions";
        open(my $fh_sol, '<', $blupf90_solutions_tempfile) or die "Could not open file '$blupf90_solutions_tempfile' $!";
            print STDERR "Opened $blupf90_solutions_tempfile\n";

            my $head = <$fh_sol>;
            print STDERR $head;

            my $solution_file_counter = 0;
            my $grm_sol_counter = 0;
            my $grm_sol_trait_counter = 0;
            my $pe_sol_counter = 0;
            my $pe_sol_trait_counter = 0;
            while (defined(my $row = <$fh_sol>)) {
                # print STDERR $row;
                my @vals = split ' ', $row;
                my $level = $vals[2];
                my $value = $vals[3];
                if ($solution_file_counter < $effect_1_levels) {
                    $fixed_effects_original{$solution_file_counter}->{$level} = $value;
                }
                elsif ($solution_file_counter < $effect_1_levels + $effect_grm_levels*($legendre_order_number+1)) {
                    my $accession_name = $accession_id_factor_map_reverse{$level};
                    if ($grm_sol_counter < $effect_grm_levels-1) {
                        $grm_sol_counter++;
                    }
                    else {
                        $grm_sol_counter = 0;
                        $grm_sol_trait_counter++;
                    }
                    if (defined $value && $value ne '') {
                        push @{$rr_genetic_coefficients_original{$accession_name}}, $value;
                    }
                }
                else {
                    my $plot_name = $plot_id_factor_map_reverse{$level};
                    if ($pe_sol_counter < $effect_pe_levels-1) {
                        $pe_sol_counter++;
                    }
                    else {
                        $pe_sol_counter = 0;
                        $pe_sol_trait_counter++;
                    }
                    if (defined $value && $value ne '') {
                        push @{$rr_temporal_coefficients_original{$plot_name}}, $value;
                    }
                }
                $solution_file_counter++;
            }
        close($fh_sol);

        # print STDERR Dumper \%rr_genetic_coefficients_original;
        # print STDERR Dumper \%rr_temporal_coefficients_original;

        open(my $Fgc, ">", $coeff_genetic_tempfile) || die "Can't open file ".$coeff_genetic_tempfile;
        print STDERR "OPENED $coeff_genetic_tempfile\n";

        while ( my ($accession_name, $coeffs) = each %rr_genetic_coefficients_original) {
            my @line = ($accession_name, @$coeffs);
            my $line_string = join ',', @line;
            print $Fgc "$line_string\n";

            foreach my $t_i (0..20) {
                my $time = $t_i*5/100;
                my $time_rescaled = sprintf("%.2f", $time*($time_max - $time_min) + $time_min);

                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                my $time_term_string = '';
                if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {
                    $time_term_string = "GDD $time_rescaled";
                }
                elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
                    $time_term_string = "day $time_rescaled"
                }
                $h_time->execute($time_term_string, 'cxgn_time_ontology');
                my ($time_cvterm_id) = $h_time->fetchrow_array();

                if (!$time_cvterm_id) {
                    my $new_time_term = $schema->resultset("Cv::Cvterm")->create_with({
                       name => $time_term_string,
                       cv => 'cxgn_time_ontology'
                    });
                    $time_cvterm_id = $new_time_term->cvterm_id();
                }
                my $time_term_string_blup = SGN::Model::Cvterm::get_trait_from_cvterm_id($schema, $time_cvterm_id, 'extended');
                $rr_unique_traits{$time_term_string_blup}++;

                $trait_to_time_map{$time_term_string_blup} = $time_rescaled;

                $result_blup_data_original->{$accession_name}->{$time_term_string_blup} = [$value, $timestamp, $user_name, '', ''];
            }
        }
        close($Fgc);

        while ( my ($accession_name, $coeffs) = each %rr_genetic_coefficients_original) {
            foreach my $time_term (@sorted_trait_names) {
                my $time = ($time_term - $time_min)/($time_max - $time_min);
                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                $result_blup_data_delta_original->{$accession_name}->{$time_term} = [$value, $timestamp, $user_name, '', ''];

                if ($value < $genetic_effect_min_original) {
                    $genetic_effect_min_original = $value;
                }
                elsif ($value >= $genetic_effect_max_original) {
                    $genetic_effect_max_original = $value;
                }

                $genetic_effect_sum_original += abs($value);
                $genetic_effect_sum_square_original = $genetic_effect_sum_square_original + $value*$value;
            }
        }

        open(my $Fpc, ">", $coeff_pe_tempfile) || die "Can't open file ".$coeff_pe_tempfile;
        print STDERR "OPENED $coeff_pe_tempfile\n";

        while ( my ($plot_name, $coeffs) = each %rr_temporal_coefficients_original) {
            my @line = ($plot_name, @$coeffs);
            my $line_string = join ',', @line;
            print $Fpc "$line_string\n";

            foreach my $t_i (0..20) {
                my $time = $t_i*5/100;
                my $time_rescaled = sprintf("%.2f", $time*($time_max - $time_min) + $time_min);

                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                my $time_term_string = '';
                if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {
                    $time_term_string = "GDD $time_rescaled";
                }
                elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
                    $time_term_string = "day $time_rescaled"
                }
                $h_time->execute($time_term_string, 'cxgn_time_ontology');
                my ($time_cvterm_id) = $h_time->fetchrow_array();

                if (!$time_cvterm_id) {
                    my $new_time_term = $schema->resultset("Cv::Cvterm")->create_with({
                       name => $time_term_string,
                       cv => 'cxgn_time_ontology'
                    });
                    $time_cvterm_id = $new_time_term->cvterm_id();
                }
                my $time_term_string_pe = SGN::Model::Cvterm::get_trait_from_cvterm_id($schema, $time_cvterm_id, 'extended');

                $trait_to_time_map{$time_term_string_pe} = $time_rescaled;

                $result_blup_pe_data_original->{$plot_name}->{$time_term_string_pe} = [$value, $timestamp, $user_name, '', ''];
            }
        }
        close($Fpc);

        while ( my ($plot_name, $coeffs) = each %rr_temporal_coefficients_original) {
            foreach my $time_term (@sorted_trait_names) {
                my $time = ($time_term - $time_min)/($time_max - $time_min);
                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                $result_blup_pe_data_delta_original->{$plot_name}->{$time_term} = [$value, $timestamp, $user_name, '', ''];

                if ($value < $env_effect_min_original) {
                    $env_effect_min_original = $value;
                }
                elsif ($value >= $env_effect_max_original) {
                    $env_effect_max_original = $value;
                }

                $env_effect_sum_original += abs($value);
                $env_effect_sum_square_original = $env_effect_sum_square_original + $value*$value;
            }
        }

        if ($perform_cv) {
            my $cmd_f90_cv1 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv1_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv1;
            my $status_cv1 = system($cmd_f90_cv1);

            open(my $fh_log_cv1, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv1>) {
                    print STDERR $row;
                }
            close($fh_log_cv1);

            my $yhat_residual_tempfile_cv1 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv1, '<', $yhat_residual_tempfile_cv1) or die "Could not open file '$yhat_residual_tempfile_cv1' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv1\n";

                while (my $row = <$fh_yhat_res_cv1>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv1_original = $model_sum_square_cv1_original + $residual*$residual;
                }
            close($fh_yhat_res_cv1);

            my $cmd_f90_cv2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv2_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv2;
            my $status_cv2 = system($cmd_f90_cv2);

            open(my $fh_log_cv2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv2>) {
                    print STDERR $row;
                }
            close($fh_log_cv2);

            my $yhat_residual_tempfile_cv2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv2, '<', $yhat_residual_tempfile_cv2) or die "Could not open file '$yhat_residual_tempfile_cv2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv2\n";

                while (my $row = <$fh_yhat_res_cv2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv2_original = $model_sum_square_cv2_original + $residual*$residual;
                }
            close($fh_yhat_res_cv2);

            my $cmd_f90_cv3 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv3_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv3;
            my $status_cv3 = system($cmd_f90_cv3);

            open(my $fh_log_cv3, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv3>) {
                    print STDERR $row;
                }
            close($fh_log_cv3);

            my $yhat_residual_tempfile_cv3 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv3, '<', $yhat_residual_tempfile_cv3) or die "Could not open file '$yhat_residual_tempfile_cv3' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv3\n";

                while (my $row = <$fh_yhat_res_cv3>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv3_original = $model_sum_square_cv3_original + $residual*$residual;
                }
            close($fh_yhat_res_cv3);

            my $cmd_f90_cv4 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv4_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv4;
            my $status_cv4 = system($cmd_f90_cv4);

            open(my $fh_log_cv4, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv4>) {
                    print STDERR $row;
                }
            close($fh_log_cv4);

            my $yhat_residual_tempfile_cv4 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv4, '<', $yhat_residual_tempfile_cv4) or die "Could not open file '$yhat_residual_tempfile_cv4' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv4\n";

                while (my $row = <$fh_yhat_res_cv4>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv4_original = $model_sum_square_cv4_original + $residual*$residual;
                }
            close($fh_yhat_res_cv4);

            my $cmd_f90_cv5 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv5_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv5;
            my $status_cv5 = system($cmd_f90_cv5);

            open(my $fh_log_cv5, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv5>) {
                    print STDERR $row;
                }
            close($fh_log_cv5);

            my $yhat_residual_tempfile_cv5 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv5, '<', $yhat_residual_tempfile_cv5) or die "Could not open file '$yhat_residual_tempfile_cv5' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv5\n";

                while (my $row = <$fh_yhat_res_cv5>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv5_original = $model_sum_square_cv5_original + $residual*$residual;
                }
            close($fh_yhat_res_cv5);

            my $cmd_f90_cv1_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv1_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv1_2;
            my $status_cv1_2 = system($cmd_f90_cv1_2);

            open(my $fh_log_cv1_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv1_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv1_2);

            my $yhat_residual_tempfile_cv1_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv1_2, '<', $yhat_residual_tempfile_cv1_2) or die "Could not open file '$yhat_residual_tempfile_cv1_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv1_2\n";

                while (my $row = <$fh_yhat_res_cv1_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv1_2_original = $model_sum_square_cv1_2_original + $residual*$residual;
                }
            close($fh_yhat_res_cv1_2);

            my $cmd_f90_cv2_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv2_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv2_2;
            my $status_cv2_2 = system($cmd_f90_cv2_2);

            open(my $fh_log_cv2_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv2_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv2_2);

            my $yhat_residual_tempfile_cv2_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv2_2, '<', $yhat_residual_tempfile_cv2_2) or die "Could not open file '$yhat_residual_tempfile_cv2_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv2_2\n";

                while (my $row = <$fh_yhat_res_cv2_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv2_2_original = $model_sum_square_cv2_2_original + $residual*$residual;
                }
            close($fh_yhat_res_cv2_2);

            my $cmd_f90_cv3_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv3_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv3_2;
            my $status_cv3_2 = system($cmd_f90_cv3_2);

            open(my $fh_log_cv3_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv3_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv3_2);

            my $yhat_residual_tempfile_cv3_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv3_2, '<', $yhat_residual_tempfile_cv3_2) or die "Could not open file '$yhat_residual_tempfile_cv3_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv3_2\n";

                while (my $row = <$fh_yhat_res_cv3_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv3_2_original = $model_sum_square_cv3_2_original + $residual*$residual;
                }
            close($fh_yhat_res_cv3_2);

            my $cmd_f90_cv4_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv4_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv4_2;
            my $status_cv4_2 = system($cmd_f90_cv4_2);

            open(my $fh_log_cv4_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv4_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv4_2);

            my $yhat_residual_tempfile_cv4_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv4_2, '<', $yhat_residual_tempfile_cv4_2) or die "Could not open file '$yhat_residual_tempfile_cv4_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv4_2\n";

                while (my $row = <$fh_yhat_res_cv4_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv4_2_original = $model_sum_square_cv4_2_original + $residual*$residual;
                }
            close($fh_yhat_res_cv4_2);

            my $cmd_f90_cv5_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv5_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv5_2;
            my $status_cv5_2 = system($cmd_f90_cv5_2);

            open(my $fh_log_cv5_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv5_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv5_2);

            my $yhat_residual_tempfile_cv5_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv5_2, '<', $yhat_residual_tempfile_cv5_2) or die "Could not open file '$yhat_residual_tempfile_cv5_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv5_2\n";

                while (my $row = <$fh_yhat_res_cv5_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv5_2_original = $model_sum_square_cv5_2_original + $residual*$residual;
                }
            close($fh_yhat_res_cv5_2);
        }
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_spatial_genetic_blups') {
        $analysis_model_language = "R";

        $statistical_ontology_term = "Univariate linear mixed model 2D spline genetic BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000038"; #In the JS this is set to either Univariate linear mixed model 2D spline spatial BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000039

        $analysis_model_training_data_file_type = "nicksmixedmodelsanalytics_v1.01_asreml_grm_univariate_spatial_genetic_blups_phenotype_file";

        my @grm_old;
        open(my $fh_grm_old, '<', $grm_file) or die "Could not open file '$grm_file' $!";
            print STDERR "Opened $grm_file\n";

            while (my $row = <$fh_grm_old>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @grm_old, \@columns;
            }
        close($fh_grm_old);

        my %grm_hash_ordered;
        foreach (@grm_old) {
            my $l1 = $accession_id_factor_map{$_->[0]};
            my $l2 = $accession_id_factor_map{$_->[1]};
            my $val = sprintf("%.8f", $_->[2]);
            if ($l1 > $l2) {
                $grm_hash_ordered{$l1}->{$l2} = $val;
            }
            else {
                $grm_hash_ordered{$l2}->{$l1} = $val;
            }
        }

        open(my $fh_grm_new, '>', $grm_rename_tempfile) or die "Could not open file '$grm_rename_tempfile' $!";
            print STDERR "Opened $grm_rename_tempfile\n";

            foreach my $i (sort {$a <=> $b} keys %grm_hash_ordered) {
                my $v = $grm_hash_ordered{$i};
                foreach my $j (sort {$a <=> $b} keys %$v) {
                    my $val = $v->{$j};
                    print $fh_grm_new "$i $j $val\n";
                }
            }
        close($fh_grm_new);

        # foreach my $time (@sorted_trait_names) {
        #     my @param_file_rows = (
        #         '!NOGRAPHICS !DEBUG !QUIET',
        #         'Single Trait analysis',
        #         ' id !I',
        #         ' plot_id !I',
        #         ' replicate !I',
        #         ' rowNumber !I',
        #         ' colNumber !I',
        #         ' id_factor !I',
        #         ' plot_id_factor !I'
        #     );
        #     foreach my $t (@sorted_trait_names) {
        #         push @param_file_rows, " t$t";
        #     }
        #     push @param_file_rows, (
        #         "$grm_file_basename !NSD",
        #         "$stats_tempfile_2_basename !CSV !SKIP 1 !MVINCLUDE !MAXIT 200 !EXTRA 5",
        #         '',
        #         "t$time ~ mu replicate !r grm1(id_factor) ar1(rowNumber).ar1v(colNumber)",
        #     );
        #
        #     open(my $Fp, ">", $parameter_asreml_tempfile) || die "Can't open file ".$parameter_asreml_tempfile;
        #         print STDERR "WRITE ASREML PARAMFILE $parameter_asreml_tempfile\n";
        #         foreach (@param_file_rows) {
        #             print $Fp "$_\n";
        #         }
        #     close($Fp);
        #
        #     my $parameter_asreml_tempfile_basename = basename($parameter_asreml_tempfile);
        #     $stats_out_tempfile .= '.log';
        #     $cmd_asreml = 'cd '.$tmp_stats_dir.'; asreml '.$parameter_asreml_tempfile_basename.' > '.$stats_out_tempfile;
        #     print STDERR Dumper $cmd_asreml;
        #     my $status = system($cmd_asreml);
        # }

        #my @phenotype_header = ("id", "plot_id", "replicate", "rowNumber", "colNumber"", "id_factor", "plot_id_factor", "t@times");

        my $tol_asr = 'c(-8,-10)';
        if ($tolparinv eq '0.000001') {
            $tol_asr = 'c(-6,-8)';
        }
        if ($tolparinv eq '0.00001') {
            $tol_asr = 'c(-5,-7)';
        }
        if ($tolparinv eq '0.0001') {
            $tol_asr = 'c(-4,-6)';
        }
        if ($tolparinv eq '0.001') {
            $tol_asr = 'c(-3,-5)';
        }
        if ($tolparinv eq '0.01') {
            $tol_asr = 'c(-2,-4)';
        }
        if ($tolparinv eq '0.05') {
            $tol_asr = 'c(-2,-3)';
        }
        if ($tolparinv eq '0.08') {
            $tol_asr = 'c(-1,-2)';
        }
        if ($tolparinv eq '0.1' || $tolparinv eq '0.2' || $tolparinv eq '0.5') {
            $tol_asr = 'c(-1,-2)';
        }

        my @encoded_traits = values %trait_name_encoder;
        $number_traits = scalar(@sorted_trait_names);
        $number_accessions = scalar(@unique_accession_names);
        foreach my $t (@sorted_trait_names) {

            $prepare_file_cv_cmd = 'R -e "library(data.table);
            mat <- data.frame(fread(\''.$stats_tempfile_2.'\', header=TRUE, sep=\',\'));
            randomized_positions <- sample(length(mat\$plot_id));
            cv_step_size <- length(mat\$plot_id) %/% 5;
            cv_step_size_modulo <- length(mat\$plot_id) %% 5;
            ';
            my $t_coded_cv1 = 't'.$t.'_CV1';
            my $t_coded_cv1_2 = 't'.$t.'_CV1_2';
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv1.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv1.'[randomized_positions[1:cv_step_size]] <- median(mat\$t'.$t.');
            mat\$'.$t_coded_cv1_2.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv1_2.'[randomized_positions[1:cv_step_size]] <- mean(mat\$t'.$t.');
            ';
            my $t_coded_cv2 = 't'.$t.'_CV2';
            my $t_coded_cv2_2 = 't'.$t.'_CV2_2';
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv2.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv2.'[randomized_positions[(cv_step_size+1):(2*cv_step_size)]] <- median(mat\$t'.$t.');
            mat\$'.$t_coded_cv2_2.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv2_2.'[randomized_positions[(cv_step_size+1):(2*cv_step_size)]] <- mean(mat\$t'.$t.');
            ';
            my $t_coded_cv3 = 't'.$t.'_CV3';
            my $t_coded_cv3_2 = 't'.$t.'_CV3_2';
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv3.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv3.'[randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]] <- median(mat\$t'.$t.');
            mat\$'.$t_coded_cv3_2.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv3_2.'[randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]] <- mean(mat\$t'.$t.');
            ';
            my $t_coded_cv4 = 't'.$t.'_CV4';
            my $t_coded_cv4_2 = 't'.$t.'_CV4_2';
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv4.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv4.'[randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]] <- median(mat\$t'.$t.');
            mat\$'.$t_coded_cv4_2.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv4_2.'[randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]] <- mean(mat\$t'.$t.');
            ';
            my $t_coded_cv5 = 't'.$t.'_CV5';
            my $t_coded_cv5_2 = 't'.$t.'_CV5_2';
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv5.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv5.'[randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]] <- median(mat\$t'.$t.');
            mat\$'.$t_coded_cv5_2.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv5_2.'[randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]] <- mean(mat\$t'.$t.');
            ';
            $prepare_file_cv_cmd .= '
            write.table(mat, file=\''.$stats_tempfile_2.'\', row.names=FALSE, col.names=TRUE, sep=\',\');
            "';

            $statistics_cmd_reading = 'R -e "library(asreml); library(data.table); library(reshape2);
            mat <- data.frame(fread(\''.$stats_tempfile_2.'\', header=TRUE, sep=\',\'));
            geno_mat_3col <- data.frame(fread(\''.$grm_rename_tempfile.'\', header=FALSE, sep=\' \'));
            mat\$rowNumber <- as.numeric(mat\$rowNumber);
            mat\$colNumber <- as.numeric(mat\$colNumber);
            mat\$rowNumberFactor <- as.factor(mat\$rowNumber);
            mat\$colNumberFactor <- as.factor(mat\$colNumber);
            mat\$rowNumberFactorSep <- mat\$rowNumberFactor;
            mat\$colNumberFactorSep <- mat\$colNumberFactor;
            mat\$id_factor <- as.factor(mat\$id_factor);
            mat <- mat[order(mat\$rowNumber, mat\$colNumber),];
            attr(geno_mat_3col,\'rowNames\') <- as.character(seq(1,'.$number_accessions.'));
            attr(geno_mat_3col,\'colNames\') <- as.character(seq(1,'.$number_accessions.'));
            attr(geno_mat_3col,\'INVERSE\') <- TRUE;
            ';
            my $statistics_cmd_model = '
            mix <- asreml(t'.$t.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + rowNumberFactorSep + colNumberFactorSep + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            if (!is.null(summary(mix,coef=TRUE)\$coef.random)) {
            write.table(summary(mix,coef=TRUE)\$coef.random, file=\''.$stats_out_tempfile.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');
            write.table(summary(mix)\$varcomp, file=\''.$stats_out_tempfile_varcomp.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, residuals = mix\$residuals, fitted = mix\$linear.predictors, rowNumber = mat\$rowNumber, colNumber = mat\$colNumber), file=\''.$stats_out_tempfile_residual.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            }
            "';

            my $cv_classify_string = 'id_factor';
            $statistics_cmd_cv_1 = '
            mix_cv1 <- asreml('.$t_coded_cv1.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + rowNumberFactorSep + colNumberFactorSep + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            mix_cv2 <- asreml('.$t_coded_cv2.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + rowNumberFactorSep + colNumberFactorSep + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            mix_cv3 <- asreml('.$t_coded_cv3.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + rowNumberFactorSep + colNumberFactorSep + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            mix_cv4 <- asreml('.$t_coded_cv4.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + rowNumberFactorSep + colNumberFactorSep + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            mix_cv5 <- asreml('.$t_coded_cv5.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + rowNumberFactorSep + colNumberFactorSep + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');

            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv1.' = mat\$'.$t_coded_cv1.', residuals = mix_cv1\$residuals, fitted = mix_cv1\$linear.predictors), file=\''.$stats_out_cv1_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv2.' = mat\$'.$t_coded_cv2.', residuals = mix_cv2\$residuals, fitted = mix_cv2\$linear.predictors), file=\''.$stats_out_cv2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv3.' = mat\$'.$t_coded_cv3.', residuals = mix_cv3\$residuals, fitted = mix_cv3\$linear.predictors), file=\''.$stats_out_cv3_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv4.' = mat\$'.$t_coded_cv4.', residuals = mix_cv4\$residuals, fitted = mix_cv4\$linear.predictors), file=\''.$stats_out_cv4_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv5.' = mat\$'.$t_coded_cv5.', residuals = mix_cv5\$residuals, fitted = mix_cv5\$linear.predictors), file=\''.$stats_out_cv5_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            "';

            $statistics_cmd_cv_2 = '
            mix_cv_2_1 <- asreml('.$t_coded_cv1_2.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + rowNumberFactorSep + colNumberFactorSep + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            mix_cv_2_2 <- asreml('.$t_coded_cv2_2.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + rowNumberFactorSep + colNumberFactorSep + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            mix_cv_2_3 <- asreml('.$t_coded_cv3_2.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + rowNumberFactorSep + colNumberFactorSep + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            mix_cv_2_4 <- asreml('.$t_coded_cv4_2.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + rowNumberFactorSep + colNumberFactorSep + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            mix_cv_2_5 <- asreml('.$t_coded_cv5_2.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + rowNumberFactorSep + colNumberFactorSep + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');

            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv1_2.' = mat\$'.$t_coded_cv1_2.', residuals = mix_cv_2_1\$residuals, fitted = mix_cv_2_1\$linear.predictors), file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv2_2.' = mat\$'.$t_coded_cv2_2.', residuals = mix_cv_2_2\$residuals, fitted = mix_cv_2_2\$linear.predictors), file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv3_2.' = mat\$'.$t_coded_cv3_2.', residuals = mix_cv_2_3\$residuals, fitted = mix_cv_2_3\$linear.predictors), file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv4_2.' = mat\$'.$t_coded_cv4_2.', residuals = mix_cv_2_4\$residuals, fitted = mix_cv_2_4\$linear.predictors), file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv5_2.' = mat\$'.$t_coded_cv5_2.', residuals = mix_cv_2_5\$residuals, fitted = mix_cv_2_5\$linear.predictors), file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            "';

            # p_cv1 <- predict.asreml(mix_cv_2_1, classify = \''.$cv_classify_string.'\', tol='.$tol_asr.' );
            # p_cv2 <- predict.asreml(mix_cv_2_2, classify = \''.$cv_classify_string.'\', tol='.$tol_asr.' );
            # p_cv3 <- predict.asreml(mix_cv_2_3, classify = \''.$cv_classify_string.'\', tol='.$tol_asr.' );
            # p_cv4 <- predict.asreml(mix_cv_2_4, classify = \''.$cv_classify_string.'\', tol='.$tol_asr.' );
            # p_cv5 <- predict.asreml(mix_cv_2_5, classify = \''.$cv_classify_string.'\', tol='.$tol_asr.' );
            # p_cv1;
            # write.table(p_cv1\$pvals, file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            # write.table(p_cv2\$pvals, file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            # write.table(p_cv3\$pvals, file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            # write.table(p_cv4\$pvals, file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            # write.table(p_cv5\$pvals, file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');

            $statistics_cmd = $statistics_cmd_reading.$statistics_cmd_model;

            $cmd_statistics_uni{$t} = {
                prepare_file_cv_cmd => $prepare_file_cv_cmd,
                statistics_cmd => $statistics_cmd,
                statistics_cmd_reading => $statistics_cmd_reading,
                statistics_cmd_cv_1 => $statistics_cmd_cv_1,
                statistics_cmd_cv_2 => $statistics_cmd_cv_2
            };

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;
                my @row_col_ordered_plots_names;

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        push @row_col_ordered_plots_names, $stock_name;
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_original->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_original += abs($residual);
                            $residual_sum_square_original = $residual_sum_square_original + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_original->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_original = $model_sum_square_residual_original + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;

                    my $solution_file_counter = 0;
                    while (defined(my $row = <$fh>)) {
                        # print STDERR $row;
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $level = $columns[0];
                        my $value = $columns[1];
                        my $std = $columns[2];
                        my $z_ratio = $columns[3];
                        if (defined $value && $value ne '') {
                            if ($solution_file_counter < $row_number_span) {
                                # print STDERR "$level $value \n";
                            }
                            elsif ($solution_file_counter < $row_number_span + $number_accessions) {
                                my $stock_name = $accession_id_factor_map_reverse{$solution_file_counter - $row_number_span + 1};
                                $result_blup_data_original->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $genetic_effect_min_original) {
                                    $genetic_effect_min_original = $value;
                                }
                                elsif ($value >= $genetic_effect_max_original) {
                                    $genetic_effect_max_original = $value;
                                }

                                $genetic_effect_sum_original += abs($value);
                                $genetic_effect_sum_square_original = $genetic_effect_sum_square_original + $value*$value;

                                $current_gen_row_count++;
                            }
                            elsif ($solution_file_counter < $col_number_span + $row_number_span + $number_accessions) {
                                # print STDERR "$level $value \n";
                            }
                            else {
                                my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                                $result_blup_spatial_data_original->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $env_effect_min_original) {
                                    $env_effect_min_original = $value;
                                }
                                elsif ($value >= $env_effect_max_original) {
                                    $env_effect_max_original = $value;
                                }

                                $env_effect_sum_original += abs($value);
                                $env_effect_sum_square_original = $env_effect_sum_square_original + $value*$value;

                                $current_env_row_count++;
                            }
                        }
                        $solution_file_counter++;
                    }
                close($fh);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_original = $model_sum_square_cv1_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_original = $model_sum_square_cv2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_original = $model_sum_square_cv3_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_original = $model_sum_square_cv4_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_original = $model_sum_square_cv5_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_original = $model_sum_square_cv1_2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_original = $model_sum_square_cv2_2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_original = $model_sum_square_cv3_2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_original = $model_sum_square_cv4_2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_original = $model_sum_square_cv5_2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        $columns[0] = "trait:".$columns[0]."!trait_t".$t.":t".$t;
                        push @varcomp_original, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_pure_spatial_genetic_blups') {
        $analysis_model_language = "R";

        $statistical_ontology_term = "Univariate linear mixed model 2D spline genetic BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000038"; #In the JS this is set to either Univariate linear mixed model 2D spline spatial BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000039

        $analysis_model_training_data_file_type = "nicksmixedmodelsanalytics_v1.01_asreml_grm_univariate_spatial_genetic_blups_phenotype_file";

        my @grm_old;
        open(my $fh_grm_old, '<', $grm_file) or die "Could not open file '$grm_file' $!";
            print STDERR "Opened $grm_file\n";

            while (my $row = <$fh_grm_old>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @grm_old, \@columns;
            }
        close($fh_grm_old);

        my %grm_hash_ordered;
        foreach (@grm_old) {
            my $l1 = $accession_id_factor_map{$_->[0]};
            my $l2 = $accession_id_factor_map{$_->[1]};
            my $val = sprintf("%.8f", $_->[2]);
            if ($l1 > $l2) {
                $grm_hash_ordered{$l1}->{$l2} = $val;
            }
            else {
                $grm_hash_ordered{$l2}->{$l1} = $val;
            }
        }

        open(my $fh_grm_new, '>', $grm_rename_tempfile) or die "Could not open file '$grm_rename_tempfile' $!";
            print STDERR "Opened $grm_rename_tempfile\n";

            foreach my $i (sort {$a <=> $b} keys %grm_hash_ordered) {
                my $v = $grm_hash_ordered{$i};
                foreach my $j (sort {$a <=> $b} keys %$v) {
                    my $val = $v->{$j};
                    print $fh_grm_new "$i $j $val\n";
                }
            }
        close($fh_grm_new);

        my $tol_asr = 'c(-8,-10)';
        if ($tolparinv eq '0.000001') {
            $tol_asr = 'c(-6,-8)';
        }
        if ($tolparinv eq '0.00001') {
            $tol_asr = 'c(-5,-7)';
        }
        if ($tolparinv eq '0.0001') {
            $tol_asr = 'c(-4,-6)';
        }
        if ($tolparinv eq '0.001') {
            $tol_asr = 'c(-3,-5)';
        }
        if ($tolparinv eq '0.01') {
            $tol_asr = 'c(-2,-4)';
        }
        if ($tolparinv eq '0.05') {
            $tol_asr = 'c(-2,-3)';
        }
        if ($tolparinv eq '0.08') {
            $tol_asr = 'c(-1,-2)';
        }
        if ($tolparinv eq '0.1' || $tolparinv eq '0.2' || $tolparinv eq '0.5') {
            $tol_asr = 'c(-1,-2)';
        }

        my @encoded_traits = values %trait_name_encoder;
        $number_traits = scalar(@sorted_trait_names);
        $number_accessions = scalar(@unique_accession_names);
        foreach my $t (@sorted_trait_names) {

            $prepare_file_cv_cmd = 'R -e "library(data.table);
            mat <- data.frame(fread(\''.$stats_tempfile_2.'\', header=TRUE, sep=\',\'));
            randomized_positions <- sample(length(mat\$plot_id));
            cv_step_size <- length(mat\$plot_id) %/% 5;
            cv_step_size_modulo <- length(mat\$plot_id) %% 5;
            ';
            my $t_coded_cv1 = 't'.$t.'_CV1';
            my $t_coded_cv1_2 = 't'.$t.'_CV1_2';
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv1.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv1.'[randomized_positions[1:cv_step_size]] <- median(mat\$t'.$t.');
            mat\$'.$t_coded_cv1_2.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv1_2.'[randomized_positions[1:cv_step_size]] <- mean(mat\$t'.$t.');
            ';
            my $t_coded_cv2 = 't'.$t.'_CV2';
            my $t_coded_cv2_2 = 't'.$t.'_CV2_2';
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv2.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv2.'[randomized_positions[(cv_step_size+1):(2*cv_step_size)]] <- median(mat\$t'.$t.');
            mat\$'.$t_coded_cv2_2.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv2_2.'[randomized_positions[(cv_step_size+1):(2*cv_step_size)]] <- mean(mat\$t'.$t.');
            ';
            my $t_coded_cv3 = 't'.$t.'_CV3';
            my $t_coded_cv3_2 = 't'.$t.'_CV3_2';
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv3.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv3.'[randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]] <- median(mat\$t'.$t.');
            mat\$'.$t_coded_cv3_2.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv3_2.'[randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]] <- mean(mat\$t'.$t.');
            ';
            my $t_coded_cv4 = 't'.$t.'_CV4';
            my $t_coded_cv4_2 = 't'.$t.'_CV4_2';
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv4.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv4.'[randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]] <- median(mat\$t'.$t.');
            mat\$'.$t_coded_cv4_2.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv4_2.'[randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]] <- mean(mat\$t'.$t.');
            ';
            my $t_coded_cv5 = 't'.$t.'_CV5';
            my $t_coded_cv5_2 = 't'.$t.'_CV5_2';
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv5.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv5.'[randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]] <- median(mat\$t'.$t.');
            mat\$'.$t_coded_cv5_2.' <- mat\$t'.$t.';
            mat\$'.$t_coded_cv5_2.'[randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]] <- mean(mat\$t'.$t.');
            ';
            $prepare_file_cv_cmd .= '
            write.table(mat, file=\''.$stats_tempfile_2.'\', row.names=FALSE, col.names=TRUE, sep=\',\');
            "';

            $statistics_cmd_reading = 'R -e "library(asreml); library(data.table); library(reshape2);
            mat <- data.frame(fread(\''.$stats_tempfile_2.'\', header=TRUE, sep=\',\'));
            geno_mat_3col <- data.frame(fread(\''.$grm_rename_tempfile.'\', header=FALSE, sep=\' \'));
            mat\$rowNumber <- as.numeric(mat\$rowNumber);
            mat\$colNumber <- as.numeric(mat\$colNumber);
            mat\$rowNumberFactor <- as.factor(mat\$rowNumber);
            mat\$colNumberFactor <- as.factor(mat\$colNumber);
            mat\$rowNumberFactorSep <- mat\$rowNumberFactor;
            mat\$colNumberFactorSep <- mat\$colNumberFactor;
            mat\$id_factor <- as.factor(mat\$id_factor);
            mat <- mat[order(mat\$rowNumber, mat\$colNumber),];
            attr(geno_mat_3col,\'rowNames\') <- as.character(seq(1,'.$number_accessions.'));
            attr(geno_mat_3col,\'colNames\') <- as.character(seq(1,'.$number_accessions.'));
            attr(geno_mat_3col,\'INVERSE\') <- TRUE;
            ';
            my $statistics_cmd_model = '
            mix <- asreml(t'.$t.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            if (!is.null(summary(mix,coef=TRUE)\$coef.random)) {
            write.table(summary(mix,coef=TRUE)\$coef.random, file=\''.$stats_out_tempfile.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');
            write.table(summary(mix)\$varcomp, file=\''.$stats_out_tempfile_varcomp.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, residuals = mix\$residuals, fitted = mix\$linear.predictors, rowNumber = mat\$rowNumber, colNumber = mat\$colNumber), file=\''.$stats_out_tempfile_residual.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            }
            "';

            my $cv_classify_string = 'id_factor';
            $statistics_cmd_cv_1 = '
            mix_cv1 <- asreml('.$t_coded_cv1.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            mix_cv2 <- asreml('.$t_coded_cv2.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            mix_cv3 <- asreml('.$t_coded_cv3.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            mix_cv4 <- asreml('.$t_coded_cv4.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            mix_cv5 <- asreml('.$t_coded_cv5.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');

            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv1.' = mat\$'.$t_coded_cv1.', residuals = mix_cv1\$residuals, fitted = mix_cv1\$linear.predictors), file=\''.$stats_out_cv1_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv2.' = mat\$'.$t_coded_cv2.', residuals = mix_cv2\$residuals, fitted = mix_cv2\$linear.predictors), file=\''.$stats_out_cv2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv3.' = mat\$'.$t_coded_cv3.', residuals = mix_cv3\$residuals, fitted = mix_cv3\$linear.predictors), file=\''.$stats_out_cv3_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv4.' = mat\$'.$t_coded_cv4.', residuals = mix_cv4\$residuals, fitted = mix_cv4\$linear.predictors), file=\''.$stats_out_cv4_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv5.' = mat\$'.$t_coded_cv5.', residuals = mix_cv5\$residuals, fitted = mix_cv5\$linear.predictors), file=\''.$stats_out_cv5_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            "';

            $statistics_cmd_cv_2 = '
            mix_cv_2_1 <- asreml('.$t_coded_cv1_2.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            mix_cv_2_2 <- asreml('.$t_coded_cv2_2.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            mix_cv_2_3 <- asreml('.$t_coded_cv3_2.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            mix_cv_2_4 <- asreml('.$t_coded_cv4_2.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');
            mix_cv_2_5 <- asreml('.$t_coded_cv5_2.'~1 + replicate, random=~vm(id_factor, geno_mat_3col) + ar1v(rowNumberFactor):ar1(colNumberFactor), residual=~idv(units), data=mat, tol='.$tol_asr.');

            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv1_2.' = mat\$'.$t_coded_cv1_2.', residuals = mix_cv_2_1\$residuals, fitted = mix_cv_2_1\$linear.predictors), file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv2_2.' = mat\$'.$t_coded_cv2_2.', residuals = mix_cv_2_2\$residuals, fitted = mix_cv_2_2\$linear.predictors), file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv3_2.' = mat\$'.$t_coded_cv3_2.', residuals = mix_cv_2_3\$residuals, fitted = mix_cv_2_3\$linear.predictors), file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv4_2.' = mat\$'.$t_coded_cv4_2.', residuals = mix_cv_2_4\$residuals, fitted = mix_cv_2_4\$linear.predictors), file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            write.table(data.frame(plot_id = mat\$plot_id, t'.$t.' = mat\$t'.$t.','.$t_coded_cv5_2.' = mat\$'.$t_coded_cv5_2.', residuals = mix_cv_2_5\$residuals, fitted = mix_cv_2_5\$linear.predictors), file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            "';

            # p_cv1 <- predict.asreml(mix_cv_2_1, classify = \''.$cv_classify_string.'\', tol='.$tol_asr.' );
            # p_cv2 <- predict.asreml(mix_cv_2_2, classify = \''.$cv_classify_string.'\', tol='.$tol_asr.' );
            # p_cv3 <- predict.asreml(mix_cv_2_3, classify = \''.$cv_classify_string.'\', tol='.$tol_asr.' );
            # p_cv4 <- predict.asreml(mix_cv_2_4, classify = \''.$cv_classify_string.'\', tol='.$tol_asr.' );
            # p_cv5 <- predict.asreml(mix_cv_2_5, classify = \''.$cv_classify_string.'\', tol='.$tol_asr.' );
            # p_cv1;
            # write.table(p_cv1\$pvals, file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            # write.table(p_cv2\$pvals, file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            # write.table(p_cv3\$pvals, file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            # write.table(p_cv4\$pvals, file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
            # write.table(p_cv5\$pvals, file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');

            $statistics_cmd = $statistics_cmd_reading.$statistics_cmd_model;

            $cmd_statistics_uni{$t} = {
                prepare_file_cv_cmd => $prepare_file_cv_cmd,
                statistics_cmd => $statistics_cmd,
                statistics_cmd_reading => $statistics_cmd_reading,
                statistics_cmd_cv_1 => $statistics_cmd_cv_1,
                statistics_cmd_cv_2 => $statistics_cmd_cv_2
            };

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;
                my @row_col_ordered_plots_names;

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        push @row_col_ordered_plots_names, $stock_name;
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_original->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_original += abs($residual);
                            $residual_sum_square_original = $residual_sum_square_original + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_original->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_original = $model_sum_square_residual_original + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;

                    my $solution_file_counter = 0;
                    while (defined(my $row = <$fh>)) {
                        # print STDERR $row;
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $level = $columns[0];
                        my $value = $columns[1];
                        my $std = $columns[2];
                        my $z_ratio = $columns[3];
                        if (defined $value && $value ne '') {
                            if ($solution_file_counter < $number_accessions) {
                                my $stock_name = $accession_id_factor_map_reverse{$solution_file_counter + 1};
                                $result_blup_data_original->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $genetic_effect_min_original) {
                                    $genetic_effect_min_original = $value;
                                }
                                elsif ($value >= $genetic_effect_max_original) {
                                    $genetic_effect_max_original = $value;
                                }

                                $genetic_effect_sum_original += abs($value);
                                $genetic_effect_sum_square_original = $genetic_effect_sum_square_original + $value*$value;

                                $current_gen_row_count++;
                            }
                            else {
                                my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                                $result_blup_spatial_data_original->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $env_effect_min_original) {
                                    $env_effect_min_original = $value;
                                }
                                elsif ($value >= $env_effect_max_original) {
                                    $env_effect_max_original = $value;
                                }

                                $env_effect_sum_original += abs($value);
                                $env_effect_sum_square_original = $env_effect_sum_square_original + $value*$value;

                                $current_env_row_count++;
                            }
                        }
                        $solution_file_counter++;
                    }
                close($fh);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_original = $model_sum_square_cv1_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_original = $model_sum_square_cv2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_original = $model_sum_square_cv3_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_original = $model_sum_square_cv4_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_original = $model_sum_square_cv5_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_original = $model_sum_square_cv1_2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_original = $model_sum_square_cv2_2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_original = $model_sum_square_cv3_2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_original = $model_sum_square_cv4_2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_original = $model_sum_square_cv5_2_original + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        $columns[0] = "trait:".$columns[0]."!trait_t".$t.":t".$t;
                        push @varcomp_original, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'asreml_grm_multivariate_spatial_genetic_blups') {
        $analysis_model_language = "R";

        $statistical_ontology_term = "Multivariate linear mixed model 2D spline genetic BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000038"; #In the JS this is set to either Univariate linear mixed model 2D spline spatial BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000039

        $analysis_model_training_data_file_type = "nicksmixedmodelsanalytics_v1.01_asreml_grm_multivariate_spatial_genetic_blups_phenotype_file";

        my @grm_old;
        open(my $fh_grm_old, '<', $grm_file) or die "Could not open file '$grm_file' $!";
            print STDERR "Opened $grm_file\n";

            while (my $row = <$fh_grm_old>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @grm_old, \@columns;
            }
        close($fh_grm_old);

        my %grm_hash_ordered;
        foreach (@grm_old) {
            my $l1 = $accession_id_factor_map{$_->[0]};
            my $l2 = $accession_id_factor_map{$_->[1]};
            my $val = sprintf("%.8f", $_->[2]);
            if ($l1 > $l2) {
                $grm_hash_ordered{$l1}->{$l2} = $val;
            }
            else {
                $grm_hash_ordered{$l2}->{$l1} = $val;
            }
        }

        open(my $fh_grm_new, '>', $grm_rename_tempfile) or die "Could not open file '$grm_rename_tempfile' $!";
            print STDERR "Opened $grm_rename_tempfile\n";

            foreach my $i (sort {$a <=> $b} keys %grm_hash_ordered) {
                my $v = $grm_hash_ordered{$i};
                foreach my $j (sort {$a <=> $b} keys %$v) {
                    my $val = $v->{$j};
                    print $fh_grm_new "$i $j $val\n";
                }
            }
        close($fh_grm_new);

        my $tol_asr = 'c(-8,-10)';
        if ($tolparinv eq '0.000001') {
            $tol_asr = 'c(-6,-8)';
        }
        if ($tolparinv eq '0.00001') {
            $tol_asr = 'c(-5,-7)';
        }
        if ($tolparinv eq '0.0001') {
            $tol_asr = 'c(-4,-6)';
        }
        if ($tolparinv eq '0.001') {
            $tol_asr = 'c(-3,-5)';
        }
        if ($tolparinv eq '0.01') {
            $tol_asr = 'c(-2,-4)';
        }
        if ($tolparinv eq '0.05') {
            $tol_asr = 'c(-2,-3)';
        }
        if ($tolparinv eq '0.08') {
            $tol_asr = 'c(-1,-2)';
        }
        if ($tolparinv eq '0.1' || $tolparinv eq '0.2' || $tolparinv eq '0.5') {
            $tol_asr = 'c(-1,-2)';
        }

        $number_traits = scalar(@sorted_trait_names);
        $number_accessions = scalar(@unique_accession_names);
        my $encoded_trait_string = join ',t', @sorted_trait_names;
        my $cbind_string = $number_traits > 1 ? "cbind(t$encoded_trait_string)" : "t$encoded_trait_string";

        my $init_values_string = $number_traits > 1 ? "1,rep(0.1,$number_traits-1)" : "1";
        foreach (1..$number_traits-1) {
            my $s = $_ < $number_traits-1 ? ",1,rep(0.1,$number_traits-1-$_)" : ",1";
            $init_values_string .= $s;
        }

        my @encoded_traits_cv_check;
        my @encoded_traits_cv_1;
        my @encoded_traits_cv_1_2;
        my @encoded_traits_cv_save_1;
        my @encoded_traits_cv_save_1_2;
        my @encoded_traits_cv_2;
        my @encoded_traits_cv_2_2;
        my @encoded_traits_cv_save_2;
        my @encoded_traits_cv_save_2_2;
        my @encoded_traits_cv_3;
        my @encoded_traits_cv_3_2;
        my @encoded_traits_cv_save_3;
        my @encoded_traits_cv_save_3_2;
        my @encoded_traits_cv_4;
        my @encoded_traits_cv_4_2;
        my @encoded_traits_cv_save_4;
        my @encoded_traits_cv_save_4_2;
        my @encoded_traits_cv_5;
        my @encoded_traits_cv_5_2;
        my @encoded_traits_cv_save_5;
        my @encoded_traits_cv_save_5_2;

        $prepare_file_cv_cmd = 'R -e "library(data.table);
        mat <- data.frame(fread(\''.$stats_tempfile_2.'\', header=TRUE, sep=\',\'));
        cv_step_size <- length(mat\$plot_id) %/% 5;
        cv_step_size_modulo <- length(mat\$plot_id) %% 5;
        ';

        foreach my $t (@sorted_trait_names) {
            my $t_coded = "t$t";
            $prepare_file_cv_cmd .= 'randomized_positions <- sample(length(mat\$plot_id));';

            push @encoded_traits_cv_check, 'mat\$'.$t_coded;

            my $t_coded_cv1 = $t_coded.'_CV1';
            push @encoded_traits_cv_1, $t_coded_cv1;
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv1.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv1.'[randomized_positions[1:cv_step_size]] <- median(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_1, 'mat\$'.$t_coded_cv1;

            my $t_coded_cv2 = $t_coded.'_CV2';
            push @encoded_traits_cv_2, $t_coded_cv2;
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv2.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv2.'[randomized_positions[(cv_step_size+1):(2*cv_step_size)]] <- median(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_2, 'mat\$'.$t_coded_cv2;

            my $t_coded_cv3 = $t_coded.'_CV3';
            push @encoded_traits_cv_3, $t_coded_cv3;
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv3.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv3.'[randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]] <- median(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_3, 'mat\$'.$t_coded_cv3;

            my $t_coded_cv4 = $t_coded.'_CV4';
            push @encoded_traits_cv_4, $t_coded_cv4;
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv4.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv4.'[randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]] <- median(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_4, 'mat\$'.$t_coded_cv4;

            my $t_coded_cv5 = $t_coded.'_CV5';
            push @encoded_traits_cv_5, $t_coded_cv5;
            $prepare_file_cv_cmd .= 'mat\$'.$t_coded_cv5.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv5.'[randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]] <- median(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_5, 'mat\$'.$t_coded_cv5;
        }
        $prepare_file_cv_cmd .= '
        write.table(mat, file=\''.$stats_tempfile_2.'\', row.names=FALSE, col.names=TRUE, sep=\',\');
        "';

        $prepare_file_cv2_cmd = 'R -e "library(data.table);
        mat <- data.frame(fread(\''.$stats_tempfile_2.'\', header=TRUE, sep=\',\'));
        cv_step_size <- length(mat\$plot_id) %/% 5;
        cv_step_size_modulo <- length(mat\$plot_id) %% 5;
        ';

        foreach my $t (@sorted_trait_names) {
            my $t_coded = "t$t";
            $prepare_file_cv2_cmd .= 'randomized_positions <- sample(length(mat\$plot_id));';

            my $t_coded_cv1_2 = $t_coded.'_CV1_2';
            push @encoded_traits_cv_1_2, $t_coded_cv1_2;
            $prepare_file_cv2_cmd .= 'mat\$'.$t_coded_cv1_2.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv1_2.'[randomized_positions[1:cv_step_size]] <- mean(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_1_2, 'mat\$'.$t_coded_cv1_2;

            my $t_coded_cv2_2 = $t_coded.'_CV2_2';
            push @encoded_traits_cv_2_2, $t_coded_cv2_2;
            $prepare_file_cv2_cmd .= 'mat\$'.$t_coded_cv2_2.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv2_2.'[randomized_positions[(cv_step_size+1):(2*cv_step_size)]] <- mean(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_2_2, 'mat\$'.$t_coded_cv2_2;

            my $t_coded_cv3_2 = $t_coded.'_CV3_2';
            push @encoded_traits_cv_3_2, $t_coded_cv3_2;
            $prepare_file_cv2_cmd .= 'mat\$'.$t_coded_cv3_2.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv3_2.'[randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]] <- mean(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_3_2, 'mat\$'.$t_coded_cv3_2;

            my $t_coded_cv4_2 = $t_coded.'_CV4_2';
            push @encoded_traits_cv_4_2, $t_coded_cv4_2;
            $prepare_file_cv2_cmd .= 'mat\$'.$t_coded_cv4_2.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv4_2.'[randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]] <- mean(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_4_2, 'mat\$'.$t_coded_cv4_2;

            my $t_coded_cv5_2 = $t_coded.'_CV5_2';
            push @encoded_traits_cv_5_2, $t_coded_cv5_2;
            $prepare_file_cv2_cmd .= 'mat\$'.$t_coded_cv5_2.' <- mat\$'.$t_coded.';
            mat\$'.$t_coded_cv5_2.'[randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]] <- mean(mat\$'.$t_coded.');
            ';
            push @encoded_traits_cv_save_5_2, 'mat\$'.$t_coded_cv5_2;
        }
        $prepare_file_cv2_cmd .= '
        write.table(mat, file=\''.$stats_tempfile_2.'\', row.names=FALSE, col.names=TRUE, sep=\',\');
        "';

        $statistics_cmd_reading = 'R -e "library(asreml); library(data.table); library(reshape2);
        mat <- data.frame(fread(\''.$stats_tempfile_2.'\', header=TRUE, sep=\',\'));
        geno_mat_3col <- data.frame(fread(\''.$grm_rename_tempfile.'\', header=FALSE, sep=\' \'));
        mat\$rowNumber <- as.numeric(mat\$rowNumber);
        mat\$colNumber <- as.numeric(mat\$colNumber);
        mat\$rowNumberFactor <- as.factor(mat\$rowNumber);
        mat\$colNumberFactor <- as.factor(mat\$colNumber);
        mat\$id_factor <- as.factor(mat\$id_factor);
        mat <- mat[order(mat\$rowNumber, mat\$colNumber),];
        attr(geno_mat_3col,\'rowNames\') <- as.character(seq(1,'.$number_accessions.'));
        attr(geno_mat_3col,\'colNames\') <- as.character(seq(1,'.$number_accessions.'));
        attr(geno_mat_3col,\'INVERSE\') <- TRUE;
        ';
        my $statistics_cmd_model = '
        mix <- asreml('.$cbind_string.'~trait + replicate, random=~us(trait,init=c('.$init_values_string.')):vm(id_factor, geno_mat_3col) + id(trait):ar1(rowNumberFactor):ar1v(colNumberFactor), residual=~units:us(trait,init=c('.$init_values_string.')), data=mat, tol='.$tol_asr.');
        if (!is.null(summary(mix,coef=TRUE)\$coef.random)) {
        write.table(summary(mix,coef=TRUE)\$coef.random, file=\''.$stats_out_tempfile.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');
        write.table(summary(mix)\$varcomp, file=\''.$stats_out_tempfile_varcomp.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = mat\$plot_id, residuals = mix\$residuals, fitted = mix\$linear.predictors), file=\''.$stats_out_tempfile_residual.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        }
        "';

        my $encoded_trait_cv_string_1 = join ',', @encoded_traits_cv_1;
        my $cbind_string_cv_1 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_1)" : $encoded_trait_cv_string_1;
        my $encoded_trait_cv_string_2 = join ',', @encoded_traits_cv_2;
        my $cbind_string_cv_2 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_2)" : $encoded_trait_cv_string_2;
        my $encoded_trait_cv_string_3 = join ',', @encoded_traits_cv_3;
        my $cbind_string_cv_3 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_3)" : $encoded_trait_cv_string_3;
        my $encoded_trait_cv_string_4 = join ',', @encoded_traits_cv_4;
        my $cbind_string_cv_4 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_4)" : $encoded_trait_cv_string_4;
        my $encoded_trait_cv_string_5 = join ',', @encoded_traits_cv_5;
        my $cbind_string_cv_5 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_5)" : $encoded_trait_cv_string_5;
        $statistics_cmd_cv_1 = '
        mix_cv_1 <- asreml('.$cbind_string_cv_1.'~trait + replicate, random=~us(trait,init=c('.$init_values_string.')):vm(id_factor, geno_mat_3col) + id(trait):ar1(rowNumberFactor):ar1v(colNumberFactor), residual=~units:us(trait,init=c('.$init_values_string.')), data=mat, tol='.$tol_asr.');
        mix_cv_2 <- asreml('.$cbind_string_cv_2.'~trait + replicate, random=~us(trait,init=c('.$init_values_string.')):vm(id_factor, geno_mat_3col) + id(trait):ar1(rowNumberFactor):ar1v(colNumberFactor), residual=~units:us(trait,init=c('.$init_values_string.')), data=mat, tol='.$tol_asr.');
        mix_cv_3 <- asreml('.$cbind_string_cv_3.'~trait + replicate, random=~us(trait,init=c('.$init_values_string.')):vm(id_factor, geno_mat_3col) + id(trait):ar1(rowNumberFactor):ar1v(colNumberFactor), residual=~units:us(trait,init=c('.$init_values_string.')), data=mat, tol='.$tol_asr.');
        mix_cv_4 <- asreml('.$cbind_string_cv_4.'~trait + replicate, random=~us(trait,init=c('.$init_values_string.')):vm(id_factor, geno_mat_3col) + id(trait):ar1(rowNumberFactor):ar1v(colNumberFactor), residual=~units:us(trait,init=c('.$init_values_string.')), data=mat, tol='.$tol_asr.');
        mix_cv_5 <- asreml('.$cbind_string_cv_5.'~trait + replicate, random=~us(trait,init=c('.$init_values_string.')):vm(id_factor, geno_mat_3col) + id(trait):ar1(rowNumberFactor):ar1v(colNumberFactor), residual=~units:us(trait,init=c('.$init_values_string.')), data=mat, tol='.$tol_asr.');
        ';
        my $encoded_traits_cv_save_1 = join ',', @encoded_traits_cv_save_1;
        my $encoded_traits_cv_save_2 = join ',', @encoded_traits_cv_save_2;
        my $encoded_traits_cv_save_3 = join ',', @encoded_traits_cv_save_3;
        my $encoded_traits_cv_save_4 = join ',', @encoded_traits_cv_save_4;
        my $encoded_traits_cv_save_5 = join ',', @encoded_traits_cv_save_5;
        my $encoded_traits_cv_save_1_2 = join ',', @encoded_traits_cv_save_1_2;
        my $encoded_traits_cv_save_2_2 = join ',', @encoded_traits_cv_save_2_2;
        my $encoded_traits_cv_save_3_2 = join ',', @encoded_traits_cv_save_3_2;
        my $encoded_traits_cv_save_4_2 = join ',', @encoded_traits_cv_save_4_2;
        my $encoded_traits_cv_save_5_2 = join ',', @encoded_traits_cv_save_5_2;
        my $encoded_traits_cv_check = join ',', @encoded_traits_cv_check;

        my @plot_id_cbind_array;
        foreach (1..$number_traits) {
            push @plot_id_cbind_array, 'mat\$plot_id';
        }
        my $plot_id_cbind_string = join ',', @plot_id_cbind_array;
        $statistics_cmd_cv_1 .= '
        write.table(data.frame(plot_id = c('.$plot_id_cbind_string.'), true_values = c('.$encoded_traits_cv_check.'), cv_values = c('.$encoded_traits_cv_save_1.'), residuals = mix_cv_1\$residuals, fitted = mix_cv_1\$linear.predictors), file=\''.$stats_out_cv1_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = c('.$plot_id_cbind_string.'), true_values = c('.$encoded_traits_cv_check.'), cv_values = c('.$encoded_traits_cv_save_2.'), residuals = mix_cv_2\$residuals, fitted = mix_cv_2\$linear.predictors), file=\''.$stats_out_cv2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = c('.$plot_id_cbind_string.'), true_values = c('.$encoded_traits_cv_check.'), cv_values = c('.$encoded_traits_cv_save_3.'), residuals = mix_cv_3\$residuals, fitted = mix_cv_3\$linear.predictors), file=\''.$stats_out_cv3_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = c('.$plot_id_cbind_string.'), true_values = c('.$encoded_traits_cv_check.'), cv_values = c('.$encoded_traits_cv_save_4.'), residuals = mix_cv_4\$residuals, fitted = mix_cv_4\$linear.predictors), file=\''.$stats_out_cv4_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = c('.$plot_id_cbind_string.'), true_values = c('.$encoded_traits_cv_check.'), cv_values = c('.$encoded_traits_cv_save_5.'), residuals = mix_cv_5\$residuals, fitted = mix_cv_5\$linear.predictors), file=\''.$stats_out_cv5_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        "';
        my $cv_classify_string = 'id_factor';

        my $encoded_trait_cv_string_1_2 = join ',', @encoded_traits_cv_1_2;
        my $cbind_string_cv_1_2 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_1_2)" : $encoded_trait_cv_string_1_2;
        my $encoded_trait_cv_string_2_2 = join ',', @encoded_traits_cv_2_2;
        my $cbind_string_cv_2_2 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_2_2)" : $encoded_trait_cv_string_2_2;
        my $encoded_trait_cv_string_3_2 = join ',', @encoded_traits_cv_3_2;
        my $cbind_string_cv_3_2 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_3_2)" : $encoded_trait_cv_string_3_2;
        my $encoded_trait_cv_string_4_2 = join ',', @encoded_traits_cv_4_2;
        my $cbind_string_cv_4_2 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_4_2)" : $encoded_trait_cv_string_4_2;
        my $encoded_trait_cv_string_5_2 = join ',', @encoded_traits_cv_5_2;
        my $cbind_string_cv_5_2 = $number_traits > 1 ? "cbind($encoded_trait_cv_string_5_2)" : $encoded_trait_cv_string_5_2;
        $statistics_cmd_cv_2 = '
        mix_cv_1_2 <- asreml('.$cbind_string_cv_1_2.'~trait + replicate, random=~us(trait,init=c('.$init_values_string.')):vm(id_factor, geno_mat_3col) + id(trait):ar1(rowNumberFactor):ar1v(colNumberFactor), residual=~units:us(trait,init=c('.$init_values_string.')), data=mat, tol='.$tol_asr.' );
        mix_cv_2_2 <- asreml('.$cbind_string_cv_2_2.'~trait + replicate, random=~us(trait,init=c('.$init_values_string.')):vm(id_factor, geno_mat_3col) + id(trait):ar1(rowNumberFactor):ar1v(colNumberFactor), residual=~units:us(trait,init=c('.$init_values_string.')), data=mat, tol='.$tol_asr.' );
        mix_cv_3_2 <- asreml('.$cbind_string_cv_3_2.'~trait + replicate, random=~us(trait,init=c('.$init_values_string.')):vm(id_factor, geno_mat_3col) + id(trait):ar1(rowNumberFactor):ar1v(colNumberFactor), residual=~units:us(trait,init=c('.$init_values_string.')), data=mat, tol='.$tol_asr.' );
        mix_cv_4_2 <- asreml('.$cbind_string_cv_4_2.'~trait + replicate, random=~us(trait,init=c('.$init_values_string.')):vm(id_factor, geno_mat_3col) + id(trait):ar1(rowNumberFactor):ar1v(colNumberFactor), residual=~units:us(trait,init=c('.$init_values_string.')), data=mat, tol='.$tol_asr.' );
        mix_cv_5_2 <- asreml('.$cbind_string_cv_5_2.'~trait + replicate, random=~us(trait,init=c('.$init_values_string.')):vm(id_factor, geno_mat_3col) + id(trait):ar1(rowNumberFactor):ar1v(colNumberFactor), residual=~units:us(trait,init=c('.$init_values_string.')), data=mat, tol='.$tol_asr.' );

        write.table(data.frame(plot_id = c('.$plot_id_cbind_string.'), true_values = c('.$encoded_traits_cv_check.'), cv_values = c('.$encoded_traits_cv_save_1_2.'), residuals = mix_cv_1_2\$residuals, fitted = mix_cv_1_2\$linear.predictors), file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = c('.$plot_id_cbind_string.'), true_values = c('.$encoded_traits_cv_check.'), cv_values = c('.$encoded_traits_cv_save_2_2.'), residuals = mix_cv_2_2\$residuals, fitted = mix_cv_2_2\$linear.predictors), file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = c('.$plot_id_cbind_string.'), true_values = c('.$encoded_traits_cv_check.'), cv_values = c('.$encoded_traits_cv_save_3_2.'), residuals = mix_cv_3_2\$residuals, fitted = mix_cv_3_2\$linear.predictors), file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = c('.$plot_id_cbind_string.'), true_values = c('.$encoded_traits_cv_check.'), cv_values = c('.$encoded_traits_cv_save_4_2.'), residuals = mix_cv_4_2\$residuals, fitted = mix_cv_4_2\$linear.predictors), file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        write.table(data.frame(plot_id = c('.$plot_id_cbind_string.'), true_values = c('.$encoded_traits_cv_check.'), cv_values = c('.$encoded_traits_cv_save_5_2.'), residuals = mix_cv_5_2\$residuals, fitted = mix_cv_5_2\$linear.predictors), file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        "';

        # p_cv1 <- predict.asreml(mix_cv_1_2, classify = \''.$cv_classify_string.'\', tol='.$tol_asr.', pworkspace=\'48gb\' );
        # p_cv2 <- predict.asreml(mix_cv_2_2, classify = \''.$cv_classify_string.'\', tol='.$tol_asr.', pworkspace=\'48gb\' );
        # p_cv3 <- predict.asreml(mix_cv_3_2, classify = \''.$cv_classify_string.'\', tol='.$tol_asr.', pworkspace=\'48gb\' );
        # p_cv4 <- predict.asreml(mix_cv_4_2, classify = \''.$cv_classify_string.'\', tol='.$tol_asr.', pworkspace=\'48gb\' );
        # p_cv5 <- predict.asreml(mix_cv_5_2, classify = \''.$cv_classify_string.'\', tol='.$tol_asr.', pworkspace=\'48gb\' );
        # p_cv1;
        # write.table(p_cv1\$pvals, file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        # write.table(p_cv2\$pvals, file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        # write.table(p_cv3\$pvals, file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        # write.table(p_cv4\$pvals, file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');
        # write.table(p_cv5\$pvals, file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=TRUE, sep=\'\t\');

        $statistics_cmd = $statistics_cmd_reading.$statistics_cmd_model;

        # print STDERR Dumper $prepare_file_cv_cmd;
        # print STDERR Dumper $statistics_cmd;
        eval {
            my $status_prepare_file_cv = system($prepare_file_cv_cmd);
            my $status_prepare_file_cv2 = system($prepare_file_cv2_cmd);
            my $status = system($statistics_cmd);
            if ($perform_cv) {
                my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
            }
        };

        my $run_stats_fault = 0;
        if ($@) {
            print STDERR "R ERROR\n";
            print STDERR Dumper $@;
            $run_stats_fault = 1;
        }
        else {
            my $current_gen_row_count = 0;
            my $current_env_row_count = 0;
            my @row_col_ordered_plots_names;

            open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                print STDERR "Opened $stats_out_tempfile_residual\n";
                my $header_residual = <$fh_residual>;
                my @header_cols_residual;
                if ($csv->parse($header_residual)) {
                    @header_cols_residual = $csv->fields();
                }
                my $residual_file_counter_index = 0;
                my $residual_file_counter = 1;
                while (my $row = <$fh_residual>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    my $residual = $columns[1];
                    my $fitted = $columns[2];
                    my $stock_name = $plot_id_map{$stock_id};
                    push @row_col_ordered_plots_names, $stock_name;
                    my $t = $sorted_trait_names[$residual_file_counter_index];
                    if ($residual_file_counter == scalar(@unique_plot_names)) {
                        $residual_file_counter = 0;
                        $residual_file_counter_index++;
                    }
                    if (defined $residual && $residual ne '') {
                        $result_residual_data_original->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                        $residual_sum_original += abs($residual);
                        $residual_sum_square_original = $residual_sum_square_original + $residual*$residual;
                    }
                    if (defined $fitted && $fitted ne '') {
                        $result_fitted_data_original->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                    }
                    $model_sum_square_residual_original = $model_sum_square_residual_original + $residual*$residual;

                    $residual_file_counter++;
                }
            close($fh_residual);

            open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                my $header = <$fh>;
                my @header_cols;
                if ($csv->parse($header)) {
                    @header_cols = $csv->fields();
                }

                my $solution_file_counter = 0;
                my $solution_file_g_counter = 1;
                my $solution_file_p_counter = 1;
                my $solution_file_counter_g_index = 0;
                my $solution_file_counter_p_index = 0;
                while (defined(my $row = <$fh>)) {
                    # print STDERR $row;
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $level = $columns[0];
                    my $value = $columns[1];
                    my $std = $columns[2];
                    my $z_ratio = $columns[3];
                    if (defined $value && $value ne '') {
                        if ($solution_file_counter < $number_accessions*$number_traits) {
                            my $t = $sorted_trait_names[$solution_file_counter_g_index];
                            if ($solution_file_g_counter == $number_accessions) {
                                $solution_file_g_counter = 0;
                                $solution_file_counter_g_index++;
                            }

                            my $stock_name = $accession_id_factor_map_reverse{$solution_file_g_counter+1};
                            $result_blup_data_original->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $genetic_effect_min_original) {
                                $genetic_effect_min_original = $value;
                            }
                            elsif ($value >= $genetic_effect_max_original) {
                                $genetic_effect_max_original = $value;
                            }

                            $genetic_effect_sum_original += abs($value);
                            $genetic_effect_sum_square_original = $genetic_effect_sum_square_original + $value*$value;

                            $solution_file_g_counter++;
                            $current_gen_row_count++;
                        }
                        else {
                            my $t = $sorted_trait_names[$solution_file_counter_p_index];
                            if ($solution_file_p_counter == scalar(@unique_plot_names)) {
                                $solution_file_p_counter = 0;
                                $solution_file_counter_p_index++;
                            }

                            my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                            $result_blup_spatial_data_original->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $env_effect_min_original) {
                                $env_effect_min_original = $value;
                            }
                            elsif ($value >= $env_effect_max_original) {
                                $env_effect_max_original = $value;
                            }

                            $env_effect_sum_original += abs($value);
                            $env_effect_sum_square_original = $env_effect_sum_square_original + $value*$value;

                            $solution_file_p_counter++;
                            $current_env_row_count++;
                        }
                    }
                    $solution_file_counter++;
                }
            close($fh);

            open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                my $header_cv1 = <$fh_cv1>;
                my @header_cols_cv1;
                if ($csv->parse($header_cv1)) {
                    @header_cols_cv1 = $csv->fields();
                }
                while (my $row = <$fh_cv1>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv1_original = $model_sum_square_cv1_original + ($true_value-$fitted)**2;
                }
            close($fh_cv1);

            open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                my $header_cv2 = <$fh_cv2>;
                my @header_cols_cv2;
                if ($csv->parse($header_cv2)) {
                    @header_cols_cv2 = $csv->fields();
                }
                while (my $row = <$fh_cv2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv2_original = $model_sum_square_cv2_original + ($true_value-$fitted)**2;
                }
            close($fh_cv2);

            open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                my $header_cv3 = <$fh_cv3>;
                my @header_cols_cv3;
                if ($csv->parse($header_cv3)) {
                    @header_cols_cv3 = $csv->fields();
                }
                while (my $row = <$fh_cv3>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv3_original = $model_sum_square_cv3_original + ($true_value-$fitted)**2;
                }
            close($fh_cv3);

            open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                my $header_cv4 = <$fh_cv4>;
                my @header_cols_cv4;
                if ($csv->parse($header_cv4)) {
                    @header_cols_cv4 = $csv->fields();
                }
                while (my $row = <$fh_cv4>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv4_original = $model_sum_square_cv4_original + ($true_value-$fitted)**2;
                }
            close($fh_cv4);

            open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                my $header_cv5 = <$fh_cv5>;
                my @header_cols_cv5;
                if ($csv->parse($header_cv5)) {
                    @header_cols_cv5 = $csv->fields();
                }
                while (my $row = <$fh_cv5>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv5_original = $model_sum_square_cv5_original + ($true_value-$fitted)**2;
                }
            close($fh_cv5);

            open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                my $header_cv1_2 = <$fh_cv1_2>;
                my @header_cols_cv1_2;
                if ($csv->parse($header_cv1_2)) {
                    @header_cols_cv1_2 = $csv->fields();
                }
                while (my $row = <$fh_cv1_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv1_2_original = $model_sum_square_cv1_2_original + ($true_value-$fitted)**2;
                }
            close($fh_cv1_2);

            open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                my $header_cv2_2 = <$fh_cv2_2>;
                my @header_cols_cv2_2;
                if ($csv->parse($header_cv2_2)) {
                    @header_cols_cv2_2 = $csv->fields();
                }
                while (my $row = <$fh_cv2_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv2_2_original = $model_sum_square_cv2_2_original + ($true_value-$fitted)**2;
                }
            close($fh_cv2_2);

            open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                my $header_cv3_2 = <$fh_cv3_2>;
                my @header_cols_cv3_2;
                if ($csv->parse($header_cv3_2)) {
                    @header_cols_cv3_2 = $csv->fields();
                }
                while (my $row = <$fh_cv3_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv3_2_original = $model_sum_square_cv3_2_original + ($true_value-$fitted)**2;
                }
            close($fh_cv3_2);

            open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                my $header_cv4_2 = <$fh_cv4_2>;
                my @header_cols_cv4_2;
                if ($csv->parse($header_cv4_2)) {
                    @header_cols_cv4_2 = $csv->fields();
                }
                while (my $row = <$fh_cv4_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv4_2_original = $model_sum_square_cv4_2_original + ($true_value-$fitted)**2;
                }
            close($fh_cv4_2);

            open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                my $header_cv5_2 = <$fh_cv5_2>;
                my @header_cols_cv5_2;
                if ($csv->parse($header_cv5_2)) {
                    @header_cols_cv5_2 = $csv->fields();
                }
                while (my $row = <$fh_cv5_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv5_2_original = $model_sum_square_cv5_2_original + ($true_value-$fitted)**2;
                }
            close($fh_cv5_2);

            open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                print STDERR "Opened $stats_out_tempfile_varcomp\n";
                my $header_varcomp = <$fh_varcomp>;
                my @header_cols_varcomp;
                if ($csv->parse($header_varcomp)) {
                    @header_cols_varcomp = $csv->fields();
                }
                while (my $row = <$fh_varcomp>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    push @varcomp_original, \@columns;
                }
            close($fh_varcomp);

            if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                $run_stats_fault = 1;
            }

            if ($run_stats_fault == 1) {
                print STDERR "ERROR IN R CMD\n";
                return {error=>'Error in R! Try a larger tolerance'};
            }
        }
    }
    print STDERR "ORIGINAL $statistics_select GENETIC EFFECT SUM $genetic_effect_sum_original\n";
    print STDERR "ORIGINAL $statistics_select ENV EFFECT SUM $env_effect_sum_original\n";
    print STDERR Dumper [$genetic_effect_min_original, $genetic_effect_max_original, $env_effect_min_original, $env_effect_max_original];

    my @model_sum_square_original_cv_values = ($model_sum_square_cv1_original, $model_sum_square_cv2_original, $model_sum_square_cv3_original, $model_sum_square_cv4_original, $model_sum_square_cv5_original);
    my @model_sum_square_original_cv_2_values = ($model_sum_square_cv1_2_original, $model_sum_square_cv2_2_original, $model_sum_square_cv3_2_original, $model_sum_square_cv4_2_original, $model_sum_square_cv5_2_original);
    print STDERR Dumper \@model_sum_square_original_cv_values;
    print STDERR Dumper \@model_sum_square_original_cv_2_values;
    my $model_sum_square_original_cv_stat = Statistics::Descriptive::Full->new();
    $model_sum_square_original_cv_stat->add_data(@model_sum_square_original_cv_values);
    my $model_sum_square_original_cv_result = {
        values => \@model_sum_square_original_cv_values,
        variance => $model_sum_square_original_cv_stat->variance(),
        mean => $model_sum_square_original_cv_stat->mean()
    };
    my $model_sum_square_original_cv_2_stat = Statistics::Descriptive::Full->new();
    $model_sum_square_original_cv_2_stat->add_data(@model_sum_square_original_cv_2_values);
    my $model_sum_square_original_cv_2_result = {
        values => \@model_sum_square_original_cv_2_values,
        variance => $model_sum_square_original_cv_2_stat->variance(),
        mean => $model_sum_square_original_cv_2_stat->mean()
    };

    my (%phenotype_data_altered, @data_matrix_altered, @data_matrix_phenotypes_altered, @phenotype_data_altered_values);
    my $phenotype_min_altered = 1000000000;
    my $phenotype_max_altered = -1000000000;
    my $phenotype_variance_altered;

    print STDERR "SUBTRACT ENV ESTIMATE\n";
    if ($statistics_select eq 'sommer_grm_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_spatial_pure_2dspl_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_pure_2dspl_genetic_blups') {

        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};
            my @row = ($replicate, $block, "S".$germplasm_stock_id, $obsunit_stock_id, $row_number, $col_number, $row_number, $col_number);

            foreach my $t (@sorted_trait_names) {
                if (defined($phenotype_data_original{$p}->{$t})) {
                    my $minimizer = 0;
                    if ($analytics_select eq 'minimize_local_env_effect') {
                        $minimizer = $result_blup_spatial_data_original->{$p}->{$t}->[0];
                    }
                    elsif ($analytics_select eq 'minimize_genetic_effect') {
                        $minimizer = $result_blup_data_original->{$p}->{$t}->[0];
                    }
                    my $new_val = $phenotype_data_original{$p}->{$t} + 0 - $minimizer;

                    if ($new_val < $phenotype_min_altered) {
                        $phenotype_min_altered = $new_val;
                    }
                    elsif ($new_val >= $phenotype_max_altered) {
                        $phenotype_max_altered = $new_val;
                    }

                    push @phenotype_data_altered_values, $new_val;
                    $phenotype_data_altered{$p}->{$t} = $new_val;
                    push @row, $new_val;
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, 'NA';
                }
            }
            push @data_matrix_altered, \@row;
        }

        open(my $F, ">", $stats_tempfile) || die "Can't open file ".$stats_tempfile;
            print $F $header_string."\n";
            foreach (@data_matrix_altered) {
                my $line = join ',', @$_;
                print $F "$line\n";
            }
        close($F);
    }
    elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {

        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};

            my @data_matrix_phenotypes_row;
            my $current_trait_index = 0;
            foreach my $t (@sorted_trait_names) {
                my @row = (
                    $accession_id_factor_map{$germplasm_stock_id},
                    $obsunit_stock_id,
                    $replicate,
                    $t,
                    $plot_rep_time_factor_map{$obsunit_stock_id}->{$replicate}->{$t},
                    $stock_row_col{$obsunit_stock_id}->{plot_id_factor}
                );

                my $polys = $polynomial_map{$t};
                push @row, @$polys;

                if (defined($phenotype_data_original{$p}->{$t})) {
                    if ($use_area_under_curve) {
                        my $val = 0;
                        foreach my $counter (0..$current_trait_index) {
                            if ($counter == 0) {
                                $val = $val + $phenotype_data_original{$p}->{$sorted_trait_names[$counter]} + 0;
                            }
                            else {
                                my $t1 = $sorted_trait_names[$counter-1];
                                my $t2 = $sorted_trait_names[$counter];
                                my $p1 = $phenotype_data_original{$p}->{$t1} + 0;
                                my $p2 = $phenotype_data_original{$p}->{$t2} + 0;
                                my $neg = 1;
                                my $min_val = $p1;
                                if ($p2 < $p1) {
                                    $neg = -1;
                                    $min_val = $p2;
                                }
                                $val = $val + (($neg*($p2-$p1)*($t2-$t1))/2)+($t2-$t1)*$min_val;
                            }
                        }

                        my $minimizer = 0;
                        if ($analytics_select eq 'minimize_local_env_effect') {
                            $minimizer = $result_blup_pe_data_delta_original->{$p}->{$t}->[0];
                            # $minimizer = $minimizer * ($phenotype_max_original - $phenotype_min_original)/($env_effect_max_original - $env_effect_min_original);
                        }
                        elsif ($analytics_select eq 'minimize_genetic_effect') {
                            $minimizer = $result_blup_data_delta_original->{$p}->{$t}->[0];
                            # $minimizer = $minimizer * ($phenotype_max_original - $phenotype_min_original)/($genetic_effect_max_original - $genetic_effect_min_original);
                        }
                        my $new_val = $val - $minimizer;

                        if ($new_val < $phenotype_min_altered) {
                            $phenotype_min_altered = $new_val;
                        }
                        elsif ($new_val >= $phenotype_max_altered) {
                            $phenotype_max_altered = $new_val;
                        }

                        push @phenotype_data_altered_values, $new_val;
                        $phenotype_data_altered{$p}->{$t} = $new_val;
                        push @row, $new_val;
                        push @data_matrix_phenotypes_row, $new_val;
                    }
                    else {
                        my $val = $phenotype_data_original{$p}->{$t} + 0;

                        my $minimizer = 0;
                        if ($analytics_select eq 'minimize_local_env_effect') {
                            $minimizer = $result_blup_pe_data_delta_original->{$p}->{$t}->[0];
                        }
                        elsif ($analytics_select eq 'minimize_genetic_effect') {
                            $minimizer = $result_blup_data_delta_original->{$p}->{$t}->[0];
                        }
                        my $new_val = $val - $minimizer;

                        if ($new_val < $phenotype_min_altered) {
                            $phenotype_min_altered = $new_val;
                        }
                        elsif ($new_val >= $phenotype_max_altered) {
                            $phenotype_max_altered = $new_val;
                        }

                        push @phenotype_data_altered_values, $new_val;
                        $phenotype_data_altered{$p}->{$t} = $new_val;
                        push @row, $new_val;
                        push @data_matrix_phenotypes_row, $new_val;
                    }
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, '';
                    push @data_matrix_phenotypes_row, 'NA';
                }

                push @data_matrix_altered, \@row;
                push @data_matrix_phenotypes_altered, \@data_matrix_phenotypes_row;

                $current_trait_index++;
            }
        }

        open(my $F, ">", $stats_tempfile_2) || die "Can't open file ".$stats_tempfile_2;
            foreach (@data_matrix_altered) {
                my $line = join ' ', @$_;
                print $F "$line\n";
            }
        close($F);

        open(my $F2, ">", $stats_prep2_tempfile) || die "Can't open file ".$stats_prep2_tempfile;
            foreach (@data_matrix_phenotypes_altered) {
                my $line = join ',', @$_;
                print $F2 "$line\n";
            }
        close($F2);
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'asreml_grm_univariate_pure_spatial_genetic_blups' || $statistics_select eq 'asreml_grm_multivariate_spatial_genetic_blups') {
        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};

            my @row = (
                $germplasm_stock_id,
                $obsunit_stock_id,
                $replicate,
                $row_number,
                $col_number,
                $accession_id_factor_map{$germplasm_stock_id},
                $stock_row_col{$obsunit_stock_id}->{plot_id_factor}
            );

            foreach my $t (@sorted_trait_names) {
                if (defined($phenotype_data_original{$p}->{$t})) {
                    my $val = $phenotype_data_original{$p}->{$t} + 0;

                    my $minimizer = 0;
                    if ($analytics_select eq 'minimize_local_env_effect') {
                        $minimizer = $result_blup_spatial_data_original->{$p}->{$t}->[0];
                    }
                    elsif ($analytics_select eq 'minimize_genetic_effect') {
                        $minimizer = $result_blup_data_original->{$p}->{$t}->[0];
                    }
                    my $new_val = $val - $minimizer;

                    if ($new_val < $phenotype_min_altered) {
                        $phenotype_min_altered = $new_val;
                    }
                    elsif ($new_val >= $phenotype_max_altered) {
                        $phenotype_max_altered = $new_val;
                    }

                    push @phenotype_data_altered_values, $new_val;
                    $phenotype_data_altered{$p}->{$t} = $new_val;
                    push @row, $new_val;
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, '';
                }
            }
            push @data_matrix_altered, \@row;
        }

        open(my $F, ">", $stats_tempfile_2) || die "Can't open file ".$stats_tempfile_2;
            print $F $header_string."\n";
            foreach (@data_matrix_altered) {
                my $line = join ',', @$_;
                print $F "$line\n";
            }
        close($F);
    }

    my $phenotypes_altered_stat = Statistics::Descriptive::Full->new();
    $phenotypes_altered_stat->add_data(@phenotype_data_altered_values);
    $phenotype_variance_altered = $phenotypes_altered_stat->variance();

    print STDERR Dumper [$phenotype_min_altered, $phenotype_max_altered];

    my ($result_blup_data_altered, $result_blup_data_delta_altered, $result_blup_spatial_data_altered, $result_blup_pe_data_altered, $result_blup_pe_data_delta_altered, $result_residual_data_altered, $result_fitted_data_altered, %fixed_effects_altered, %rr_genetic_coefficients_altered, %rr_temporal_coefficients_altered);
    my (@rr_coeff_genetic_covariance_altered, @rr_coeff_env_covariance_altered, @rr_coeff_genetic_correlation_altered, @rr_coeff_env_correlation_altered, $rr_residual_variance_altered);
    my (@varcomp_altered);
    my $model_sum_square_residual_altered = 0;
    my $model_sum_square_cv1_altered = 0;
    my $model_sum_square_cv2_altered = 0;
    my $model_sum_square_cv3_altered = 0;
    my $model_sum_square_cv4_altered = 0;
    my $model_sum_square_cv5_altered = 0;
    my $model_sum_square_cv1_2_altered = 0;
    my $model_sum_square_cv2_2_altered = 0;
    my $model_sum_square_cv3_2_altered = 0;
    my $model_sum_square_cv4_2_altered = 0;
    my $model_sum_square_cv5_2_altered = 0;
    my $genetic_effect_min_altered = 1000000000;
    my $genetic_effect_max_altered = -1000000000;
    my $env_effect_min_altered = 1000000000;
    my $env_effect_max_altered = -1000000000;
    my $genetic_effect_sum_square_altered = 0;
    my $genetic_effect_sum_altered = 0;
    my $env_effect_sum_square_altered = 0;
    my $env_effect_sum_altered = 0;
    my $residual_sum_square_altered = 0;
    my $residual_sum_altered = 0;

    print STDERR "RUN ENV ESTIMATE ON ALTERED PHENO\n";
    if ($statistics_select eq 'sommer_grm_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_spatial_pure_2dspl_genetic_blups') {
        # print STDERR Dumper $prepare_file_cv_cmd;
        # print STDERR Dumper $statistics_cmd;
        eval {
            my $status_prepare_file_cv = system($prepare_file_cv_cmd);
            my $status_prepare_file_cv2 = system($prepare_file_cv2_cmd);
            my $status = system($statistics_cmd);
            if ($perform_cv) {
                my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
            }
        };
        my $run_stats_fault = 0;
        if ($@) {
            print STDERR "R ERROR\n";
            print STDERR Dumper $@;
            $run_stats_fault = 1;
        }
        else {
            my $current_gen_row_count = 0;
            my $current_env_row_count = 0;

            open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                my $header = <$fh>;
                my @header_cols;
                if ($csv->parse($header)) {
                    @header_cols = $csv->fields();
                }

                while (my $row = <$fh>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $col_counter = 0;
                    foreach my $encoded_trait (@header_cols) {
                        my $trait = $trait_name_encoder_rev{$encoded_trait};
                        my $stock_id = $columns[0];

                        my $stock_name = $stock_info{$stock_id}->{uniquename};
                        my $value = $columns[$col_counter+1];
                        if (defined $value && $value ne '') {
                            $result_blup_data_altered->{$stock_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $genetic_effect_min_altered) {
                                $genetic_effect_min_altered = $value;
                            }
                            elsif ($value >= $genetic_effect_max_altered) {
                                $genetic_effect_max_altered = $value;
                            }

                            $genetic_effect_sum_altered += abs($value);
                            $genetic_effect_sum_square_altered = $genetic_effect_sum_square_altered + $value*$value;
                        }
                        $col_counter++;
                    }
                    $current_gen_row_count++;
                }
            close($fh);

            open(my $fh_2dspl, '<', $stats_out_tempfile_2dspl) or die "Could not open file '$stats_out_tempfile_2dspl' $!";
                print STDERR "Opened $stats_out_tempfile_2dspl\n";
                my $header_2dspl = <$fh_2dspl>;
                my @header_cols_2dspl;
                if ($csv->parse($header_2dspl)) {
                    @header_cols_2dspl = $csv->fields();
                }
                shift @header_cols_2dspl;
                while (my $row_2dspl = <$fh_2dspl>) {
                    my @columns;
                    if ($csv->parse($row_2dspl)) {
                        @columns = $csv->fields();
                    }
                    my $col_counter = 0;
                    foreach my $encoded_trait (@header_cols_2dspl) {
                        my $trait = $trait_name_encoder_rev{$encoded_trait};
                        my $plot_id = $columns[0];

                        my $plot_name = $plot_id_map{$plot_id};
                        my $value = $columns[$col_counter+1];
                        if (defined $value && $value ne '') {
                            $result_blup_spatial_data_altered->{$plot_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $env_effect_min_altered) {
                                $env_effect_min_altered = $value;
                            }
                            elsif ($value >= $env_effect_max_altered) {
                                $env_effect_max_altered = $value;
                            }

                            $env_effect_sum_altered += abs($value);
                            $env_effect_sum_square_altered = $env_effect_sum_square_altered + $value*$value;
                        }
                        $col_counter++;
                    }
                    $current_env_row_count++;
                }
            close($fh_2dspl);

            open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                print STDERR "Opened $stats_out_tempfile_residual\n";
                my $header_residual = <$fh_residual>;
                my @header_cols_residual;
                if ($csv->parse($header_residual)) {
                    @header_cols_residual = $csv->fields();
                }
                while (my $row = <$fh_residual>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $residual = $columns[1 + $_];
                        my $fitted = $columns[1 + $number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered->{$stock_name}->{$trait_name} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered += abs($residual);
                            $residual_sum_square_altered = $residual_sum_square_altered + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered->{$stock_name}->{$trait_name} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered = $model_sum_square_residual_altered + $residual*$residual;
                    }
                }
            close($fh_residual);

            open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                my $header_cv1 = <$fh_cv1>;
                my @header_cols_cv1;
                if ($csv->parse($header_cv1)) {
                    @header_cols_cv1 = $csv->fields();
                }
                while (my $row = <$fh_cv1>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered = $model_sum_square_cv1_altered + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv1);

            open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                my $header_cv2 = <$fh_cv2>;
                my @header_cols_cv2;
                if ($csv->parse($header_cv2)) {
                    @header_cols_cv2 = $csv->fields();
                }
                while (my $row = <$fh_cv2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered = $model_sum_square_cv2_altered + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv2);

            open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                my $header_cv3 = <$fh_cv3>;
                my @header_cols_cv3;
                if ($csv->parse($header_cv3)) {
                    @header_cols_cv3 = $csv->fields();
                }
                while (my $row = <$fh_cv3>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered = $model_sum_square_cv3_altered + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv3);

            open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                my $header_cv4 = <$fh_cv4>;
                my @header_cols_cv4;
                if ($csv->parse($header_cv4)) {
                    @header_cols_cv4 = $csv->fields();
                }
                while (my $row = <$fh_cv4>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered = $model_sum_square_cv4_altered + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv4);

            open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                my $header_cv5 = <$fh_cv5>;
                my @header_cols_cv5;
                if ($csv->parse($header_cv5)) {
                    @header_cols_cv5 = $csv->fields();
                }
                while (my $row = <$fh_cv5>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered = $model_sum_square_cv5_altered + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv5);

            open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                my $header_cv1_2 = <$fh_cv1_2>;
                my @header_cols_cv1_2;
                if ($csv->parse($header_cv1_2)) {
                    @header_cols_cv1_2 = $csv->fields();
                }
                while (my $row = <$fh_cv1_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered = $model_sum_square_cv1_2_altered + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv1_2);

            open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                my $header_cv2_2 = <$fh_cv2_2>;
                my @header_cols_cv2_2;
                if ($csv->parse($header_cv2_2)) {
                    @header_cols_cv2_2 = $csv->fields();
                }
                while (my $row = <$fh_cv2_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered = $model_sum_square_cv2_2_altered + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv2_2);

            open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                my $header_cv3_2 = <$fh_cv3_2>;
                my @header_cols_cv3_2;
                if ($csv->parse($header_cv3_2)) {
                    @header_cols_cv3_2 = $csv->fields();
                }
                while (my $row = <$fh_cv3_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered = $model_sum_square_cv3_2_altered + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv3_2);

            open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                my $header_cv4_2 = <$fh_cv4_2>;
                my @header_cols_cv4_2;
                if ($csv->parse($header_cv4_2)) {
                    @header_cols_cv4_2 = $csv->fields();
                }
                while (my $row = <$fh_cv4_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered = $model_sum_square_cv4_2_altered + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv4_2);

            open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                my $header_cv5_2 = <$fh_cv5_2>;
                my @header_cols_cv5_2;
                if ($csv->parse($header_cv5_2)) {
                    @header_cols_cv5_2 = $csv->fields();
                }
                while (my $row = <$fh_cv5_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered = $model_sum_square_cv5_2_altered + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv5_2);

            open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                print STDERR "Opened $stats_out_tempfile_varcomp\n";
                my $header_varcomp = <$fh_varcomp>;
                my @header_cols_varcomp;
                if ($csv->parse($header_varcomp)) {
                    @header_cols_varcomp = $csv->fields();
                }
                while (my $row = <$fh_varcomp>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    push @varcomp_altered, \@columns;
                }
            close($fh_varcomp);

            if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                $run_stats_fault = 1;
            }
        }

        if ($run_stats_fault == 1) {
            print STDERR "ERROR IN R CMD\n";
            return {error=>'Error in R! Try a larger tolerance'};
        }
    }
    elsif ($statistics_select eq 'sommer_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_pure_2dspl_genetic_blups') {
        my @encoded_traits = values %trait_name_encoder;
        foreach my $t (@encoded_traits) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;
                    my @header_cols;
                    if ($csv->parse($header)) {
                        @header_cols = $csv->fields();
                    }

                    while (my $row = <$fh>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $col_counter = 0;
                        foreach my $encoded_trait (@header_cols) {
                            if ($encoded_trait eq $t) {
                                my $trait = $trait_name_encoder_rev{$encoded_trait};
                                my $stock_id = $columns[0];

                                my $stock_name = $stock_info{$stock_id}->{uniquename};
                                my $value = $columns[$col_counter+1];
                                if (defined $value && $value ne '') {
                                    $result_blup_data_altered->{$stock_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                                    if ($value < $genetic_effect_min_altered) {
                                        $genetic_effect_min_altered = $value;
                                    }
                                    elsif ($value >= $genetic_effect_max_altered) {
                                        $genetic_effect_max_altered = $value;
                                    }

                                    $genetic_effect_sum_altered += abs($value);
                                    $genetic_effect_sum_square_altered = $genetic_effect_sum_square_altered + $value*$value;
                                }
                            }
                            $col_counter++;
                        }
                        $current_gen_row_count++;
                    }
                close($fh);

                open(my $fh_2dspl, '<', $stats_out_tempfile_2dspl) or die "Could not open file '$stats_out_tempfile_2dspl' $!";
                    print STDERR "Opened $stats_out_tempfile_2dspl\n";
                    my $header_2dspl = <$fh_2dspl>;
                    my @header_cols_2dspl;
                    if ($csv->parse($header_2dspl)) {
                        @header_cols_2dspl = $csv->fields();
                    }
                    shift @header_cols_2dspl;
                    while (my $row_2dspl = <$fh_2dspl>) {
                        my @columns;
                        if ($csv->parse($row_2dspl)) {
                            @columns = $csv->fields();
                        }
                        my $col_counter = 0;
                        foreach my $encoded_trait (@header_cols_2dspl) {
                            if ($encoded_trait eq $t) {
                                my $trait = $trait_name_encoder_rev{$encoded_trait};
                                my $plot_id = $columns[0];

                                my $plot_name = $plot_id_map{$plot_id};
                                my $value = $columns[$col_counter+1];
                                if (defined $value && $value ne '') {
                                    $result_blup_spatial_data_altered->{$plot_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                                    if ($value < $env_effect_min_altered) {
                                        $env_effect_min_altered = $value;
                                    }
                                    elsif ($value >= $env_effect_max_altered) {
                                        $env_effect_max_altered = $value;
                                    }

                                    $env_effect_sum_altered += abs($value);
                                    $env_effect_sum_square_altered = $env_effect_sum_square_altered + $value*$value;
                                }
                            }
                            $col_counter++;
                        }
                        $current_env_row_count++;
                    }
                close($fh_2dspl);

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered->{$stock_name}->{$trait_name} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered += abs($residual);
                            $residual_sum_square_altered = $residual_sum_square_altered + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered->{$stock_name}->{$trait_name} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered = $model_sum_square_residual_altered + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered = $model_sum_square_cv1_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered = $model_sum_square_cv2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered = $model_sum_square_cv3_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered = $model_sum_square_cv4_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered = $model_sum_square_cv5_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered = $model_sum_square_cv1_2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered = $model_sum_square_cv2_2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered = $model_sum_square_cv3_2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered = $model_sum_square_cv4_2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered = $model_sum_square_cv5_2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        push @varcomp_altered, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {

        print STDERR Dumper $statistics_cmd;
        my $status_r = system($statistics_cmd);

        my @pheno_var;
        open(my $fh_r, '<', $stats_out_param_tempfile) or die "Could not open file '$stats_out_param_tempfile' $!";
            print STDERR "Opened $stats_out_param_tempfile\n";

            while (my $row = <$fh_r>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @pheno_var, \@columns;
            }
        close($fh_r);
        # print STDERR Dumper \@pheno_var;

        my $stats_tempfile_2_basename = basename($stats_tempfile_2);
        my $grm_file_basename = basename($grm_rename_tempfile);
        my $permanent_environment_structure_file_basename = basename($permanent_environment_structure_tempfile);
        #my @phenotype_header = ("id", "plot_id", "replicate", "time", "replicate_time", "ind_replicate", @sorted_trait_names, "phenotype");

        my $effect_1_levels = scalar(@rep_time_factors);
        my $effect_grm_levels = scalar(@unique_accession_names);
        my $effect_pe_levels = scalar(@ind_rep_factors);

        print STDERR Dumper $stats_tempfile_2;
        my $data_cv_cmd = 'R -e "mat <- read.csv(\''.$stats_tempfile_2.'\', header=FALSE, sep=\' \');
        randomized_positions <- sample(length(mat[,1]));
        cv_step_size <- length(mat[,1]) %/% 5;
        cv_step_size_modulo <- length(mat[,1]) %% 5;
        mat_CV1 <- mat; mat_CV2 <- mat; mat_CV3 <- mat; mat_CV4 <- mat; mat_CV5 <- mat;
        mat_CV1[c(randomized_positions[1:cv_step_size]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV2[c(randomized_positions[(cv_step_size+1):(2*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV3[c(randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV4[c(randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV5[c(randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV1_2 <- mat; mat_CV2_2 <- mat; mat_CV3_2 <- mat; mat_CV4_2 <- mat; mat_CV5_2 <- mat;
        mat_CV1_2[c(randomized_positions[1:cv_step_size]),ncol(mat)] <- -999;
        mat_CV2_2[c(randomized_positions[(cv_step_size+1):(2*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV3_2[c(randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV4_2[c(randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV5_2[c(randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]),ncol(mat)] <- -999;
        write.table(mat, file=\''.$stats_tempfile_2.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV1, file=\''.$stats_out_cv1_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV2, file=\''.$stats_out_cv2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV3, file=\''.$stats_out_cv3_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV4, file=\''.$stats_out_cv4_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV5, file=\''.$stats_out_cv5_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV1_2, file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV2_2, file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV3_2, file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV4_2, file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV5_2, file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        "';
        my $status_cv_files = system($data_cv_cmd);

        my $stats_out_cv1_predict_tempfile_basename = basename($stats_out_cv1_predict_tempfile);
        my $stats_out_cv2_predict_tempfile_basename = basename($stats_out_cv2_predict_tempfile);
        my $stats_out_cv3_predict_tempfile_basename = basename($stats_out_cv3_predict_tempfile);
        my $stats_out_cv4_predict_tempfile_basename = basename($stats_out_cv4_predict_tempfile);
        my $stats_out_cv5_predict_tempfile_basename = basename($stats_out_cv5_predict_tempfile);

        my $stats_out_cv1_2_predict_tempfile_basename = basename($stats_out_cv1_2_predict_tempfile);
        my $stats_out_cv2_2_predict_tempfile_basename = basename($stats_out_cv2_2_predict_tempfile);
        my $stats_out_cv3_2_predict_tempfile_basename = basename($stats_out_cv3_2_predict_tempfile);
        my $stats_out_cv4_2_predict_tempfile_basename = basename($stats_out_cv4_2_predict_tempfile);
        my $stats_out_cv5_2_predict_tempfile_basename = basename($stats_out_cv5_2_predict_tempfile);

        @param_file_rows_2 = (
            '(CO)VARIANCES'
        );
        foreach (@pheno_var) {
            my $s = join ' ', @$_;
            push @param_file_rows_2, $s;
        }
        @param_file_rows_4 = (
            '(CO)VARIANCES'
        );
        foreach (@pheno_var) {
            my $s = join ' ', @$_;
            push @param_file_rows_4, $s;
        }

        open(my $Fp, ">", $parameter_tempfile) || die "Can't open file ".$parameter_tempfile;
            foreach ((@param_file_rows_data, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp "$_\n";
            }
        close($Fp);

        open(my $Fp_cv1, ">", $parameter_tempfile_cv1) || die "Can't open file ".$parameter_tempfile_cv1;
            foreach ((@param_file_rows_data_cv1, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv1 "$_\n";
            }
        close($Fp_cv1);

        open(my $Fp_cv2, ">", $parameter_tempfile_cv2) || die "Can't open file ".$parameter_tempfile_cv2;
            foreach ((@param_file_rows_data_cv2, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv2 "$_\n";
            }
        close($Fp_cv2);

        open(my $Fp_cv3, ">", $parameter_tempfile_cv3) || die "Can't open file ".$parameter_tempfile_cv3;
            foreach ((@param_file_rows_data_cv3, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv3 "$_\n";
            }
        close($Fp_cv3);

        open(my $Fp_cv4, ">", $parameter_tempfile_cv4) || die "Can't open file ".$parameter_tempfile_cv4;
            foreach ((@param_file_rows_data_cv4, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv4 "$_\n";
            }
        close($Fp_cv4);

        open(my $Fp_cv5, ">", $parameter_tempfile_cv5) || die "Can't open file ".$parameter_tempfile_cv5;
            foreach ((@param_file_rows_data_cv5, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv5 "$_\n";
            }
        close($Fp_cv5);

        my $command_name = '';
        if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'blupf90_grm_random_regression_dap_blups') {
            $command_name = 'blupf90';
        }
        elsif ($statistics_select eq 'airemlf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
            $command_name = 'airemlf90';
        }

        my $parameter_tempfile_basename = basename($parameter_tempfile);
        my $parameter_tempfile_cv1_basename = basename($parameter_tempfile_cv1);
        my $parameter_tempfile_cv2_basename = basename($parameter_tempfile_cv2);
        my $parameter_tempfile_cv3_basename = basename($parameter_tempfile_cv3);
        my $parameter_tempfile_cv4_basename = basename($parameter_tempfile_cv4);
        my $parameter_tempfile_cv5_basename = basename($parameter_tempfile_cv5);
        my $parameter_tempfile_cv1_2_basename = basename($parameter_tempfile_cv1_2);
        my $parameter_tempfile_cv2_2_basename = basename($parameter_tempfile_cv2_2);
        my $parameter_tempfile_cv3_2_basename = basename($parameter_tempfile_cv3_2);
        my $parameter_tempfile_cv4_2_basename = basename($parameter_tempfile_cv4_2);
        my $parameter_tempfile_cv5_2_basename = basename($parameter_tempfile_cv5_2);

        print STDERR Dumper $cmd_f90;
        my $status = system($cmd_f90);

        my @log_output_rows;
        open(my $fh_log, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
            print STDERR "Opened $stats_out_tempfile\n";
            while (my $row = <$fh_log>) {
                print STDERR $row;
                push @log_output_rows, $row;
            }
        close($fh_log);

        my $log_output = join '', @log_output_rows;
        my ($gen_var_string) = $log_output =~ /Genetic variance\(s\) for effect  2(.*?)correlations/gs;
        @rr_coeff_genetic_covariance_altered = split ' ', $gen_var_string;
        print STDERR Dumper \@rr_coeff_genetic_covariance_altered;
        my ($env_var_string) = $log_output =~ /Genetic variance\(s\) for effect  $legendre_order_number_env_var_pos(.*?)correlations/gs;
        @rr_coeff_env_covariance_altered = split ' ', $env_var_string;
        print STDERR Dumper \@rr_coeff_env_covariance_altered;
        my (@gen_cor_string) = $log_output =~ /correlations(.*?)eigenvectors/gs;
        @rr_coeff_genetic_correlation_altered = split ' ', $gen_cor_string[0];
        print STDERR Dumper \@rr_coeff_genetic_correlation_altered;
        @rr_coeff_env_correlation_altered = split ' ', $gen_cor_string[1];
        print STDERR Dumper \@rr_coeff_env_correlation_altered;
        my ($res_se_string) = $log_output =~ /SE for R(.*?)\* FINISHED \(AIREMLF90\)/gs;
        print STDERR Dumper $res_se_string;
        # $rr_residual_variance_altered = ($res_se_string**2)*$number_plots;
        $rr_residual_variance_altered = $res_se_string;
        print STDERR Dumper $rr_residual_variance_altered;

        @param_file_rows_6 = (
            '(CO)VARIANCES'
        );
        my $cov_gen_counter = 0;
        foreach my $i (0..$legendre_order_number) {
            my @cov_row;
            foreach my $j (0..$legendre_order_number) {
                push @cov_row, $rr_coeff_genetic_covariance_altered[$cov_gen_counter];
                $cov_gen_counter++;
            }
            my $s = join ' ', @cov_row;
            push @param_file_rows_6, $s;
        }

        @param_file_rows_7 = (
            '(CO)VARIANCES'
        );
        my $cov_env_counter = 0;
        foreach my $i (0..$legendre_order_number) {
            my @cov_row;
            foreach my $j (0..$legendre_order_number) {
                push @cov_row, $rr_coeff_env_covariance_altered[$cov_env_counter];
                $cov_env_counter++;
            }
            my $s = join ' ', @cov_row;
            push @param_file_rows_7, $s;
        }

        open(my $Fp_cv1_2, ">", $parameter_tempfile_cv1_2) || die "Can't open file ".$parameter_tempfile_cv1_2;
            foreach ((@param_file_rows_data_cv1, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv1_2 "$_\n";
            }
        close($Fp_cv1_2);

        open(my $Fp_cv2_2, ">", $parameter_tempfile_cv2_2) || die "Can't open file ".$parameter_tempfile_cv2_2;
            foreach ((@param_file_rows_data_cv2, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv2_2 "$_\n";
            }
        close($Fp_cv2_2);

        open(my $Fp_cv3_2, ">", $parameter_tempfile_cv3_2) || die "Can't open file ".$parameter_tempfile_cv3_2;
            foreach ((@param_file_rows_data_cv3, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv3_2 "$_\n";
            }
        close($Fp_cv3_2);

        open(my $Fp_cv4_2, ">", $parameter_tempfile_cv4_2) || die "Can't open file ".$parameter_tempfile_cv4_2;
            foreach ((@param_file_rows_data_cv4, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv4_2 "$_\n";
            }
        close($Fp_cv4_2);

        open(my $Fp_cv5_2, ">", $parameter_tempfile_cv5_2) || die "Can't open file ".$parameter_tempfile_cv5_2;
            foreach ((@param_file_rows_data_cv5, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv5_2 "$_\n";
            }
        close($Fp_cv5_2);

        my $q_time = "SELECT t.cvterm_id FROM cvterm as t JOIN cv ON(t.cv_id=cv.cv_id) WHERE t.name=? and cv.name=?;";
        my $h_time = $schema->storage->dbh()->prepare($q_time);

        $yhat_residual_tempfile = $tmp_stats_dir."/yhat_residual";
        open(my $fh_yhat_res, '<', $yhat_residual_tempfile) or die "Could not open file '$yhat_residual_tempfile' $!";
            print STDERR "Opened $yhat_residual_tempfile\n";

            my $pred_res_counter = 0;
            my $trait_counter = 0;
            while (my $row = <$fh_yhat_res>) {
                # print STDERR $row;
                my @vals = split ' ', $row;
                my $pred = $vals[0];
                my $residual = $vals[1];
                $model_sum_square_residual_altered = $model_sum_square_residual_altered + $residual*$residual;

                my $plot_name = $plot_id_count_map_reverse{$pred_res_counter};
                my $time = $time_count_map_reverse{$pred_res_counter};

                if (defined $residual && $residual ne '') {
                    $result_residual_data_altered->{$plot_name}->{$seen_times{$time}} = [$residual, $timestamp, $user_name, '', ''];
                    $residual_sum_altered += abs($residual);
                    $residual_sum_square_altered = $residual_sum_square_altered + $residual*$residual;
                }
                if (defined $pred && $pred ne '') {
                    $result_fitted_data_altered->{$plot_name}->{$seen_times{$time}} = [$pred, $timestamp, $user_name, '', ''];
                }

                $pred_res_counter++;
            }
        close($fh_yhat_res);

        $blupf90_solutions_tempfile = $tmp_stats_dir."/solutions";
        open(my $fh_sol, '<', $blupf90_solutions_tempfile) or die "Could not open file '$blupf90_solutions_tempfile' $!";
            print STDERR "Opened $blupf90_solutions_tempfile\n";

            my $head = <$fh_sol>;
            print STDERR $head;

            my $solution_file_counter = 0;
            my $grm_sol_counter = 0;
            my $grm_sol_trait_counter = 0;
            my $pe_sol_counter = 0;
            my $pe_sol_trait_counter = 0;
            while (defined(my $row = <$fh_sol>)) {
                # print STDERR $row;
                my @vals = split ' ', $row;
                my $level = $vals[2];
                my $value = $vals[3];
                if ($solution_file_counter < $effect_1_levels) {
                    $fixed_effects_altered{$solution_file_counter}->{$level} = $value;
                }
                elsif ($solution_file_counter < $effect_1_levels + $effect_grm_levels*($legendre_order_number+1)) {
                    my $accession_name = $accession_id_factor_map_reverse{$level};
                    if ($grm_sol_counter < $effect_grm_levels-1) {
                        $grm_sol_counter++;
                    }
                    else {
                        $grm_sol_counter = 0;
                        $grm_sol_trait_counter++;
                    }
                    if (defined $value && $value ne '') {
                        push @{$rr_genetic_coefficients_altered{$accession_name}}, $value;
                    }
                }
                else {
                    my $plot_name = $plot_id_factor_map_reverse{$level};
                    if ($pe_sol_counter < $effect_pe_levels-1) {
                        $pe_sol_counter++;
                    }
                    else {
                        $pe_sol_counter = 0;
                        $pe_sol_trait_counter++;
                    }
                    if (defined $value && $value ne '') {
                        push @{$rr_temporal_coefficients_altered{$plot_name}}, $value;
                    }
                }
                $solution_file_counter++;
            }
        close($fh_sol);

        # print STDERR Dumper \%rr_genetic_coefficients_altered;
        # print STDERR Dumper \%rr_temporal_coefficients_altered;

        open(my $Fgc, ">", $coeff_genetic_tempfile) || die "Can't open file ".$coeff_genetic_tempfile;

        while ( my ($accession_name, $coeffs) = each %rr_genetic_coefficients_altered) {
            my @line = ($accession_name, @$coeffs);
            my $line_string = join ',', @line;
            print $Fgc "$line_string\n";

            foreach my $t_i (0..20) {
                my $time = $t_i*5/100;
                my $time_rescaled = sprintf("%.2f", $time*($time_max - $time_min) + $time_min);

                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                my $time_term_string = '';
                if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {
                    $time_term_string = "GDD $time_rescaled";
                }
                elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
                    $time_term_string = "day $time_rescaled"
                }
                $h_time->execute($time_term_string, 'cxgn_time_ontology');
                my ($time_cvterm_id) = $h_time->fetchrow_array();

                if (!$time_cvterm_id) {
                    my $new_time_term = $schema->resultset("Cv::Cvterm")->create_with({
                       name => $time_term_string,
                       cv => 'cxgn_time_ontology'
                    });
                    $time_cvterm_id = $new_time_term->cvterm_id();
                }
                my $time_term_string_blup = SGN::Model::Cvterm::get_trait_from_cvterm_id($schema, $time_cvterm_id, 'extended');

                $result_blup_data_altered->{$accession_name}->{$time_term_string_blup} = [$value, $timestamp, $user_name, '', ''];
            }
        }
        close($Fgc);

        while ( my ($accession_name, $coeffs) = each %rr_genetic_coefficients_altered) {
            foreach my $time_term (@sorted_trait_names) {
                my $time = ($time_term - $time_min)/($time_max - $time_min);
                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                $result_blup_data_delta_altered->{$accession_name}->{$time_term} = [$value, $timestamp, $user_name, '', ''];

                if ($value < $genetic_effect_min_altered) {
                    $genetic_effect_min_altered = $value;
                }
                elsif ($value >= $genetic_effect_max_altered) {
                    $genetic_effect_max_altered = $value;
                }

                $genetic_effect_sum_altered += abs($value);
                $genetic_effect_sum_square_altered = $genetic_effect_sum_square_altered + $value*$value;
            }
        }

        open(my $Fpc, ">", $coeff_pe_tempfile) || die "Can't open file ".$coeff_pe_tempfile;

        while ( my ($plot_name, $coeffs) = each %rr_temporal_coefficients_altered) {
            my @line = ($plot_name, @$coeffs);
            my $line_string = join ',', @line;
            print $Fpc "$line_string\n";

            foreach my $t_i (0..20) {
                my $time = $t_i*5/100;
                my $time_rescaled = sprintf("%.2f", $time*($time_max - $time_min) + $time_min);

                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                my $time_term_string = '';
                if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {
                    $time_term_string = "GDD $time_rescaled";
                }
                elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
                    $time_term_string = "day $time_rescaled"
                }
                $h_time->execute($time_term_string, 'cxgn_time_ontology');
                my ($time_cvterm_id) = $h_time->fetchrow_array();

                if (!$time_cvterm_id) {
                    my $new_time_term = $schema->resultset("Cv::Cvterm")->create_with({
                       name => $time_term_string,
                       cv => 'cxgn_time_ontology'
                    });
                    $time_cvterm_id = $new_time_term->cvterm_id();
                }
                my $time_term_string_pe = SGN::Model::Cvterm::get_trait_from_cvterm_id($schema, $time_cvterm_id, 'extended');

                $result_blup_pe_data_altered->{$plot_name}->{$time_term_string_pe} = [$value, $timestamp, $user_name, '', ''];
            }
        }
        close($Fpc);

        while ( my ($plot_name, $coeffs) = each %rr_temporal_coefficients_altered) {
            foreach my $time_term (@sorted_trait_names) {
                my $time = ($time_term - $time_min)/($time_max - $time_min);
                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                $result_blup_pe_data_delta_altered->{$plot_name}->{$time_term} = [$value, $timestamp, $user_name, '', ''];

                if ($value < $env_effect_min_altered) {
                    $env_effect_min_altered = $value;
                }
                elsif ($value >= $env_effect_max_altered) {
                    $env_effect_max_altered = $value;
                }

                $env_effect_sum_altered += abs($value);
                $env_effect_sum_square_altered = $env_effect_sum_square_altered + $value*$value;
            }
        }

        if ($perform_cv) {
            my $cmd_f90_cv1 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv1_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv1;
            my $status_cv1 = system($cmd_f90_cv1);

            open(my $fh_log_cv1, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv1>) {
                    print STDERR $row;
                }
            close($fh_log_cv1);

            my $yhat_residual_tempfile_cv1 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv1, '<', $yhat_residual_tempfile_cv1) or die "Could not open file '$yhat_residual_tempfile_cv1' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv1\n";

                while (my $row = <$fh_yhat_res_cv1>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv1_altered = $model_sum_square_cv1_altered + $residual*$residual;
                }
            close($fh_yhat_res_cv1);

            my $cmd_f90_cv2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv2_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv2;
            my $status_cv2 = system($cmd_f90_cv2);

            open(my $fh_log_cv2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv2>) {
                    print STDERR $row;
                }
            close($fh_log_cv2);

            my $yhat_residual_tempfile_cv2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv2, '<', $yhat_residual_tempfile_cv2) or die "Could not open file '$yhat_residual_tempfile_cv2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv2\n";

                while (my $row = <$fh_yhat_res_cv2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv2_altered = $model_sum_square_cv2_altered + $residual*$residual;
                }
            close($fh_yhat_res_cv2);

            my $cmd_f90_cv3 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv3_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv3;
            my $status_cv3 = system($cmd_f90_cv3);

            open(my $fh_log_cv3, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv3>) {
                    print STDERR $row;
                }
            close($fh_log_cv3);

            my $yhat_residual_tempfile_cv3 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv3, '<', $yhat_residual_tempfile_cv3) or die "Could not open file '$yhat_residual_tempfile_cv3' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv3\n";

                while (my $row = <$fh_yhat_res_cv3>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv3_altered = $model_sum_square_cv3_altered + $residual*$residual;
                }
            close($fh_yhat_res_cv3);

            my $cmd_f90_cv4 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv4_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv4;
            my $status_cv4 = system($cmd_f90_cv4);

            open(my $fh_log_cv4, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv4>) {
                    print STDERR $row;
                }
            close($fh_log_cv4);

            my $yhat_residual_tempfile_cv4 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv4, '<', $yhat_residual_tempfile_cv4) or die "Could not open file '$yhat_residual_tempfile_cv4' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv4\n";

                while (my $row = <$fh_yhat_res_cv4>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv4_altered = $model_sum_square_cv4_altered + $residual*$residual;
                }
            close($fh_yhat_res_cv4);

            my $cmd_f90_cv5 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv5_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv5;
            my $status_cv5 = system($cmd_f90_cv5);

            open(my $fh_log_cv5, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv5>) {
                    print STDERR $row;
                }
            close($fh_log_cv5);

            my $yhat_residual_tempfile_cv5 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv5, '<', $yhat_residual_tempfile_cv5) or die "Could not open file '$yhat_residual_tempfile_cv5' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv5\n";

                while (my $row = <$fh_yhat_res_cv5>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv5_altered = $model_sum_square_cv5_altered + $residual*$residual;
                }
            close($fh_yhat_res_cv5);

            my $cmd_f90_cv1_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv1_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv1_2;
            my $status_cv1_2 = system($cmd_f90_cv1_2);

            open(my $fh_log_cv1_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv1_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv1_2);

            my $yhat_residual_tempfile_cv1_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv1_2, '<', $yhat_residual_tempfile_cv1_2) or die "Could not open file '$yhat_residual_tempfile_cv1_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv1_2\n";

                while (my $row = <$fh_yhat_res_cv1_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv1_2_altered = $model_sum_square_cv1_2_altered + $residual*$residual;
                }
            close($fh_yhat_res_cv1_2);

            my $cmd_f90_cv2_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv2_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv2_2;
            my $status_cv2_2 = system($cmd_f90_cv2_2);

            open(my $fh_log_cv2_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv2_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv2_2);

            my $yhat_residual_tempfile_cv2_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv2_2, '<', $yhat_residual_tempfile_cv2_2) or die "Could not open file '$yhat_residual_tempfile_cv2_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv2_2\n";

                while (my $row = <$fh_yhat_res_cv2_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv2_2_altered = $model_sum_square_cv2_2_altered + $residual*$residual;
                }
            close($fh_yhat_res_cv2_2);

            my $cmd_f90_cv3_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv3_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv3_2;
            my $status_cv3_2 = system($cmd_f90_cv3_2);

            open(my $fh_log_cv3_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv3_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv3_2);

            my $yhat_residual_tempfile_cv3_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv3_2, '<', $yhat_residual_tempfile_cv3_2) or die "Could not open file '$yhat_residual_tempfile_cv3_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv3_2\n";

                while (my $row = <$fh_yhat_res_cv3_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv3_2_altered = $model_sum_square_cv3_2_altered + $residual*$residual;
                }
            close($fh_yhat_res_cv3_2);

            my $cmd_f90_cv4_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv4_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv4_2;
            my $status_cv4_2 = system($cmd_f90_cv4_2);

            open(my $fh_log_cv4_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv4_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv4_2);

            my $yhat_residual_tempfile_cv4_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv4_2, '<', $yhat_residual_tempfile_cv4_2) or die "Could not open file '$yhat_residual_tempfile_cv4_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv4_2\n";

                while (my $row = <$fh_yhat_res_cv4_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv4_2_altered = $model_sum_square_cv4_2_altered + $residual*$residual;
                }
            close($fh_yhat_res_cv4_2);

            my $cmd_f90_cv5_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv5_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv5_2;
            my $status_cv5_2 = system($cmd_f90_cv5_2);

            open(my $fh_log_cv5_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv5_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv5_2);

            my $yhat_residual_tempfile_cv5_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv5_2, '<', $yhat_residual_tempfile_cv5_2) or die "Could not open file '$yhat_residual_tempfile_cv5_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv5_2\n";

                while (my $row = <$fh_yhat_res_cv5_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv5_2_altered = $model_sum_square_cv5_2_altered + $residual*$residual;
                }
            close($fh_yhat_res_cv5_2);
        }
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_spatial_genetic_blups') {

        foreach my $t (@sorted_trait_names) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;
                my @row_col_ordered_plots_names;

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        push @row_col_ordered_plots_names, $stock_name;
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered += abs($residual);
                            $residual_sum_square_altered = $residual_sum_square_altered + $residual*$residual;}
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered = $model_sum_square_residual_altered + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;

                    my $solution_file_counter = 0;
                    while (defined(my $row = <$fh>)) {
                        # print STDERR $row;
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $level = $columns[0];
                        my $value = $columns[1];
                        my $std = $columns[2];
                        my $z_ratio = $columns[3];
                        if (defined $value && $value ne '') {
                            if ($solution_file_counter < $row_number_span) {
                                # print STDERR "$level $value \n";
                            }
                            elsif ($solution_file_counter < $row_number_span + $number_accessions) {
                                my $stock_name = $accession_id_factor_map_reverse{$solution_file_counter - $row_number_span + 1};
                                $result_blup_data_altered->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $genetic_effect_min_altered) {
                                    $genetic_effect_min_altered = $value;
                                }
                                elsif ($value >= $genetic_effect_max_altered) {
                                    $genetic_effect_max_altered = $value;
                                }

                                $genetic_effect_sum_altered += abs($value);
                                $genetic_effect_sum_square_altered = $genetic_effect_sum_square_altered + $value*$value;

                                $current_gen_row_count++;
                            }
                            elsif ($solution_file_counter < $col_number_span + $row_number_span + $number_accessions) {
                                # print STDERR "$level $value \n";
                            }
                            else {
                                my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                                $result_blup_spatial_data_altered->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $env_effect_min_altered) {
                                    $env_effect_min_altered = $value;
                                }
                                elsif ($value >= $env_effect_max_altered) {
                                    $env_effect_max_altered = $value;
                                }

                                $env_effect_sum_altered += abs($value);
                                $env_effect_sum_square_altered = $env_effect_sum_square_altered + $value*$value;

                                $current_env_row_count++;
                            }
                        }
                        $solution_file_counter++;
                    }
                close($fh);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered = $model_sum_square_cv1_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered = $model_sum_square_cv2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered = $model_sum_square_cv3_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered = $model_sum_square_cv4_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered = $model_sum_square_cv5_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered = $model_sum_square_cv1_2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered = $model_sum_square_cv2_2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered = $model_sum_square_cv3_2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered = $model_sum_square_cv4_2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered = $model_sum_square_cv5_2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        $columns[0] = "trait:".$columns[0]."!trait_t".$t.":t".$t;
                        push @varcomp_altered, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_pure_spatial_genetic_blups') {
        $analysis_model_language = "R";

        $statistical_ontology_term = "Univariate linear mixed model 2D spline genetic BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000038"; #In the JS this is set to either Univariate linear mixed model 2D spline spatial BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000039

        $analysis_model_training_data_file_type = "nicksmixedmodelsanalytics_v1.01_asreml_grm_univariate_spatial_genetic_blups_phenotype_file";

        my @grm_old;
        open(my $fh_grm_old, '<', $grm_file) or die "Could not open file '$grm_file' $!";
            print STDERR "Opened $grm_file\n";

            while (my $row = <$fh_grm_old>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @grm_old, \@columns;
            }
        close($fh_grm_old);

        my %grm_hash_ordered;
        foreach (@grm_old) {
            my $l1 = $accession_id_factor_map{$_->[0]};
            my $l2 = $accession_id_factor_map{$_->[1]};
            my $val = sprintf("%.8f", $_->[2]);
            if ($l1 > $l2) {
                $grm_hash_ordered{$l1}->{$l2} = $val;
            }
            else {
                $grm_hash_ordered{$l2}->{$l1} = $val;
            }
        }

        open(my $fh_grm_new, '>', $grm_rename_tempfile) or die "Could not open file '$grm_rename_tempfile' $!";
            print STDERR "Opened $grm_rename_tempfile\n";

            foreach my $i (sort {$a <=> $b} keys %grm_hash_ordered) {
                my $v = $grm_hash_ordered{$i};
                foreach my $j (sort {$a <=> $b} keys %$v) {
                    my $val = $v->{$j};
                    print $fh_grm_new "$i $j $val\n";
                }
            }
        close($fh_grm_new);

        my @encoded_traits = values %trait_name_encoder;
        $number_traits = scalar(@sorted_trait_names);
        $number_accessions = scalar(@unique_accession_names);
        foreach my $t (@sorted_trait_names) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;
                my @row_col_ordered_plots_names;

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        push @row_col_ordered_plots_names, $stock_name;
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered += abs($residual);
                            $residual_sum_square_altered = $residual_sum_square_altered + $residual*$residual;}
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered = $model_sum_square_residual_altered + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;

                    my $solution_file_counter = 0;
                    while (defined(my $row = <$fh>)) {
                        # print STDERR $row;
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $level = $columns[0];
                        my $value = $columns[1];
                        my $std = $columns[2];
                        my $z_ratio = $columns[3];
                        if (defined $value && $value ne '') {
                            if ($solution_file_counter < $number_accessions) {
                                my $stock_name = $accession_id_factor_map_reverse{$solution_file_counter + 1};
                                $result_blup_data_altered->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $genetic_effect_min_altered) {
                                    $genetic_effect_min_altered = $value;
                                }
                                elsif ($value >= $genetic_effect_max_altered) {
                                    $genetic_effect_max_altered = $value;
                                }

                                $genetic_effect_sum_altered += abs($value);
                                $genetic_effect_sum_square_altered = $genetic_effect_sum_square_altered + $value*$value;

                                $current_gen_row_count++;
                            }
                            else {
                                my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                                $result_blup_spatial_data_altered->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $env_effect_min_altered) {
                                    $env_effect_min_altered = $value;
                                }
                                elsif ($value >= $env_effect_max_altered) {
                                    $env_effect_max_altered = $value;
                                }

                                $env_effect_sum_altered += abs($value);
                                $env_effect_sum_square_altered = $env_effect_sum_square_altered + $value*$value;

                                $current_env_row_count++;
                            }
                        }
                        $solution_file_counter++;
                    }
                close($fh);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered = $model_sum_square_cv1_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered = $model_sum_square_cv2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered = $model_sum_square_cv3_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered = $model_sum_square_cv4_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered = $model_sum_square_cv5_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered = $model_sum_square_cv1_2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered = $model_sum_square_cv2_2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered = $model_sum_square_cv3_2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered = $model_sum_square_cv4_2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered = $model_sum_square_cv5_2_altered + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        $columns[0] = "trait:".$columns[0]."!trait_t".$t.":t".$t;
                        push @varcomp_altered, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'asreml_grm_multivariate_spatial_genetic_blups') {
        # print STDERR Dumper $prepare_file_cv_cmd;
        # print STDERR Dumper $statistics_cmd;
        eval {
            my $status_prepare_file_cv2 = system($prepare_file_cv2_cmd);
            my $status_prepare_file_cv = system($prepare_file_cv_cmd);
            my $status = system($statistics_cmd);
            if ($perform_cv) {
                my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
            }
        };

        my $run_stats_fault = 0;
        if ($@) {
            print STDERR "R ERROR\n";
            print STDERR Dumper $@;
            $run_stats_fault = 1;
        }
        else {
            my $current_gen_row_count = 0;
            my $current_env_row_count = 0;
            my @row_col_ordered_plots_names;

            open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                print STDERR "Opened $stats_out_tempfile_residual\n";
                my $header_residual = <$fh_residual>;
                my @header_cols_residual;
                if ($csv->parse($header_residual)) {
                    @header_cols_residual = $csv->fields();
                }
                my $residual_file_counter_index = 0;
                my $residual_file_counter = 1;
                while (my $row = <$fh_residual>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    my $residual = $columns[1];
                    my $fitted = $columns[2];
                    my $stock_name = $plot_id_map{$stock_id};
                    push @row_col_ordered_plots_names, $stock_name;
                    my $t = $sorted_trait_names[$residual_file_counter_index];
                    if ($residual_file_counter == scalar(@unique_plot_names)) {
                        $residual_file_counter = 0;
                        $residual_file_counter_index++;
                    }
                    if (defined $residual && $residual ne '') {
                        $result_residual_data_altered->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                        $residual_sum_altered += abs($residual);
                        $residual_sum_square_altered = $residual_sum_square_altered + $residual*$residual;
                    }
                    if (defined $fitted && $fitted ne '') {
                        $result_fitted_data_altered->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                    }
                    $model_sum_square_residual_altered = $model_sum_square_residual_altered + $residual*$residual;

                    $residual_file_counter++;
                }
            close($fh_residual);

            open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                my $header = <$fh>;
                my @header_cols;
                if ($csv->parse($header)) {
                    @header_cols = $csv->fields();
                }

                my $solution_file_counter = 0;
                my $solution_file_g_counter = 1;
                my $solution_file_p_counter = 1;
                my $solution_file_counter_g_index = 0;
                my $solution_file_counter_p_index = 0;
                while (defined(my $row = <$fh>)) {
                    # print STDERR $row;
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $level = $columns[0];
                    my $value = $columns[1];
                    my $std = $columns[2];
                    my $z_ratio = $columns[3];
                    if (defined $value && $value ne '') {
                        if ($solution_file_counter < $number_accessions*$number_traits) {
                            my $t = $sorted_trait_names[$solution_file_counter_g_index];
                            if ($solution_file_g_counter == $number_accessions) {
                                $solution_file_g_counter = 0;
                                $solution_file_counter_g_index++;
                            }

                            my $stock_name = $accession_id_factor_map_reverse{$solution_file_g_counter+1};
                            $result_blup_data_altered->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $genetic_effect_min_altered) {
                                $genetic_effect_min_altered = $value;
                            }
                            elsif ($value >= $genetic_effect_max_altered) {
                                $genetic_effect_max_altered = $value;
                            }

                            $genetic_effect_sum_altered += abs($value);
                            $genetic_effect_sum_square_altered = $genetic_effect_sum_square_altered + $value*$value;

                            $solution_file_g_counter++;
                            $current_gen_row_count++;
                        }
                        else {
                            my $t = $sorted_trait_names[$solution_file_counter_p_index];
                            if ($solution_file_p_counter == scalar(@unique_plot_names)) {
                                $solution_file_p_counter = 0;
                                $solution_file_counter_p_index++;
                            }

                            my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                            $result_blup_spatial_data_altered->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $env_effect_min_altered) {
                                $env_effect_min_altered = $value;
                            }
                            elsif ($value >= $env_effect_max_altered) {
                                $env_effect_max_altered = $value;
                            }

                            $env_effect_sum_altered += abs($value);
                            $env_effect_sum_square_altered = $env_effect_sum_square_altered + $value*$value;

                            $solution_file_p_counter++;
                            $current_env_row_count++;
                        }
                    }
                    $solution_file_counter++;
                }
            close($fh);

            open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                my $header_cv1 = <$fh_cv1>;
                my @header_cols_cv1;
                if ($csv->parse($header_cv1)) {
                    @header_cols_cv1 = $csv->fields();
                }
                while (my $row = <$fh_cv1>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv1_altered = $model_sum_square_cv1_altered + ($true_value-$fitted)**2;
                }
            close($fh_cv1);

            open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                my $header_cv2 = <$fh_cv2>;
                my @header_cols_cv2;
                if ($csv->parse($header_cv2)) {
                    @header_cols_cv2 = $csv->fields();
                }
                while (my $row = <$fh_cv2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv2_altered = $model_sum_square_cv2_altered + ($true_value-$fitted)**2;
                }
            close($fh_cv2);

            open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                my $header_cv3 = <$fh_cv3>;
                my @header_cols_cv3;
                if ($csv->parse($header_cv3)) {
                    @header_cols_cv3 = $csv->fields();
                }
                while (my $row = <$fh_cv3>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv3_altered = $model_sum_square_cv3_altered + ($true_value-$fitted)**2;
                }
            close($fh_cv3);

            open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                my $header_cv4 = <$fh_cv4>;
                my @header_cols_cv4;
                if ($csv->parse($header_cv4)) {
                    @header_cols_cv4 = $csv->fields();
                }
                while (my $row = <$fh_cv4>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv4_altered = $model_sum_square_cv4_altered + ($true_value-$fitted)**2;
                }
            close($fh_cv4);

            open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                my $header_cv5 = <$fh_cv5>;
                my @header_cols_cv5;
                if ($csv->parse($header_cv5)) {
                    @header_cols_cv5 = $csv->fields();
                }
                while (my $row = <$fh_cv5>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv5_altered = $model_sum_square_cv5_altered + ($true_value-$fitted)**2;
                }
            close($fh_cv5);

            open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                my $header_cv1_2 = <$fh_cv1_2>;
                my @header_cols_cv1_2;
                if ($csv->parse($header_cv1_2)) {
                    @header_cols_cv1_2 = $csv->fields();
                }
                while (my $row = <$fh_cv1_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv1_2_altered = $model_sum_square_cv1_2_altered + ($true_value-$fitted)**2;
                }
            close($fh_cv1_2);

            open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                my $header_cv2_2 = <$fh_cv2_2>;
                my @header_cols_cv2_2;
                if ($csv->parse($header_cv2_2)) {
                    @header_cols_cv2_2 = $csv->fields();
                }
                while (my $row = <$fh_cv2_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv2_2_altered = $model_sum_square_cv2_2_altered + ($true_value-$fitted)**2;
                }
            close($fh_cv2_2);

            open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                my $header_cv3_2 = <$fh_cv3_2>;
                my @header_cols_cv3_2;
                if ($csv->parse($header_cv3_2)) {
                    @header_cols_cv3_2 = $csv->fields();
                }
                while (my $row = <$fh_cv3_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv3_2_altered = $model_sum_square_cv3_2_altered + ($true_value-$fitted)**2;
                }
            close($fh_cv3_2);

            open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                my $header_cv4_2 = <$fh_cv4_2>;
                my @header_cols_cv4_2;
                if ($csv->parse($header_cv4_2)) {
                    @header_cols_cv4_2 = $csv->fields();
                }
                while (my $row = <$fh_cv4_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv4_2_altered = $model_sum_square_cv4_2_altered + ($true_value-$fitted)**2;
                }
            close($fh_cv4_2);

            open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                my $header_cv5_2 = <$fh_cv5_2>;
                my @header_cols_cv5_2;
                if ($csv->parse($header_cv5_2)) {
                    @header_cols_cv5_2 = $csv->fields();
                }
                while (my $row = <$fh_cv5_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv5_2_altered = $model_sum_square_cv5_2_altered + ($true_value-$fitted)**2;
                }
            close($fh_cv5_2);

            open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                print STDERR "Opened $stats_out_tempfile_varcomp\n";
                my $header_varcomp = <$fh_varcomp>;
                my @header_cols_varcomp;
                if ($csv->parse($header_varcomp)) {
                    @header_cols_varcomp = $csv->fields();
                }
                while (my $row = <$fh_varcomp>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    push @varcomp_altered, \@columns;
                }
            close($fh_varcomp);

            if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                $run_stats_fault = 1;
            }

            if ($run_stats_fault == 1) {
                print STDERR "ERROR IN R CMD\n";
                return {error=>'Error in R! Try a larger tolerance'};
            }
        }
    }
    print STDERR "ALTERED $statistics_select GENETIC EFFECT SUM $genetic_effect_sum_altered\n";
    print STDERR "ALTERED $statistics_select ENV EFFECT SUM $env_effect_sum_altered\n";
    print STDERR Dumper [$genetic_effect_min_altered, $genetic_effect_max_altered, $env_effect_min_altered, $env_effect_max_altered];

    my @model_sum_square_altered_cv_values = ($model_sum_square_cv1_altered, $model_sum_square_cv2_altered, $model_sum_square_cv3_altered, $model_sum_square_cv4_altered, $model_sum_square_cv5_altered);
    my @model_sum_square_altered_cv_2_values = ($model_sum_square_cv1_2_altered, $model_sum_square_cv2_2_altered, $model_sum_square_cv3_2_altered, $model_sum_square_cv4_2_altered, $model_sum_square_cv5_2_altered);
    print STDERR Dumper \@model_sum_square_altered_cv_values;
    print STDERR Dumper \@model_sum_square_altered_cv_2_values;
    my $model_sum_square_altered_cv_stat = Statistics::Descriptive::Full->new();
    $model_sum_square_altered_cv_stat->add_data(@model_sum_square_altered_cv_values);
    my $model_sum_square_altered_cv_result = {
        values => \@model_sum_square_altered_cv_values,
        variance => $model_sum_square_altered_cv_stat->variance(),
        mean => $model_sum_square_altered_cv_stat->mean()
    };
    my $model_sum_square_altered_cv_2_stat = Statistics::Descriptive::Full->new();
    $model_sum_square_altered_cv_2_stat->add_data(@model_sum_square_altered_cv_2_values);
    my $model_sum_square_altered_cv_2_result = {
        values => \@model_sum_square_altered_cv_2_values,
        variance => $model_sum_square_altered_cv_2_stat->variance(),
        mean => $model_sum_square_altered_cv_2_stat->mean()
    };

    my @sim_env_types = ("linear_gradient", "random_1d_normal_gradient", "random_2d_normal_gradient", "random", "ar1xar1", "row_plus_col");
    my $env_simulation = "linear_gradient";

    my (%phenotype_data_altered_env, @data_matrix_altered_env, @data_matrix_phenotypes_altered_env);
    my $phenotype_min_altered_env = 1000000000;
    my $phenotype_max_altered_env = -1000000000;
    my $env_sim_min = 10000000000000;
    my $env_sim_max = -10000000000000;
    my %sim_data;
    my %sim_data_check_1_times;

    my %seen_rows;
    my %seen_cols;

    eval {
        my $time_count = 0;
        my @sim_data_env_first;
        my $a_env_adjustment = 0;
        my $b_env_adjustment = 0;
        foreach my $t (@sorted_trait_names) {
            foreach my $p (@unique_plot_names) {
                my $row_number = $stock_name_row_col{$p}->{row_number};
                my $col_number = $stock_name_row_col{$p}->{col_number};
                my $sim_val = eval $env_sim_exec->{$env_simulation};

                $sim_data_check_1_times{$t}->{$row_number}->{$col_number} = $sim_val;
                $seen_rows{$row_number}++;
                $seen_cols{$col_number}++;

                if ($sim_val < $env_sim_min) {
                    $env_sim_min = $sim_val;
                }
                elsif ($sim_val >= $env_sim_max) {
                    $env_sim_max = $sim_val;
                }

                if ($time_count == 0) {
                    push @sim_data_env_first, $sim_val;
                }
            }
            $time_count++;
        }

        if ($sim_env_change_over_time eq 'changing_gradual') {
            open(my $sim_change_f, ">", $sim_env_changing_mat_tempfile) || die "Can't open file ".$sim_env_changing_mat_tempfile;
                print STDERR "OPENING ENV SIM CHANGING GRADUAL $env_simulation CORR $sim_env_changing_mat_tempfile\n";
                foreach (@sim_data_env_first) {
                    print $sim_change_f $_."\n";
                }
            close($sim_change_f);

            my $sim_change_cmd = 'R -e "library(data.table);
            mat <- fread(\''.$sim_env_changing_mat_tempfile.'\', header=FALSE, sep=\'\t\');
            x1 <- mat\$V1;
            x234 <- scale(matrix( rnorm('.$number_plots.'* ('.$number_traits.'-1) ), ncol='.$number_traits.'-1 ));
            x1234 <- cbind(scale(x1),x234);
            c1 <- var(x1234);
            chol1 <- solve(chol(c1));
            newx <-  x1234 %*% chol1;
            zapsmall(cor(newx));
            all.equal( x1234[,1], newx[,1] );
            newc <- matrix(NA, ncol='.$number_traits.', nrow='.$number_traits.');
            diag(newc) <- rep(1,'.$number_traits.');
            newc[lower.tri(newc)] <- rep('.$correlation_between_times.',sum(seq(1,'.$number_traits.'-1)));
            newc[upper.tri(newc)] <- rep('.$correlation_between_times.',sum(seq(1,'.$number_traits.'-1)));
            eigen(newc);
            chol2 <- chol(newc);
            finalx <- newx %*% chol2 * sd(x1) + mean(x1);
            write.table(finalx, file=\''.$sim_env_changing_mat_full_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\'\t\');"';
            # print STDERR Dumper $sim_change_cmd;
            my $status_sim_change = system($sim_change_cmd);

            open(my $sim_change_res, '<', $sim_env_changing_mat_full_tempfile) or die "Could not open file '$sim_env_changing_mat_full_tempfile' $!";
                print STDERR "OPENING ENV SIM CHANGING GRADUAL VALUES $env_simulation CORR $sim_env_changing_mat_full_tempfile\n";
                my $sim_change_line_counter = 0;
                while (my $row = <$sim_change_res>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $p = $unique_plot_names[$sim_change_line_counter];
                    my $row_number = $stock_name_row_col{$p}->{row_number};
                    my $col_number = $stock_name_row_col{$p}->{col_number};

                    my $sim_change_trait_counter = 0;
                    foreach my $sim_val (@columns) {
                        my $t = $sorted_trait_names[$sim_change_trait_counter];
                        $sim_data_check_1_times{$t}->{$row_number}->{$col_number} = $sim_val;

                        if ($sim_val < $env_sim_min) {
                            $env_sim_min = $sim_val;
                        }
                        elsif ($sim_val >= $env_sim_max) {
                            $env_sim_max = $sim_val;
                        }

                        $sim_change_trait_counter++;
                    }
                    $sim_change_line_counter++;
                }
            close($sim_change_res);
        }
    };

    my @seen_rows_ordered = sort keys %seen_rows;
    my @seen_cols_ordered = sort keys %seen_cols;

    if ($permanent_environment_structure eq 'env_corr_structure') {
        my @sim_data_diff_1;
        my $num_plots = scalar(@unique_plot_names);
        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $plot_id = $stock_name_row_col{$p}->{obsunit_stock_id};
            my @diffs = ($plot_id);
            foreach my $t (@sorted_trait_names) {
                my $sim_val = $sim_data_check_1_times{$t}->{$row_number}->{$col_number};
                foreach my $r (@seen_rows_ordered) {
                    foreach my $c (@seen_cols_ordered) {
                        my $v = $sim_data_check_1_times{$t}->{$r}->{$c};
                        push @diffs, $sim_val - $v;
                    }
                }
            }
            push @sim_data_diff_1, \@diffs;
        }

        open(my $pe_pheno_f, ">", $permanent_environment_structure_env_tempfile) || die "Can't open file ".$permanent_environment_structure_env_tempfile;
            print STDERR "OPENING PERMANENT ENVIRONMENT ENV $env_simulation CORR $permanent_environment_structure_env_tempfile\n";
            foreach (@sim_data_diff_1) {
                my $line = join "\t", @$_;
                print $pe_pheno_f $line."\n";
            }
        close($pe_pheno_f);

        my $pe_rel_cmd = 'R -e "library(lme4); library(data.table);
        mat_agg <- fread(\''.$permanent_environment_structure_env_tempfile.'\', header=FALSE, sep=\'\t\');
        mat_pheno <- mat_agg[,2:ncol(mat_agg)];
        a <- data.matrix(mat_pheno) - (matrix(rep(1,'.$num_plots.'*'.$num_plots.'), nrow='.$num_plots.') %*% data.matrix(mat_pheno))/'.$num_plots.';
        cor_mat <- a %*% t(a);
        rownames(cor_mat) <- data.matrix(mat_agg[,1]);
        colnames(cor_mat) <- data.matrix(mat_agg[,1]);
        range01 <- function(x){(x-min(x))/(max(x)-min(x))};
        cor_mat <- range01(cor_mat);
        write.table(cor_mat, file=\''.$permanent_environment_structure_env_tempfile2.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');"';
        # print STDERR Dumper $pe_rel_cmd;
        my $status_pe_rel = system($pe_rel_cmd);

        my %rel_pe_result_hash;
        open(my $pe_rel_res, '<', $permanent_environment_structure_env_tempfile2) or die "Could not open file '$permanent_environment_structure_env_tempfile2' $!";
            print STDERR "Opened PERMANENT ENV $env_simulation CORR FILE $permanent_environment_structure_env_tempfile2\n";
            my $header_row = <$pe_rel_res>;
            my @header;
            if ($csv->parse($header_row)) {
                @header = $csv->fields();
            }

            while (my $row = <$pe_rel_res>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                my $stock_id1 = $columns[0];
                my $counter = 1;
                foreach my $stock_id2 (@header) {
                    my $val = $columns[$counter];
                    $rel_pe_result_hash{$stock_id1}->{$stock_id2} = $val;
                    $counter++;
                }
            }
        close($pe_rel_res);

        my $data_rel_pe = '';
        my %result_hash_pe;
        foreach my $s (sort { $a <=> $b } @plot_ids_ordered) {
            foreach my $r (sort { $a <=> $b } @plot_ids_ordered) {
                my $s_factor = $stock_name_row_col{$plot_id_map{$s}}->{plot_id_factor};
                my $r_factor = $stock_name_row_col{$plot_id_map{$r}}->{plot_id_factor};
                if (!exists($result_hash_pe{$s_factor}->{$r_factor}) && !exists($result_hash_pe{$r_factor}->{$s_factor})) {
                    $result_hash_pe{$s_factor}->{$r_factor} = $rel_pe_result_hash{$s}->{$r};
                }
            }
        }
        foreach my $r (sort { $a <=> $b } keys %result_hash_pe) {
            foreach my $s (sort { $a <=> $b } keys %{$result_hash_pe{$r}}) {
                my $val = $result_hash_pe{$r}->{$s};
                if (defined $val and length $val) {
                    $data_rel_pe .= "$r\t$s\t$val\n";
                }
            }
        }

        open(my $pe_rel_out, ">", $permanent_environment_structure_env_tempfile_mat) || die "Can't open file ".$permanent_environment_structure_env_tempfile_mat;
            print STDERR "Opened PERMANENT ENV $env_simulation CORR FILE 3col $permanent_environment_structure_env_tempfile_mat\n";
            print $pe_rel_out $data_rel_pe;
        close($pe_rel_out);
    }

    print STDERR "ADD SIMULATED ENV TO ALTERED PHENO linear_gradient\n";
    print STDERR Dumper [$env_sim_min, $env_sim_max];
    if ($statistics_select eq 'sommer_grm_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_genetic_blups' || $statistics_select eq 'sommer_grm_spatial_pure_2dspl_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_pure_2dspl_genetic_blups') {

        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};
            my @row = ($replicate, $block, "S".$germplasm_stock_id, $obsunit_stock_id, $row_number, $col_number, $row_number, $col_number);

            foreach my $t (@sorted_trait_names) {
                if (defined($phenotype_data_altered{$p}->{$t})) {
                    my $new_val = $phenotype_data_altered{$p}->{$t} + 0;
                    my $sim_val = $sim_data_check_1_times{$t}->{$row_number}->{$col_number};
                    $sim_val = (($sim_val - $env_sim_min)/($env_sim_max - $env_sim_min))*$env_variance_percent;
                    $new_val += $sim_val;

                    if ($new_val < $phenotype_min_altered_env) {
                        $phenotype_min_altered_env = $new_val;
                    }
                    elsif ($new_val >= $phenotype_max_altered_env) {
                        $phenotype_max_altered_env = $new_val;
                    }

                    $sim_data{$p}->{$t} = $sim_val;
                    $phenotype_data_altered_env{$p}->{$t} = $new_val;
                    push @row, $new_val;
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, 'NA';
                }
            }
            push @data_matrix_altered_env, \@row;
        }

        open(my $F, ">", $stats_tempfile) || die "Can't open file ".$stats_tempfile;
            print $F $header_string."\n";
            foreach (@data_matrix_altered_env) {
                my $line = join ',', @$_;
                print $F "$line\n";
            }
        close($F);
    }
    elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {

        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};

            my @data_matrix_phenotypes_row;
            my $current_trait_index = 0;
            foreach my $t (@sorted_trait_names) {
                my @row = (
                    $accession_id_factor_map{$germplasm_stock_id},
                    $obsunit_stock_id,
                    $replicate,
                    $t,
                    $plot_rep_time_factor_map{$obsunit_stock_id}->{$replicate}->{$t},
                    $stock_row_col{$obsunit_stock_id}->{plot_id_factor}
                );

                my $polys = $polynomial_map{$t};
                push @row, @$polys;

                if (defined($phenotype_data_altered{$p}->{$t})) {
                    if ($use_area_under_curve) {
                        my $val = 0;
                        foreach my $counter (0..$current_trait_index) {
                            if ($counter == 0) {
                                $val = $val + $phenotype_data_altered{$p}->{$sorted_trait_names[$counter]} + 0;
                            }
                            else {
                                my $t1 = $sorted_trait_names[$counter-1];
                                my $t2 = $sorted_trait_names[$counter];
                                my $p1 = $phenotype_data_altered{$p}->{$t1} + 0;
                                my $p2 = $phenotype_data_altered{$p}->{$t2} + 0;
                                my $neg = 1;
                                my $min_val = $p1;
                                if ($p2 < $p1) {
                                    $neg = -1;
                                    $min_val = $p2;
                                }
                                $val = $val + (($neg*($p2-$p1)*($t2-$t1))/2)+($t2-$t1)*$min_val;
                            }
                        }

                        my $sim_val = $sim_data_check_1_times{$t}->{$row_number}->{$col_number};
                        $sim_val = (($sim_val - $env_sim_min)/($env_sim_max - $env_sim_min))*$env_variance_percent;
                        $val += $sim_val;

                        if ($val < $phenotype_min_altered_env) {
                            $phenotype_min_altered_env = $val;
                        }
                        elsif ($val >= $phenotype_max_altered_env) {
                            $phenotype_max_altered_env = $val;
                        }

                        $sim_data{$p}->{$t} = $sim_val;
                        $phenotype_data_altered_env{$p}->{$t} = $val;
                        push @row, $val;
                        push @data_matrix_phenotypes_row, $val;
                    }
                    else {
                        my $val = $phenotype_data_altered{$p}->{$t} + 0;

                        my $sim_val = $sim_data_check_1_times{$t}->{$row_number}->{$col_number};
                        $sim_val = (($sim_val - $env_sim_min)/($env_sim_max - $env_sim_min))*$env_variance_percent;
                        $val += $sim_val;

                        if ($val < $phenotype_min_altered_env) {
                            $phenotype_min_altered_env = $val;
                        }
                        elsif ($val >= $phenotype_max_altered_env) {
                            $phenotype_max_altered_env = $val;
                        }

                        $sim_data{$p}->{$t} = $sim_val;
                        $phenotype_data_altered_env{$p}->{$t} = $val;
                        push @row, $val;
                        push @data_matrix_phenotypes_row, $val;
                    }
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, '';
                    push @data_matrix_phenotypes_row, 'NA';
                }

                push @data_matrix_altered_env, \@row;
                push @data_matrix_phenotypes_altered_env, \@data_matrix_phenotypes_row;

                $current_trait_index++;
            }
        }

        open(my $F, ">", $stats_tempfile_2) || die "Can't open file ".$stats_tempfile_2;
            foreach (@data_matrix_altered_env) {
                my $line = join ' ', @$_;
                print $F "$line\n";
            }
        close($F);

        open(my $F2, ">", $stats_prep2_tempfile) || die "Can't open file ".$stats_prep2_tempfile;
            foreach (@data_matrix_phenotypes_altered_env) {
                my $line = join ',', @$_;
                print $F2 "$line\n";
            }
        close($F2);
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'asreml_grm_univariate_pure_spatial_genetic_blups' || $statistics_select eq 'asreml_grm_multivariate_spatial_genetic_blups') {
        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};

            my @row = (
                $germplasm_stock_id,
                $obsunit_stock_id,
                $replicate,
                $row_number,
                $col_number,
                $accession_id_factor_map{$germplasm_stock_id},
                $stock_row_col{$obsunit_stock_id}->{plot_id_factor}
            );

            foreach my $t (@sorted_trait_names) {
                if (defined($phenotype_data_altered{$p}->{$t})) {
                    my $new_val = $phenotype_data_altered{$p}->{$t} + 0;
                    my $sim_val = $sim_data_check_1_times{$t}->{$row_number}->{$col_number};
                    $sim_val = (($sim_val - $env_sim_min)/($env_sim_max - $env_sim_min))*$env_variance_percent;
                    $new_val += $sim_val;

                    if ($new_val < $phenotype_min_altered_env) {
                        $phenotype_min_altered_env = $new_val;
                    }
                    elsif ($new_val >= $phenotype_max_altered_env) {
                        $phenotype_max_altered_env = $new_val;
                    }

                    $sim_data{$p}->{$t} = $sim_val;
                    $phenotype_data_altered_env{$p}->{$t} = $new_val;
                    push @row, $new_val;
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, '';
                }
            }
            push @data_matrix_altered_env, \@row;
        }

        open(my $F, ">", $stats_tempfile_2) || die "Can't open file ".$stats_tempfile_2;
            print $F $header_string."\n";
            foreach (@data_matrix_altered_env) {
                my $line = join ',', @$_;
                print $F "$line\n";
            }
        close($F);
    }

    print STDERR Dumper [$phenotype_min_altered_env, $phenotype_max_altered_env];

    my ($result_blup_data_altered_env, $result_blup_data_delta_altered_env, $result_blup_spatial_data_altered_env, $result_blup_pe_data_altered_env, $result_blup_pe_data_delta_altered_env, $result_residual_data_altered_env, $result_fitted_data_altered_env, %fixed_effects_altered_env, %rr_genetic_coefficients_altered_env, %rr_temporal_coefficients_altered_env);
    my (@rr_coeff_genetic_covariance_altered_env, @rr_coeff_env_covariance_altered_env, @rr_coeff_genetic_correlation_altered_env, @rr_coeff_env_correlation_altered_env, $rr_residual_variance_altered_env);
    my (@varcomp_altered_env);
    my $model_sum_square_residual_altered_env = 0;
    my $model_sum_square_cv1_altered_env = 0;
    my $model_sum_square_cv2_altered_env = 0;
    my $model_sum_square_cv3_altered_env = 0;
    my $model_sum_square_cv4_altered_env = 0;
    my $model_sum_square_cv5_altered_env = 0;
    my $model_sum_square_cv1_2_altered_env = 0;
    my $model_sum_square_cv2_2_altered_env = 0;
    my $model_sum_square_cv3_2_altered_env = 0;
    my $model_sum_square_cv4_2_altered_env = 0;
    my $model_sum_square_cv5_2_altered_env = 0;
    my $genetic_effect_min_altered_env = 1000000000;
    my $genetic_effect_max_altered_env = -1000000000;
    my $env_effect_min_altered_env = 1000000000;
    my $env_effect_max_altered_env = -1000000000;
    my $genetic_effect_sum_square_altered_env = 0;
    my $genetic_effect_sum_altered_env = 0;
    my $env_effect_sum_square_altered_env = 0;
    my $env_effect_sum_altered_env = 0;
    my $residual_sum_square_altered_env = 0;
    my $residual_sum_altered_env = 0;

    print STDERR "RUN ENV ESTIMATE ON Altered Pheno With Sim Env linear_gradient\n";
    if ($statistics_select eq 'sommer_grm_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_spatial_pure_2dspl_genetic_blups') {
        #print STDERR Dumper $prepare_file_cv_cmd;
        # print STDERR Dumper $statistics_cmd;
        eval {
            my $status_prepare_file_cv = system($prepare_file_cv_cmd);
            my $status_prepare_file_cv2 = system($prepare_file_cv2_cmd);
            my $status = system($statistics_cmd);
            if ($perform_cv) {
                my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
            }
        };
        my $run_stats_fault = 0;
        if ($@) {
            print STDERR "R ERROR\n";
            print STDERR Dumper $@;
            $run_stats_fault = 1;
        }
        else {
            my $current_gen_row_count = 0;
            my $current_env_row_count = 0;

            open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                my $header = <$fh>;
                my @header_cols;
                if ($csv->parse($header)) {
                    @header_cols = $csv->fields();
                }

                while (my $row = <$fh>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $col_counter = 0;
                    foreach my $encoded_trait (@header_cols) {
                        my $trait = $trait_name_encoder_rev{$encoded_trait};
                        my $stock_id = $columns[0];

                        my $stock_name = $stock_info{$stock_id}->{uniquename};
                        my $value = $columns[$col_counter+1];
                        if (defined $value && $value ne '') {
                            $result_blup_data_altered_env->{$stock_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $genetic_effect_min_altered_env) {
                                $genetic_effect_min_altered_env = $value;
                            }
                            elsif ($value >= $genetic_effect_max_altered_env) {
                                $genetic_effect_max_altered_env = $value;
                            }

                            $genetic_effect_sum_altered_env += abs($value);
                            $genetic_effect_sum_square_altered_env = $genetic_effect_sum_square_altered_env + $value*$value;
                        }
                        $col_counter++;
                    }
                    $current_gen_row_count++;
                }
            close($fh);

            open(my $fh_2dspl, '<', $stats_out_tempfile_2dspl) or die "Could not open file '$stats_out_tempfile_2dspl' $!";
                print STDERR "Opened $stats_out_tempfile_2dspl\n";
                my $header_2dspl = <$fh_2dspl>;
                my @header_cols_2dspl;
                if ($csv->parse($header_2dspl)) {
                    @header_cols_2dspl = $csv->fields();
                }
                shift @header_cols_2dspl;
                while (my $row_2dspl = <$fh_2dspl>) {
                    my @columns;
                    if ($csv->parse($row_2dspl)) {
                        @columns = $csv->fields();
                    }
                    my $col_counter = 0;
                    foreach my $encoded_trait (@header_cols_2dspl) {
                        my $trait = $trait_name_encoder_rev{$encoded_trait};
                        my $plot_id = $columns[0];

                        my $plot_name = $plot_id_map{$plot_id};
                        my $value = $columns[$col_counter+1];
                        if (defined $value && $value ne '') {
                            $result_blup_spatial_data_altered_env->{$plot_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $env_effect_min_altered_env) {
                                $env_effect_min_altered_env = $value;
                            }
                            elsif ($value >= $env_effect_max_altered_env) {
                                $env_effect_max_altered_env = $value;
                            }

                            $env_effect_sum_altered_env += abs($value);
                            $env_effect_sum_square_altered_env = $env_effect_sum_square_altered_env + $value*$value;
                        }
                        $col_counter++;
                    }
                    $current_env_row_count++;
                }
            close($fh_2dspl);

            open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                print STDERR "Opened $stats_out_tempfile_residual\n";
                my $header_residual = <$fh_residual>;
                my @header_cols_residual;
                if ($csv->parse($header_residual)) {
                    @header_cols_residual = $csv->fields();
                }
                while (my $row = <$fh_residual>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $residual = $columns[1 + $_];
                        my $fitted = $columns[1 + $number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env->{$stock_name}->{$trait_name} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env += abs($residual);
                            $residual_sum_square_altered_env = $residual_sum_square_altered_env + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env->{$stock_name}->{$trait_name} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env = $model_sum_square_residual_altered_env + $residual*$residual;
                    }
                }
            close($fh_residual);

            open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                my $header_cv1 = <$fh_cv1>;
                my @header_cols_cv1;
                if ($csv->parse($header_cv1)) {
                    @header_cols_cv1 = $csv->fields();
                }
                while (my $row = <$fh_cv1>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env = $model_sum_square_cv1_altered_env + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv1);

            open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                my $header_cv2 = <$fh_cv2>;
                my @header_cols_cv2;
                if ($csv->parse($header_cv2)) {
                    @header_cols_cv2 = $csv->fields();
                }
                while (my $row = <$fh_cv2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env = $model_sum_square_cv2_altered_env + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv2);

            open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                my $header_cv3 = <$fh_cv3>;
                my @header_cols_cv3;
                if ($csv->parse($header_cv3)) {
                    @header_cols_cv3 = $csv->fields();
                }
                while (my $row = <$fh_cv3>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env = $model_sum_square_cv3_altered_env + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv3);

            open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                my $header_cv4 = <$fh_cv4>;
                my @header_cols_cv4;
                if ($csv->parse($header_cv4)) {
                    @header_cols_cv4 = $csv->fields();
                }
                while (my $row = <$fh_cv4>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env = $model_sum_square_cv4_altered_env + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv4);

            open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                my $header_cv5 = <$fh_cv5>;
                my @header_cols_cv5;
                if ($csv->parse($header_cv5)) {
                    @header_cols_cv5 = $csv->fields();
                }
                while (my $row = <$fh_cv5>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env = $model_sum_square_cv5_altered_env + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv5);

            open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                my $header_cv1_2 = <$fh_cv1_2>;
                my @header_cols_cv1_2;
                if ($csv->parse($header_cv1_2)) {
                    @header_cols_cv1_2 = $csv->fields();
                }
                while (my $row = <$fh_cv1_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env = $model_sum_square_cv1_2_altered_env + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv1_2);

            open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                my $header_cv2_2 = <$fh_cv2_2>;
                my @header_cols_cv2_2;
                if ($csv->parse($header_cv2_2)) {
                    @header_cols_cv2_2 = $csv->fields();
                }
                while (my $row = <$fh_cv2_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env = $model_sum_square_cv2_2_altered_env + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv2_2);

            open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                my $header_cv3_2 = <$fh_cv3_2>;
                my @header_cols_cv3_2;
                if ($csv->parse($header_cv3_2)) {
                    @header_cols_cv3_2 = $csv->fields();
                }
                while (my $row = <$fh_cv3_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env = $model_sum_square_cv3_2_altered_env + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv3_2);

            open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                my $header_cv4_2 = <$fh_cv4_2>;
                my @header_cols_cv4_2;
                if ($csv->parse($header_cv4_2)) {
                    @header_cols_cv4_2 = $csv->fields();
                }
                while (my $row = <$fh_cv4_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env = $model_sum_square_cv4_2_altered_env + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv4_2);

            open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                my $header_cv5_2 = <$fh_cv5_2>;
                my @header_cols_cv5_2;
                if ($csv->parse($header_cv5_2)) {
                    @header_cols_cv5_2 = $csv->fields();
                }
                while (my $row = <$fh_cv5_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env = $model_sum_square_cv5_2_altered_env + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv5_2);

            open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                print STDERR "Opened $stats_out_tempfile_varcomp\n";
                my $header_varcomp = <$fh_varcomp>;
                my @header_cols_varcomp;
                if ($csv->parse($header_varcomp)) {
                    @header_cols_varcomp = $csv->fields();
                }
                while (my $row = <$fh_varcomp>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    push @varcomp_altered_env, \@columns;
                }
            close($fh_varcomp);

            if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                $run_stats_fault = 1;
            }
        }

        if ($run_stats_fault == 1) {
            print STDERR "ERROR IN R CMD\n";
            return {error=>'Error in R! Try a larger tolerance'};
        }
    }
    elsif ($statistics_select eq 'sommer_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_pure_2dspl_genetic_blups') {
        my @encoded_traits = values %trait_name_encoder;
        foreach my $t (@encoded_traits) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };
            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;
                    my @header_cols;
                    if ($csv->parse($header)) {
                        @header_cols = $csv->fields();
                    }

                    while (my $row = <$fh>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $col_counter = 0;
                        foreach my $encoded_trait (@header_cols) {
                            if ($encoded_trait eq $t) {
                                my $trait = $trait_name_encoder_rev{$encoded_trait};
                                my $stock_id = $columns[0];

                                my $stock_name = $stock_info{$stock_id}->{uniquename};
                                my $value = $columns[$col_counter+1];
                                if (defined $value && $value ne '') {
                                    $result_blup_data_altered_env->{$stock_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                                    if ($value < $genetic_effect_min_altered_env) {
                                        $genetic_effect_min_altered_env = $value;
                                    }
                                    elsif ($value >= $genetic_effect_max_altered_env) {
                                        $genetic_effect_max_altered_env = $value;
                                    }

                                    $genetic_effect_sum_altered_env += abs($value);
                                    $genetic_effect_sum_square_altered_env = $genetic_effect_sum_square_altered_env + $value*$value;
                                }
                            }
                            $col_counter++;
                        }
                        $current_gen_row_count++;
                    }
                close($fh);

                open(my $fh_2dspl, '<', $stats_out_tempfile_2dspl) or die "Could not open file '$stats_out_tempfile_2dspl' $!";
                    print STDERR "Opened $stats_out_tempfile_2dspl\n";
                    my $header_2dspl = <$fh_2dspl>;
                    my @header_cols_2dspl;
                    if ($csv->parse($header_2dspl)) {
                        @header_cols_2dspl = $csv->fields();
                    }
                    shift @header_cols_2dspl;
                    while (my $row_2dspl = <$fh_2dspl>) {
                        my @columns;
                        if ($csv->parse($row_2dspl)) {
                            @columns = $csv->fields();
                        }
                        my $col_counter = 0;
                        foreach my $encoded_trait (@header_cols_2dspl) {
                            if ($encoded_trait eq $t) {
                                my $trait = $trait_name_encoder_rev{$encoded_trait};
                                my $plot_id = $columns[0];

                                my $plot_name = $plot_id_map{$plot_id};
                                my $value = $columns[$col_counter+1];
                                if (defined $value && $value ne '') {
                                    $result_blup_spatial_data_altered_env->{$plot_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                                    if ($value < $env_effect_min_altered_env) {
                                        $env_effect_min_altered_env = $value;
                                    }
                                    elsif ($value >= $env_effect_max_altered_env) {
                                        $env_effect_max_altered_env = $value;
                                    }

                                    $env_effect_sum_altered_env += abs($value);
                                    $env_effect_sum_square_altered_env = $env_effect_sum_square_altered_env + $value*$value;
                                }
                            }
                            $col_counter++;
                        }
                        $current_env_row_count++;
                    }
                close($fh_2dspl);

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env->{$stock_name}->{$trait_name} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env += abs($residual);
                            $residual_sum_square_altered_env = $residual_sum_square_altered_env + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env->{$stock_name}->{$trait_name} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env = $model_sum_square_residual_altered_env + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env = $model_sum_square_cv1_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env = $model_sum_square_cv2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env = $model_sum_square_cv3_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env = $model_sum_square_cv4_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env = $model_sum_square_cv5_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env = $model_sum_square_cv1_2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env = $model_sum_square_cv2_2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env = $model_sum_square_cv3_2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env = $model_sum_square_cv4_2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env = $model_sum_square_cv5_2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        push @varcomp_altered_env, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {

        print STDERR Dumper $statistics_cmd;
        my $status_r = system($statistics_cmd);

        my @pheno_var;
        open(my $fh_r, '<', $stats_out_param_tempfile) or die "Could not open file '$stats_out_param_tempfile' $!";
            print STDERR "Opened $stats_out_param_tempfile\n";

            while (my $row = <$fh_r>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @pheno_var, \@columns;
            }
        close($fh_r);
        # print STDERR Dumper \@pheno_var;

        my $stats_tempfile_2_basename = basename($stats_tempfile_2);
        my $grm_file_basename = basename($grm_rename_tempfile);
        my $permanent_environment_structure_file_basename = basename($permanent_environment_structure_tempfile);
        my $permanent_environment_structure_env_file_basename = basename($permanent_environment_structure_env_tempfile_mat);
        #my @phenotype_header = ("id", "plot_id", "replicate", "time", "replicate_time", "ind_replicate", @sorted_trait_names, "phenotype");

        my $effect_1_levels = scalar(@rep_time_factors);
        my $effect_grm_levels = scalar(@unique_accession_names);
        my $effect_pe_levels = scalar(@ind_rep_factors);

        print STDERR Dumper $stats_tempfile_2;
        my $data_cv_cmd = 'R -e "mat <- read.csv(\''.$stats_tempfile_2.'\', header=FALSE, sep=\' \');
        randomized_positions <- sample(length(mat[,1]));
        cv_step_size <- length(mat[,1]) %/% 5;
        cv_step_size_modulo <- length(mat[,1]) %% 5;
        mat_CV1 <- mat; mat_CV2 <- mat; mat_CV3 <- mat; mat_CV4 <- mat; mat_CV5 <- mat;
        mat_CV1[c(randomized_positions[1:cv_step_size]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV2[c(randomized_positions[(cv_step_size+1):(2*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV3[c(randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV4[c(randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV5[c(randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV1_2 <- mat; mat_CV2_2 <- mat; mat_CV3_2 <- mat; mat_CV4_2 <- mat; mat_CV5_2 <- mat;
        mat_CV1_2[c(randomized_positions[1:cv_step_size]),ncol(mat)] <- -999;
        mat_CV2_2[c(randomized_positions[(cv_step_size+1):(2*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV3_2[c(randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV4_2[c(randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV5_2[c(randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]),ncol(mat)] <- -999;
        write.table(mat, file=\''.$stats_tempfile_2.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV1, file=\''.$stats_out_cv1_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV2, file=\''.$stats_out_cv2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV3, file=\''.$stats_out_cv3_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV4, file=\''.$stats_out_cv4_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV5, file=\''.$stats_out_cv5_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV1_2, file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV2_2, file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV3_2, file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV4_2, file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV5_2, file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        "';
        my $status_cv_files = system($data_cv_cmd);

        my $stats_out_cv1_predict_tempfile_basename = basename($stats_out_cv1_predict_tempfile);
        my $stats_out_cv2_predict_tempfile_basename = basename($stats_out_cv2_predict_tempfile);
        my $stats_out_cv3_predict_tempfile_basename = basename($stats_out_cv3_predict_tempfile);
        my $stats_out_cv4_predict_tempfile_basename = basename($stats_out_cv4_predict_tempfile);
        my $stats_out_cv5_predict_tempfile_basename = basename($stats_out_cv5_predict_tempfile);

        my $stats_out_cv1_2_predict_tempfile_basename = basename($stats_out_cv1_2_predict_tempfile);
        my $stats_out_cv2_2_predict_tempfile_basename = basename($stats_out_cv2_2_predict_tempfile);
        my $stats_out_cv3_2_predict_tempfile_basename = basename($stats_out_cv3_2_predict_tempfile);
        my $stats_out_cv4_2_predict_tempfile_basename = basename($stats_out_cv4_2_predict_tempfile);
        my $stats_out_cv5_2_predict_tempfile_basename = basename($stats_out_cv5_2_predict_tempfile);

        @param_file_rows_2 = (
            '(CO)VARIANCES'
        );
        foreach (@pheno_var) {
            my $s = join ' ', @$_;
            push @param_file_rows_2, $s;
        }
        @param_file_rows_4 = (
            '(CO)VARIANCES'
        );
        foreach (@pheno_var) {
            my $s = join ' ', @$_;
            push @param_file_rows_4, $s;
        }

        open(my $Fp, ">", $parameter_tempfile) || die "Can't open file ".$parameter_tempfile;
            foreach ((@param_file_rows_data, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp "$_\n";
            }
        close($Fp);

        open(my $Fp_cv1, ">", $parameter_tempfile_cv1) || die "Can't open file ".$parameter_tempfile_cv1;
            foreach ((@param_file_rows_data_cv1, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv1 "$_\n";
            }
        close($Fp_cv1);

        open(my $Fp_cv2, ">", $parameter_tempfile_cv2) || die "Can't open file ".$parameter_tempfile_cv2;
            foreach ((@param_file_rows_data_cv2, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv2 "$_\n";
            }
        close($Fp_cv2);

        open(my $Fp_cv3, ">", $parameter_tempfile_cv3) || die "Can't open file ".$parameter_tempfile_cv3;
            foreach ((@param_file_rows_data_cv3, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv3 "$_\n";
            }
        close($Fp_cv3);

        open(my $Fp_cv4, ">", $parameter_tempfile_cv4) || die "Can't open file ".$parameter_tempfile_cv4;
            foreach ((@param_file_rows_data_cv4, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv4 "$_\n";
            }
        close($Fp_cv4);

        open(my $Fp_cv5, ">", $parameter_tempfile_cv5) || die "Can't open file ".$parameter_tempfile_cv5;
            foreach ((@param_file_rows_data_cv5, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv5 "$_\n";
            }
        close($Fp_cv5);

        my $command_name = '';
        if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'blupf90_grm_random_regression_dap_blups') {
            $command_name = 'blupf90';
        }
        elsif ($statistics_select eq 'airemlf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
            $command_name = 'airemlf90';
        }

        my $parameter_tempfile_basename = basename($parameter_tempfile);
        my $parameter_tempfile_cv1_basename = basename($parameter_tempfile_cv1);
        my $parameter_tempfile_cv2_basename = basename($parameter_tempfile_cv2);
        my $parameter_tempfile_cv3_basename = basename($parameter_tempfile_cv3);
        my $parameter_tempfile_cv4_basename = basename($parameter_tempfile_cv4);
        my $parameter_tempfile_cv5_basename = basename($parameter_tempfile_cv5);
        my $parameter_tempfile_cv1_2_basename = basename($parameter_tempfile_cv1_2);
        my $parameter_tempfile_cv2_2_basename = basename($parameter_tempfile_cv2_2);
        my $parameter_tempfile_cv3_2_basename = basename($parameter_tempfile_cv3_2);
        my $parameter_tempfile_cv4_2_basename = basename($parameter_tempfile_cv4_2);
        my $parameter_tempfile_cv5_2_basename = basename($parameter_tempfile_cv5_2);

        print STDERR Dumper $cmd_f90;
        my $status = system($cmd_f90);

        my @log_output_rows;
        open(my $fh_log, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
            print STDERR "Opened $stats_out_tempfile\n";
            while (my $row = <$fh_log>) {
                print STDERR $row;
                push @log_output_rows, $row;
            }
        close($fh_log);

        my $log_output = join '', @log_output_rows;
        my ($gen_var_string) = $log_output =~ /Genetic variance\(s\) for effect  2(.*?)correlations/gs;
        @rr_coeff_genetic_covariance_altered_env = split ' ', $gen_var_string;
        print STDERR Dumper \@rr_coeff_genetic_covariance_altered_env;
        my ($env_var_string) = $log_output =~ /Genetic variance\(s\) for effect  $legendre_order_number_env_var_pos(.*?)correlations/gs;
        @rr_coeff_env_covariance_altered_env = split ' ', $env_var_string;
        print STDERR Dumper \@rr_coeff_env_covariance_altered_env;
        my (@gen_cor_string) = $log_output =~ /correlations(.*?)eigenvectors/gs;
        @rr_coeff_genetic_correlation_altered_env = split ' ', $gen_cor_string[0];
        print STDERR Dumper \@rr_coeff_genetic_correlation_altered_env;
        @rr_coeff_env_correlation_altered_env = split ' ', $gen_cor_string[1];
        print STDERR Dumper \@rr_coeff_env_correlation_altered_env;
        my ($res_se_string) = $log_output =~ /SE for R(.*?)\* FINISHED \(AIREMLF90\)/gs;
        print STDERR Dumper $res_se_string;
        # $rr_residual_variance_altered_env = ($res_se_string**2)*$number_plots;
        $rr_residual_variance_altered_env = $res_se_string;
        print STDERR Dumper $rr_residual_variance_altered_env;

        @param_file_rows_6 = (
            '(CO)VARIANCES'
        );
        my $cov_gen_counter = 0;
        foreach my $i (0..$legendre_order_number) {
            my @cov_row;
            foreach my $j (0..$legendre_order_number) {
                push @cov_row, $rr_coeff_genetic_covariance_altered_env[$cov_gen_counter];
                $cov_gen_counter++;
            }
            my $s = join ' ', @cov_row;
            push @param_file_rows_6, $s;
        }

        @param_file_rows_7 = (
            '(CO)VARIANCES'
        );
        my $cov_env_counter = 0;
        foreach my $i (0..$legendre_order_number) {
            my @cov_row;
            foreach my $j (0..$legendre_order_number) {
                push @cov_row, $rr_coeff_env_covariance_altered_env[$cov_env_counter];
                $cov_env_counter++;
            }
            my $s = join ' ', @cov_row;
            push @param_file_rows_7, $s;
        }

        open(my $Fp_cv1_2, ">", $parameter_tempfile_cv1_2) || die "Can't open file ".$parameter_tempfile_cv1_2;
            foreach ((@param_file_rows_data_cv1, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv1_2 "$_\n";
            }
        close($Fp_cv1_2);

        open(my $Fp_cv2_2, ">", $parameter_tempfile_cv2_2) || die "Can't open file ".$parameter_tempfile_cv2_2;
            foreach ((@param_file_rows_data_cv2, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv2_2 "$_\n";
            }
        close($Fp_cv2_2);

        open(my $Fp_cv3_2, ">", $parameter_tempfile_cv3_2) || die "Can't open file ".$parameter_tempfile_cv3_2;
            foreach ((@param_file_rows_data_cv3, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv3_2 "$_\n";
            }
        close($Fp_cv3_2);

        open(my $Fp_cv4_2, ">", $parameter_tempfile_cv4_2) || die "Can't open file ".$parameter_tempfile_cv4_2;
            foreach ((@param_file_rows_data_cv4, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv4_2 "$_\n";
            }
        close($Fp_cv4_2);

        open(my $Fp_cv5_2, ">", $parameter_tempfile_cv5_2) || die "Can't open file ".$parameter_tempfile_cv5_2;
            foreach ((@param_file_rows_data_cv5, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv5_2 "$_\n";
            }
        close($Fp_cv5_2);

        my $q_time = "SELECT t.cvterm_id FROM cvterm as t JOIN cv ON(t.cv_id=cv.cv_id) WHERE t.name=? and cv.name=?;";
        my $h_time = $schema->storage->dbh()->prepare($q_time);

        $yhat_residual_tempfile = $tmp_stats_dir."/yhat_residual";
        open(my $fh_yhat_res, '<', $yhat_residual_tempfile) or die "Could not open file '$yhat_residual_tempfile' $!";
            print STDERR "Opened $yhat_residual_tempfile\n";

            my $pred_res_counter = 0;
            my $trait_counter = 0;
            while (my $row = <$fh_yhat_res>) {
                # print STDERR $row;
                my @vals = split ' ', $row;
                my $pred = $vals[0];
                my $residual = $vals[1];
                $model_sum_square_residual_altered_env = $model_sum_square_residual_altered_env + $residual*$residual;

                my $plot_name = $plot_id_count_map_reverse{$pred_res_counter};
                my $time = $time_count_map_reverse{$pred_res_counter};

                if (defined $residual && $residual ne '') {
                    $result_residual_data_altered_env->{$plot_name}->{$seen_times{$time}} = [$residual, $timestamp, $user_name, '', ''];
                    $residual_sum_altered_env += abs($residual);
                    $residual_sum_square_altered_env = $residual_sum_square_altered_env + $residual*$residual;
                }
                if (defined $pred && $pred ne '') {
                    $result_fitted_data_altered_env->{$plot_name}->{$seen_times{$time}} = [$pred, $timestamp, $user_name, '', ''];
                }

                $pred_res_counter++;
            }
        close($fh_yhat_res);

        $blupf90_solutions_tempfile = $tmp_stats_dir."/solutions";
        open(my $fh_sol, '<', $blupf90_solutions_tempfile) or die "Could not open file '$blupf90_solutions_tempfile' $!";
            print STDERR "Opened $blupf90_solutions_tempfile\n";

            my $head = <$fh_sol>;
            print STDERR $head;

            my $solution_file_counter = 0;
            my $grm_sol_counter = 0;
            my $grm_sol_trait_counter = 0;
            my $pe_sol_counter = 0;
            my $pe_sol_trait_counter = 0;
            while (defined(my $row = <$fh_sol>)) {
                # print STDERR $row;
                my @vals = split ' ', $row;
                my $level = $vals[2];
                my $value = $vals[3];
                if ($solution_file_counter < $effect_1_levels) {
                    $fixed_effects_altered_env{$solution_file_counter}->{$level} = $value;
                }
                elsif ($solution_file_counter < $effect_1_levels + $effect_grm_levels*($legendre_order_number+1)) {
                    my $accession_name = $accession_id_factor_map_reverse{$level};
                    if ($grm_sol_counter < $effect_grm_levels-1) {
                        $grm_sol_counter++;
                    }
                    else {
                        $grm_sol_counter = 0;
                        $grm_sol_trait_counter++;
                    }
                    if (defined $value && $value ne '') {
                        push @{$rr_genetic_coefficients_altered_env{$accession_name}}, $value;
                    }
                }
                else {
                    my $plot_name = $plot_id_factor_map_reverse{$level};
                    if ($pe_sol_counter < $effect_pe_levels-1) {
                        $pe_sol_counter++;
                    }
                    else {
                        $pe_sol_counter = 0;
                        $pe_sol_trait_counter++;
                    }
                    if (defined $value && $value ne '') {
                        push @{$rr_temporal_coefficients_altered_env{$plot_name}}, $value;
                    }
                }
                $solution_file_counter++;
            }
        close($fh_sol);

        # print STDERR Dumper \%rr_genetic_coefficients_altered;
        # print STDERR Dumper \%rr_temporal_coefficients_altered;

        open(my $Fgc, ">", $coeff_genetic_tempfile) || die "Can't open file ".$coeff_genetic_tempfile;

        while ( my ($accession_name, $coeffs) = each %rr_genetic_coefficients_altered_env) {
            my @line = ($accession_name, @$coeffs);
            my $line_string = join ',', @line;
            print $Fgc "$line_string\n";

            foreach my $t_i (0..20) {
                my $time = $t_i*5/100;
                my $time_rescaled = sprintf("%.2f", $time*($time_max - $time_min) + $time_min);

                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                my $time_term_string = '';
                if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {
                    $time_term_string = "GDD $time_rescaled";
                }
                elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
                    $time_term_string = "day $time_rescaled"
                }
                $h_time->execute($time_term_string, 'cxgn_time_ontology');
                my ($time_cvterm_id) = $h_time->fetchrow_array();

                if (!$time_cvterm_id) {
                    my $new_time_term = $schema->resultset("Cv::Cvterm")->create_with({
                       name => $time_term_string,
                       cv => 'cxgn_time_ontology'
                    });
                    $time_cvterm_id = $new_time_term->cvterm_id();
                }
                my $time_term_string_blup = SGN::Model::Cvterm::get_trait_from_cvterm_id($schema, $time_cvterm_id, 'extended');

                $result_blup_data_altered_env->{$accession_name}->{$time_term_string_blup} = [$value, $timestamp, $user_name, '', ''];
            }
        }
        close($Fgc);

        while ( my ($accession_name, $coeffs) = each %rr_genetic_coefficients_altered_env) {
            foreach my $time_term (@sorted_trait_names) {
                my $time = ($time_term - $time_min)/($time_max - $time_min);
                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                $result_blup_data_delta_altered_env->{$accession_name}->{$time_term} = [$value, $timestamp, $user_name, '', ''];

                if ($value < $genetic_effect_min_altered_env) {
                    $genetic_effect_min_altered_env = $value;
                }
                elsif ($value >= $genetic_effect_max_altered_env) {
                    $genetic_effect_max_altered_env = $value;
                }

                $genetic_effect_sum_altered_env += abs($value);
                $genetic_effect_sum_square_altered_env = $genetic_effect_sum_square_altered_env + $value*$value;
            }
        }

        open(my $Fpc, ">", $coeff_pe_tempfile) || die "Can't open file ".$coeff_pe_tempfile;

        while ( my ($plot_name, $coeffs) = each %rr_temporal_coefficients_altered_env) {
            my @line = ($plot_name, @$coeffs);
            my $line_string = join ',', @line;
            print $Fpc "$line_string\n";

            foreach my $t_i (0..20) {
                my $time = $t_i*5/100;
                my $time_rescaled = sprintf("%.2f", $time*($time_max - $time_min) + $time_min);

                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                my $time_term_string = '';
                if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {
                    $time_term_string = "GDD $time_rescaled";
                }
                elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
                    $time_term_string = "day $time_rescaled"
                }
                $h_time->execute($time_term_string, 'cxgn_time_ontology');
                my ($time_cvterm_id) = $h_time->fetchrow_array();

                if (!$time_cvterm_id) {
                    my $new_time_term = $schema->resultset("Cv::Cvterm")->create_with({
                       name => $time_term_string,
                       cv => 'cxgn_time_ontology'
                    });
                    $time_cvterm_id = $new_time_term->cvterm_id();
                }
                my $time_term_string_pe = SGN::Model::Cvterm::get_trait_from_cvterm_id($schema, $time_cvterm_id, 'extended');

                $result_blup_pe_data_altered_env->{$plot_name}->{$time_term_string_pe} = [$value, $timestamp, $user_name, '', ''];
            }
        }
        close($Fpc);

        while ( my ($plot_name, $coeffs) = each %rr_temporal_coefficients_altered_env) {
            foreach my $time_term (@sorted_trait_names) {
                my $time = ($time_term - $time_min)/($time_max - $time_min);
                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                $result_blup_pe_data_delta_altered_env->{$plot_name}->{$time_term} = [$value, $timestamp, $user_name, '', ''];

                if ($value < $env_effect_min_altered_env) {
                    $env_effect_min_altered_env = $value;
                }
                elsif ($value >= $env_effect_max_altered_env) {
                    $env_effect_max_altered_env = $value;
                }

                $env_effect_sum_altered_env += abs($value);
                $env_effect_sum_square_altered_env = $env_effect_sum_square_altered_env + $value*$value;
            }
        }

        if ($perform_cv) {
            my $cmd_f90_cv1 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv1_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv1;
            my $status_cv1 = system($cmd_f90_cv1);

            open(my $fh_log_cv1, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv1>) {
                    print STDERR $row;
                }
            close($fh_log_cv1);

            my $yhat_residual_tempfile_cv1 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv1, '<', $yhat_residual_tempfile_cv1) or die "Could not open file '$yhat_residual_tempfile_cv1' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv1\n";

                while (my $row = <$fh_yhat_res_cv1>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv1_altered_env = $model_sum_square_cv1_altered_env + $residual*$residual;
                }
            close($fh_yhat_res_cv1);

            my $cmd_f90_cv2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv2_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv2;
            my $status_cv2 = system($cmd_f90_cv2);

            open(my $fh_log_cv2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv2>) {
                    print STDERR $row;
                }
            close($fh_log_cv2);

            my $yhat_residual_tempfile_cv2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv2, '<', $yhat_residual_tempfile_cv2) or die "Could not open file '$yhat_residual_tempfile_cv2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv2\n";

                while (my $row = <$fh_yhat_res_cv2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv2_altered_env = $model_sum_square_cv2_altered_env + $residual*$residual;
                }
            close($fh_yhat_res_cv2);

            my $cmd_f90_cv3 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv3_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv3;
            my $status_cv3 = system($cmd_f90_cv3);

            open(my $fh_log_cv3, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv3>) {
                    print STDERR $row;
                }
            close($fh_log_cv3);

            my $yhat_residual_tempfile_cv3 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv3, '<', $yhat_residual_tempfile_cv3) or die "Could not open file '$yhat_residual_tempfile_cv3' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv3\n";

                while (my $row = <$fh_yhat_res_cv3>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv3_altered_env = $model_sum_square_cv3_altered_env + $residual*$residual;
                }
            close($fh_yhat_res_cv3);

            my $cmd_f90_cv4 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv4_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv4;
            my $status_cv4 = system($cmd_f90_cv4);

            open(my $fh_log_cv4, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv4>) {
                    print STDERR $row;
                }
            close($fh_log_cv4);

            my $yhat_residual_tempfile_cv4 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv4, '<', $yhat_residual_tempfile_cv4) or die "Could not open file '$yhat_residual_tempfile_cv4' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv4\n";

                while (my $row = <$fh_yhat_res_cv4>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv4_altered_env = $model_sum_square_cv4_altered_env + $residual*$residual;
                }
            close($fh_yhat_res_cv4);

            my $cmd_f90_cv5 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv5_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv5;
            my $status_cv5 = system($cmd_f90_cv5);

            open(my $fh_log_cv5, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv5>) {
                    print STDERR $row;
                }
            close($fh_log_cv5);

            my $yhat_residual_tempfile_cv5 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv5, '<', $yhat_residual_tempfile_cv5) or die "Could not open file '$yhat_residual_tempfile_cv5' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv5\n";

                while (my $row = <$fh_yhat_res_cv5>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv5_altered_env = $model_sum_square_cv5_altered_env + $residual*$residual;
                }
            close($fh_yhat_res_cv5);

            my $cmd_f90_cv1_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv1_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv1_2;
            my $status_cv1_2 = system($cmd_f90_cv1_2);

            open(my $fh_log_cv1_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv1_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv1_2);

            my $yhat_residual_tempfile_cv1_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv1_2, '<', $yhat_residual_tempfile_cv1_2) or die "Could not open file '$yhat_residual_tempfile_cv1_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv1_2\n";

                while (my $row = <$fh_yhat_res_cv1_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv1_2_altered_env = $model_sum_square_cv1_2_altered_env + $residual*$residual;
                }
            close($fh_yhat_res_cv1_2);

            my $cmd_f90_cv2_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv2_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv2_2;
            my $status_cv2_2 = system($cmd_f90_cv2_2);

            open(my $fh_log_cv2_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv2_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv2_2);

            my $yhat_residual_tempfile_cv2_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv2_2, '<', $yhat_residual_tempfile_cv2_2) or die "Could not open file '$yhat_residual_tempfile_cv2_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv2_2\n";

                while (my $row = <$fh_yhat_res_cv2_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv2_2_altered_env = $model_sum_square_cv2_2_altered_env + $residual*$residual;
                }
            close($fh_yhat_res_cv2_2);

            my $cmd_f90_cv3_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv3_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv3_2;
            my $status_cv3_2 = system($cmd_f90_cv3_2);

            open(my $fh_log_cv3_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv3_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv3_2);

            my $yhat_residual_tempfile_cv3_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv3_2, '<', $yhat_residual_tempfile_cv3_2) or die "Could not open file '$yhat_residual_tempfile_cv3_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv3_2\n";

                while (my $row = <$fh_yhat_res_cv3_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv3_2_altered_env = $model_sum_square_cv3_2_altered_env + $residual*$residual;
                }
            close($fh_yhat_res_cv3_2);

            my $cmd_f90_cv4_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv4_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv4_2;
            my $status_cv4_2 = system($cmd_f90_cv4_2);

            open(my $fh_log_cv4_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv4_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv4_2);

            my $yhat_residual_tempfile_cv4_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv4_2, '<', $yhat_residual_tempfile_cv4_2) or die "Could not open file '$yhat_residual_tempfile_cv4_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv4_2\n";

                while (my $row = <$fh_yhat_res_cv4_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv4_2_altered_env = $model_sum_square_cv4_2_altered_env + $residual*$residual;
                }
            close($fh_yhat_res_cv4_2);

            my $cmd_f90_cv5_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv5_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv5_2;
            my $status_cv5_2 = system($cmd_f90_cv5_2);

            open(my $fh_log_cv5_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv5_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv5_2);

            my $yhat_residual_tempfile_cv5_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv5_2, '<', $yhat_residual_tempfile_cv5_2) or die "Could not open file '$yhat_residual_tempfile_cv5_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv5_2\n";

                while (my $row = <$fh_yhat_res_cv5_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv5_2_altered_env = $model_sum_square_cv5_2_altered_env + $residual*$residual;
                }
            close($fh_yhat_res_cv5_2);
        }
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_spatial_genetic_blups') {
        foreach my $t (@sorted_trait_names) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;
                my @row_col_ordered_plots_names;

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        push @row_col_ordered_plots_names, $stock_name;
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env += abs($residual);
                            $residual_sum_square_altered_env = $residual_sum_square_altered_env + $residual*$residual;}
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env = $model_sum_square_residual_altered_env + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;

                    my $solution_file_counter = 0;
                    while (defined(my $row = <$fh>)) {
                        # print STDERR $row;
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $level = $columns[0];
                        my $value = $columns[1];
                        my $std = $columns[2];
                        my $z_ratio = $columns[3];
                        if (defined $value && $value ne '') {
                            if ($solution_file_counter < $row_number_span) {
                                # print STDERR "$level $value \n";
                            }
                            elsif ($solution_file_counter < $row_number_span + $number_accessions) {
                                my $stock_name = $accession_id_factor_map_reverse{$solution_file_counter - $row_number_span + 1};
                                $result_blup_data_altered_env->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $genetic_effect_min_altered_env) {
                                    $genetic_effect_min_altered_env = $value;
                                }
                                elsif ($value >= $genetic_effect_max_altered_env) {
                                    $genetic_effect_max_altered_env = $value;
                                }

                                $genetic_effect_sum_altered_env += abs($value);
                                $genetic_effect_sum_square_altered_env = $genetic_effect_sum_square_altered_env + $value*$value;

                                $current_gen_row_count++;
                            }
                            elsif ($solution_file_counter < $col_number_span + $row_number_span + $number_accessions) {
                                # print STDERR "$level $value \n";
                            }
                            else {
                                my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                                $result_blup_spatial_data_altered_env->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $env_effect_min_altered_env) {
                                    $env_effect_min_altered_env = $value;
                                }
                                elsif ($value >= $env_effect_max_altered_env) {
                                    $env_effect_max_altered_env = $value;
                                }

                                $env_effect_sum_altered_env += abs($value);
                                $env_effect_sum_square_altered_env = $env_effect_sum_square_altered_env + $value*$value;

                                $current_env_row_count++;
                            }
                        }
                        $solution_file_counter++;
                    }
                close($fh);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env = $model_sum_square_cv1_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env = $model_sum_square_cv2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env = $model_sum_square_cv3_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env = $model_sum_square_cv4_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env = $model_sum_square_cv5_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env = $model_sum_square_cv1_2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env = $model_sum_square_cv2_2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env = $model_sum_square_cv3_2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env = $model_sum_square_cv4_2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env = $model_sum_square_cv5_2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        $columns[0] = "trait:".$columns[0]."!trait_t".$t.":t".$t;
                        push @varcomp_altered_env, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_pure_spatial_genetic_blups') {
        $analysis_model_language = "R";

        $statistical_ontology_term = "Univariate linear mixed model 2D spline genetic BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000038"; #In the JS this is set to either Univariate linear mixed model 2D spline spatial BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000039

        $analysis_model_training_data_file_type = "nicksmixedmodelsanalytics_v1.01_asreml_grm_univariate_spatial_genetic_blups_phenotype_file";

        my @grm_old;
        open(my $fh_grm_old, '<', $grm_file) or die "Could not open file '$grm_file' $!";
            print STDERR "Opened $grm_file\n";

            while (my $row = <$fh_grm_old>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @grm_old, \@columns;
            }
        close($fh_grm_old);

        my %grm_hash_ordered;
        foreach (@grm_old) {
            my $l1 = $accession_id_factor_map{$_->[0]};
            my $l2 = $accession_id_factor_map{$_->[1]};
            my $val = sprintf("%.8f", $_->[2]);
            if ($l1 > $l2) {
                $grm_hash_ordered{$l1}->{$l2} = $val;
            }
            else {
                $grm_hash_ordered{$l2}->{$l1} = $val;
            }
        }

        open(my $fh_grm_new, '>', $grm_rename_tempfile) or die "Could not open file '$grm_rename_tempfile' $!";
            print STDERR "Opened $grm_rename_tempfile\n";

            foreach my $i (sort {$a <=> $b} keys %grm_hash_ordered) {
                my $v = $grm_hash_ordered{$i};
                foreach my $j (sort {$a <=> $b} keys %$v) {
                    my $val = $v->{$j};
                    print $fh_grm_new "$i $j $val\n";
                }
            }
        close($fh_grm_new);

        my @encoded_traits = values %trait_name_encoder;
        $number_traits = scalar(@sorted_trait_names);
        $number_accessions = scalar(@unique_accession_names);
        foreach my $t (@sorted_trait_names) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;
                my @row_col_ordered_plots_names;

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        push @row_col_ordered_plots_names, $stock_name;
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env += abs($residual);
                            $residual_sum_square_altered_env = $residual_sum_square_altered_env + $residual*$residual;}
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env = $model_sum_square_residual_altered_env + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;

                    my $solution_file_counter = 0;
                    while (defined(my $row = <$fh>)) {
                        # print STDERR $row;
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $level = $columns[0];
                        my $value = $columns[1];
                        my $std = $columns[2];
                        my $z_ratio = $columns[3];
                        if (defined $value && $value ne '') {
                            if ($solution_file_counter < $number_accessions) {
                                my $stock_name = $accession_id_factor_map_reverse{$solution_file_counter + 1};
                                $result_blup_data_altered_env->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $genetic_effect_min_altered_env) {
                                    $genetic_effect_min_altered_env = $value;
                                }
                                elsif ($value >= $genetic_effect_max_altered_env) {
                                    $genetic_effect_max_altered_env = $value;
                                }

                                $genetic_effect_sum_altered_env += abs($value);
                                $genetic_effect_sum_square_altered_env = $genetic_effect_sum_square_altered_env + $value*$value;

                                $current_gen_row_count++;
                            }
                            else {
                                my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                                $result_blup_spatial_data_altered_env->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $env_effect_min_altered_env) {
                                    $env_effect_min_altered_env = $value;
                                }
                                elsif ($value >= $env_effect_max_altered_env) {
                                    $env_effect_max_altered_env = $value;
                                }

                                $env_effect_sum_altered_env += abs($value);
                                $env_effect_sum_square_altered_env = $env_effect_sum_square_altered_env + $value*$value;

                                $current_env_row_count++;
                            }
                        }
                        $solution_file_counter++;
                    }
                close($fh);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env = $model_sum_square_cv1_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env = $model_sum_square_cv2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env = $model_sum_square_cv3_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env = $model_sum_square_cv4_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env = $model_sum_square_cv5_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env = $model_sum_square_cv1_2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env = $model_sum_square_cv2_2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env = $model_sum_square_cv3_2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env = $model_sum_square_cv4_2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env = $model_sum_square_cv5_2_altered_env + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        $columns[0] = "trait:".$columns[0]."!trait_t".$t.":t".$t;
                        push @varcomp_altered_env, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'asreml_grm_multivariate_spatial_genetic_blups') {
        # print STDERR Dumper $prepare_file_cv_cmd;
        # print STDERR Dumper $statistics_cmd;
        eval {
            my $status_prepare_file_cv2 = system($prepare_file_cv2_cmd);
            my $status_prepare_file_cv = system($prepare_file_cv_cmd);
            my $status = system($statistics_cmd);
            if ($perform_cv) {
                my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
            }
        };

        my $run_stats_fault = 0;
        if ($@) {
            print STDERR "R ERROR\n";
            print STDERR Dumper $@;
            $run_stats_fault = 1;
        }
        else {
            my $current_gen_row_count = 0;
            my $current_env_row_count = 0;
            my @row_col_ordered_plots_names;

            open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                print STDERR "Opened $stats_out_tempfile_residual\n";
                my $header_residual = <$fh_residual>;
                my @header_cols_residual;
                if ($csv->parse($header_residual)) {
                    @header_cols_residual = $csv->fields();
                }
                my $residual_file_counter_index = 0;
                my $residual_file_counter = 1;
                while (my $row = <$fh_residual>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    my $residual = $columns[1];
                    my $fitted = $columns[2];
                    my $stock_name = $plot_id_map{$stock_id};
                    push @row_col_ordered_plots_names, $stock_name;
                    my $t = $sorted_trait_names[$residual_file_counter_index];
                    if ($residual_file_counter == scalar(@unique_plot_names)) {
                        $residual_file_counter = 0;
                        $residual_file_counter_index++;
                    }
                    if (defined $residual && $residual ne '') {
                        $result_residual_data_altered_env->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                        $residual_sum_altered_env += abs($residual);
                        $residual_sum_square_altered_env = $residual_sum_square_altered_env + $residual*$residual;
                    }
                    if (defined $fitted && $fitted ne '') {
                        $result_fitted_data_altered_env->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                    }
                    $model_sum_square_residual_altered_env = $model_sum_square_residual_altered_env + $residual*$residual;

                    $residual_file_counter++;
                }
            close($fh_residual);

            open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                my $header = <$fh>;
                my @header_cols;
                if ($csv->parse($header)) {
                    @header_cols = $csv->fields();
                }

                my $solution_file_counter = 0;
                my $solution_file_g_counter = 1;
                my $solution_file_p_counter = 1;
                my $solution_file_counter_g_index = 0;
                my $solution_file_counter_p_index = 0;
                while (defined(my $row = <$fh>)) {
                    # print STDERR $row;
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $level = $columns[0];
                    my $value = $columns[1];
                    my $std = $columns[2];
                    my $z_ratio = $columns[3];
                    if (defined $value && $value ne '') {
                        if ($solution_file_counter < $number_accessions*$number_traits) {
                            my $t = $sorted_trait_names[$solution_file_counter_g_index];
                            if ($solution_file_g_counter == $number_accessions) {
                                $solution_file_g_counter = 0;
                                $solution_file_counter_g_index++;
                            }

                            my $stock_name = $accession_id_factor_map_reverse{$solution_file_g_counter+1};
                            $result_blup_data_altered_env->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $genetic_effect_min_altered_env) {
                                $genetic_effect_min_altered_env = $value;
                            }
                            elsif ($value >= $genetic_effect_max_altered_env) {
                                $genetic_effect_max_altered_env = $value;
                            }

                            $genetic_effect_sum_altered_env += abs($value);
                            $genetic_effect_sum_square_altered_env = $genetic_effect_sum_square_altered_env + $value*$value;

                            $solution_file_g_counter++;
                            $current_gen_row_count++;
                        }
                        else {
                            my $t = $sorted_trait_names[$solution_file_counter_p_index];
                            if ($solution_file_p_counter == scalar(@unique_plot_names)) {
                                $solution_file_p_counter = 0;
                                $solution_file_counter_p_index++;
                            }

                            my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                            $result_blup_spatial_data_altered_env->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $env_effect_min_altered_env) {
                                $env_effect_min_altered_env = $value;
                            }
                            elsif ($value >= $env_effect_max_altered_env) {
                                $env_effect_max_altered_env = $value;
                            }

                            $env_effect_sum_altered_env += abs($value);
                            $env_effect_sum_square_altered_env = $env_effect_sum_square_altered_env + $value*$value;

                            $solution_file_p_counter++;
                            $current_env_row_count++;
                        }
                    }
                    $solution_file_counter++;
                }
            close($fh);

            open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                my $header_cv1 = <$fh_cv1>;
                my @header_cols_cv1;
                if ($csv->parse($header_cv1)) {
                    @header_cols_cv1 = $csv->fields();
                }
                while (my $row = <$fh_cv1>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv1_altered_env = $model_sum_square_cv1_altered_env + ($true_value-$fitted)**2;
                }
            close($fh_cv1);

            open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                my $header_cv2 = <$fh_cv2>;
                my @header_cols_cv2;
                if ($csv->parse($header_cv2)) {
                    @header_cols_cv2 = $csv->fields();
                }
                while (my $row = <$fh_cv2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv2_altered_env = $model_sum_square_cv2_altered_env + ($true_value-$fitted)**2;
                }
            close($fh_cv2);

            open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                my $header_cv3 = <$fh_cv3>;
                my @header_cols_cv3;
                if ($csv->parse($header_cv3)) {
                    @header_cols_cv3 = $csv->fields();
                }
                while (my $row = <$fh_cv3>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv3_altered_env = $model_sum_square_cv3_altered_env + ($true_value-$fitted)**2;
                }
            close($fh_cv3);

            open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                my $header_cv4 = <$fh_cv4>;
                my @header_cols_cv4;
                if ($csv->parse($header_cv4)) {
                    @header_cols_cv4 = $csv->fields();
                }
                while (my $row = <$fh_cv4>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv4_altered_env = $model_sum_square_cv4_altered_env + ($true_value-$fitted)**2;
                }
            close($fh_cv4);

            open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                my $header_cv5 = <$fh_cv5>;
                my @header_cols_cv5;
                if ($csv->parse($header_cv5)) {
                    @header_cols_cv5 = $csv->fields();
                }
                while (my $row = <$fh_cv5>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv5_altered_env = $model_sum_square_cv5_altered_env + ($true_value-$fitted)**2;
                }
            close($fh_cv5);

            open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                my $header_cv1_2 = <$fh_cv1_2>;
                my @header_cols_cv1_2;
                if ($csv->parse($header_cv1_2)) {
                    @header_cols_cv1_2 = $csv->fields();
                }
                while (my $row = <$fh_cv1_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv1_2_altered_env = $model_sum_square_cv1_2_altered_env + ($true_value-$fitted)**2;
                }
            close($fh_cv1_2);

            open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                my $header_cv2_2 = <$fh_cv2_2>;
                my @header_cols_cv2_2;
                if ($csv->parse($header_cv2_2)) {
                    @header_cols_cv2_2 = $csv->fields();
                }
                while (my $row = <$fh_cv2_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv2_2_altered_env = $model_sum_square_cv2_2_altered_env + ($true_value-$fitted)**2;
                }
            close($fh_cv2_2);

            open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                my $header_cv3_2 = <$fh_cv3_2>;
                my @header_cols_cv3_2;
                if ($csv->parse($header_cv3_2)) {
                    @header_cols_cv3_2 = $csv->fields();
                }
                while (my $row = <$fh_cv3_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv3_2_altered_env = $model_sum_square_cv3_2_altered_env + ($true_value-$fitted)**2;
                }
            close($fh_cv3_2);

            open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                my $header_cv4_2 = <$fh_cv4_2>;
                my @header_cols_cv4_2;
                if ($csv->parse($header_cv4_2)) {
                    @header_cols_cv4_2 = $csv->fields();
                }
                while (my $row = <$fh_cv4_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv4_2_altered_env = $model_sum_square_cv4_2_altered_env + ($true_value-$fitted)**2;
                }
            close($fh_cv4_2);

            open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                my $header_cv5_2 = <$fh_cv5_2>;
                my @header_cols_cv5_2;
                if ($csv->parse($header_cv5_2)) {
                    @header_cols_cv5_2 = $csv->fields();
                }
                while (my $row = <$fh_cv5_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv5_2_altered_env = $model_sum_square_cv5_2_altered_env + ($true_value-$fitted)**2;
                }
            close($fh_cv5_2);

            open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                print STDERR "Opened $stats_out_tempfile_varcomp\n";
                my $header_varcomp = <$fh_varcomp>;
                my @header_cols_varcomp;
                if ($csv->parse($header_varcomp)) {
                    @header_cols_varcomp = $csv->fields();
                }
                while (my $row = <$fh_varcomp>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    push @varcomp_altered_env, \@columns;
                }
            close($fh_varcomp);

            if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                $run_stats_fault = 1;
            }

            if ($run_stats_fault == 1) {
                print STDERR "ERROR IN R CMD\n";
                return {error=>'Error in R! Try a larger tolerance'};
            }
        }
    }
    print STDERR "ALTERED w/SIM_ENV linear $statistics_select GENETIC EFFECT SUM $genetic_effect_sum_altered_env\n";
    print STDERR "ALTERED w/SIM_ENV linear $statistics_select ENV EFFECT SUM $env_effect_sum_altered_env\n";
    print STDERR Dumper [$genetic_effect_min_altered_env, $genetic_effect_max_altered_env, $env_effect_min_altered_env, $env_effect_max_altered_env];

    my @model_sum_square_altered_env_cv_values = ($model_sum_square_cv1_altered_env, $model_sum_square_cv2_altered_env, $model_sum_square_cv3_altered_env, $model_sum_square_cv4_altered_env, $model_sum_square_cv5_altered_env);
    my @model_sum_square_altered_env_cv_2_values = ($model_sum_square_cv1_2_altered_env, $model_sum_square_cv2_2_altered_env, $model_sum_square_cv3_2_altered_env, $model_sum_square_cv4_2_altered_env, $model_sum_square_cv5_2_altered_env);
    print STDERR Dumper \@model_sum_square_altered_env_cv_values;
    print STDERR Dumper \@model_sum_square_altered_env_cv_2_values;
    my $model_sum_square_altered_env_cv_stat = Statistics::Descriptive::Full->new();
    $model_sum_square_altered_env_cv_stat->add_data(@model_sum_square_altered_env_cv_values);
    my $model_sum_square_altered_env_cv_result = {
        values => \@model_sum_square_altered_env_cv_values,
        variance => $model_sum_square_altered_env_cv_stat->variance(),
        mean => $model_sum_square_altered_env_cv_stat->mean()
    };
    my $model_sum_square_altered_env_cv_2_stat = Statistics::Descriptive::Full->new();
    $model_sum_square_altered_env_cv_2_stat->add_data(@model_sum_square_altered_env_cv_2_values);
    my $model_sum_square_altered_env_cv_2_result = {
        values => \@model_sum_square_altered_env_cv_2_values,
        variance => $model_sum_square_altered_env_cv_2_stat->variance(),
        mean => $model_sum_square_altered_env_cv_2_stat->mean()
    };

    $env_simulation = "random_1d_normal_gradient";

    my (%phenotype_data_altered_env_2, @data_matrix_altered_env_2, @data_matrix_phenotypes_altered_env_2);
    my $phenotype_min_altered_env_2 = 1000000000;
    my $phenotype_max_altered_env_2 = -1000000000;
    my $env_sim_min_2 = 10000000000000;
    my $env_sim_max_2 = -10000000000000;
    my %sim_data_2;
    my %sim_data_check_2_times;

    eval {
        my $row_number_adjustment = 0;
        my $time_count = 0;
        my @sim_data_env_first;
        foreach my $t (@sorted_trait_names) {
            foreach my $p (@unique_plot_names) {
                my $row_number = $stock_name_row_col{$p}->{row_number};
                my $col_number = $stock_name_row_col{$p}->{col_number};
                my $sim_val = eval $env_sim_exec->{$env_simulation};

                $sim_data_check_2_times{$t}->{$row_number}->{$col_number} = $sim_val;

                if ($sim_val < $env_sim_min_2) {
                    $env_sim_min_2 = $sim_val;
                }
                elsif ($sim_val >= $env_sim_max_2) {
                    $env_sim_max_2 = $sim_val;
                }

                if ($time_count == 0) {
                    push @sim_data_env_first, $sim_val;
                }
            }
            $time_count++;
        }

        if ($sim_env_change_over_time eq 'changing_gradual') {
            open(my $sim_change_f, ">", $sim_env_changing_mat_tempfile) || die "Can't open file ".$sim_env_changing_mat_tempfile;
                print STDERR "OPENING ENV SIM CHANGING GRADUAL $env_simulation CORR $sim_env_changing_mat_tempfile\n";
                foreach (@sim_data_env_first) {
                    print $sim_change_f $_."\n";
                }
            close($sim_change_f);

            my $sim_change_cmd = 'R -e "library(data.table);
            mat <- fread(\''.$sim_env_changing_mat_tempfile.'\', header=FALSE, sep=\'\t\');
            x1 <- mat\$V1;
            x234 <- scale(matrix( rnorm('.$number_plots.'* ('.$number_traits.'-1) ), ncol='.$number_traits.'-1 ));
            x1234 <- cbind(scale(x1),x234);
            c1 <- var(x1234);
            chol1 <- solve(chol(c1));
            newx <-  x1234 %*% chol1;
            zapsmall(cor(newx));
            all.equal( x1234[,1], newx[,1] );
            newc <- matrix(NA, ncol='.$number_traits.', nrow='.$number_traits.');
            diag(newc) <- rep(1,'.$number_traits.');
            newc[lower.tri(newc)] <- rep('.$correlation_between_times.',sum(seq(1,'.$number_traits.'-1)));
            newc[upper.tri(newc)] <- rep('.$correlation_between_times.',sum(seq(1,'.$number_traits.'-1)));
            eigen(newc);
            chol2 <- chol(newc);
            finalx <- newx %*% chol2 * sd(x1) + mean(x1);
            write.table(finalx, file=\''.$sim_env_changing_mat_full_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\'\t\');"';
            # print STDERR Dumper $sim_change_cmd;
            my $status_sim_change = system($sim_change_cmd);

            open(my $sim_change_res, '<', $sim_env_changing_mat_full_tempfile) or die "Could not open file '$sim_env_changing_mat_full_tempfile' $!";
                print STDERR "OPENING ENV SIM CHANGING GRADUAL VALUES $env_simulation CORR $sim_env_changing_mat_full_tempfile\n";
                my $sim_change_line_counter = 0;
                while (my $row = <$sim_change_res>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $p = $unique_plot_names[$sim_change_line_counter];
                    my $row_number = $stock_name_row_col{$p}->{row_number};
                    my $col_number = $stock_name_row_col{$p}->{col_number};

                    my $sim_change_trait_counter = 0;
                    foreach my $sim_val (@columns) {
                        my $t = $sorted_trait_names[$sim_change_trait_counter];
                        $sim_data_check_2_times{$t}->{$row_number}->{$col_number} = $sim_val;

                        if ($sim_val < $env_sim_min_2) {
                            $env_sim_min_2 = $sim_val;
                        }
                        elsif ($sim_val >= $env_sim_max_2) {
                            $env_sim_max_2 = $sim_val;
                        }

                        $sim_change_trait_counter++;
                    }
                    $sim_change_line_counter++;
                }
            close($sim_change_res);
        }
    };

    if ($permanent_environment_structure eq 'env_corr_structure') {
        my @sim_data_diff_2;
        my $num_plots = scalar(@unique_plot_names);
        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $plot_id = $stock_name_row_col{$p}->{obsunit_stock_id};
            my @diffs = ($plot_id);
            foreach my $t (@sorted_trait_names) {
                my $sim_val = $sim_data_check_2_times{$t}->{$row_number}->{$col_number};
                foreach my $r (@seen_rows_ordered) {
                    foreach my $c (@seen_cols_ordered) {
                        my $v = $sim_data_check_2_times{$t}->{$r}->{$c};
                        push @diffs, $sim_val - $v;
                    }
                }
            }
            push @sim_data_diff_2, \@diffs;
        }

        open(my $pe_pheno_f, ">", $permanent_environment_structure_env_tempfile) || die "Can't open file ".$permanent_environment_structure_env_tempfile;
            print STDERR "OPENING PERMANENT ENVIRONMENT ENV $env_simulation CORR $permanent_environment_structure_env_tempfile\n";
            foreach (@sim_data_diff_2) {
                my $line = join "\t", @$_;
                print $pe_pheno_f $line."\n";
            }
        close($pe_pheno_f);

        my $pe_rel_cmd = 'R -e "library(lme4); library(data.table);
        mat_agg <- fread(\''.$permanent_environment_structure_env_tempfile.'\', header=FALSE, sep=\'\t\');
        mat_pheno <- mat_agg[,2:ncol(mat_agg)];
        a <- data.matrix(mat_pheno) - (matrix(rep(1,'.$num_plots.'*'.$num_plots.'), nrow='.$num_plots.') %*% data.matrix(mat_pheno))/'.$num_plots.';
        cor_mat <- a %*% t(a);
        rownames(cor_mat) <- data.matrix(mat_agg[,1]);
        colnames(cor_mat) <- data.matrix(mat_agg[,1]);
        range01 <- function(x){(x-min(x))/(max(x)-min(x))};
        cor_mat <- range01(cor_mat);
        write.table(cor_mat, file=\''.$permanent_environment_structure_env_tempfile2.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');"';
        # print STDERR Dumper $pe_rel_cmd;
        my $status_pe_rel = system($pe_rel_cmd);

        my %rel_pe_result_hash;
        open(my $pe_rel_res, '<', $permanent_environment_structure_env_tempfile2) or die "Could not open file '$permanent_environment_structure_env_tempfile2' $!";
            print STDERR "Opened PERMANENT ENV $env_simulation CORR FILE $permanent_environment_structure_env_tempfile2\n";
            my $header_row = <$pe_rel_res>;
            my @header;
            if ($csv->parse($header_row)) {
                @header = $csv->fields();
            }

            while (my $row = <$pe_rel_res>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                my $stock_id1 = $columns[0];
                my $counter = 1;
                foreach my $stock_id2 (@header) {
                    my $val = $columns[$counter];
                    $rel_pe_result_hash{$stock_id1}->{$stock_id2} = $val;
                    $counter++;
                }
            }
        close($pe_rel_res);

        my $data_rel_pe = '';
        my %result_hash_pe;
        foreach my $s (sort { $a <=> $b } @plot_ids_ordered) {
            foreach my $r (sort { $a <=> $b } @plot_ids_ordered) {
                my $s_factor = $stock_name_row_col{$plot_id_map{$s}}->{plot_id_factor};
                my $r_factor = $stock_name_row_col{$plot_id_map{$r}}->{plot_id_factor};
                if (!exists($result_hash_pe{$s_factor}->{$r_factor}) && !exists($result_hash_pe{$r_factor}->{$s_factor})) {
                    $result_hash_pe{$s_factor}->{$r_factor} = $rel_pe_result_hash{$s}->{$r};
                }
            }
        }
        foreach my $r (sort { $a <=> $b } keys %result_hash_pe) {
            foreach my $s (sort { $a <=> $b } keys %{$result_hash_pe{$r}}) {
                my $val = $result_hash_pe{$r}->{$s};
                if (defined $val and length $val) {
                    $data_rel_pe .= "$r\t$s\t$val\n";
                }
            }
        }

        open(my $pe_rel_out, ">", $permanent_environment_structure_env_tempfile_mat) || die "Can't open file ".$permanent_environment_structure_env_tempfile_mat;
            print STDERR "Opened PERMANENT ENV $env_simulation CORR FILE 3col $permanent_environment_structure_env_tempfile_mat\n";
            print $pe_rel_out $data_rel_pe;
        close($pe_rel_out);
    }

    print STDERR "ADD SIMULATED ENV TO ALTERED PHENO random_1d_normal_gradient\n";
    print STDERR Dumper [$env_sim_min_2, $env_sim_max_2];
    if ($statistics_select eq 'sommer_grm_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_genetic_blups' || $statistics_select eq 'sommer_grm_spatial_pure_2dspl_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_pure_2dspl_genetic_blups') {

        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};
            my @row = ($replicate, $block, "S".$germplasm_stock_id, $obsunit_stock_id, $row_number, $col_number, $row_number, $col_number);

            foreach my $t (@sorted_trait_names) {
                if (defined($phenotype_data_altered{$p}->{$t})) {
                    my $new_val = $phenotype_data_altered{$p}->{$t} + 0;
                    my $sim_val = $sim_data_check_2_times{$t}->{$row_number}->{$col_number};
                    $sim_val = (($sim_val - $env_sim_min_2)/($env_sim_max_2 - $env_sim_min_2))*$env_variance_percent;
                    $new_val += $sim_val;

                    if ($new_val < $phenotype_min_altered_env_2) {
                        $phenotype_min_altered_env_2 = $new_val;
                    }
                    elsif ($new_val >= $phenotype_max_altered_env_2) {
                        $phenotype_max_altered_env_2 = $new_val;
                    }

                    $sim_data_2{$p}->{$t} = $sim_val;
                    $phenotype_data_altered_env_2{$p}->{$t} = $new_val;
                    push @row, $new_val;
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, 'NA';
                }
            }
            push @data_matrix_altered_env_2, \@row;
        }

        open(my $F, ">", $stats_tempfile) || die "Can't open file ".$stats_tempfile;
            print $F $header_string."\n";
            foreach (@data_matrix_altered_env_2) {
                my $line = join ',', @$_;
                print $F "$line\n";
            }
        close($F);
    }
    elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {

        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};

            my @data_matrix_phenotypes_row;
            my $current_trait_index = 0;
            foreach my $t (@sorted_trait_names) {
                my @row = (
                    $accession_id_factor_map{$germplasm_stock_id},
                    $obsunit_stock_id,
                    $replicate,
                    $t,
                    $plot_rep_time_factor_map{$obsunit_stock_id}->{$replicate}->{$t},
                    $stock_row_col{$obsunit_stock_id}->{plot_id_factor}
                );

                my $polys = $polynomial_map{$t};
                push @row, @$polys;

                if (defined($phenotype_data_altered{$p}->{$t})) {
                    if ($use_area_under_curve) {
                        my $val = 0;
                        foreach my $counter (0..$current_trait_index) {
                            if ($counter == 0) {
                                $val = $val + $phenotype_data_altered{$p}->{$sorted_trait_names[$counter]} + 0;
                            }
                            else {
                                my $t1 = $sorted_trait_names[$counter-1];
                                my $t2 = $sorted_trait_names[$counter];
                                my $p1 = $phenotype_data_altered{$p}->{$t1} + 0;
                                my $p2 = $phenotype_data_altered{$p}->{$t2} + 0;
                                my $neg = 1;
                                my $min_val = $p1;
                                if ($p2 < $p1) {
                                    $neg = -1;
                                    $min_val = $p2;
                                }
                                $val = $val + (($neg*($p2-$p1)*($t2-$t1))/2)+($t2-$t1)*$min_val;
                            }
                        }

                        my $sim_val = eval $sim_data_check_2_times{$t}->{$row_number}->{$col_number};
                        $sim_val = (($sim_val - $env_sim_min_2)/($env_sim_max_2 - $env_sim_min_2))*$env_variance_percent;
                        $val += $sim_val;

                        if ($val < $phenotype_min_altered_env_2) {
                            $phenotype_min_altered_env_2 = $val;
                        }
                        elsif ($val >= $phenotype_max_altered_env_2) {
                            $phenotype_max_altered_env_2 = $val;
                        }

                        $sim_data_2{$p}->{$t} = $sim_val;
                        $phenotype_data_altered_env_2{$p}->{$t} = $val;
                        push @row, $val;
                        push @data_matrix_phenotypes_row, $val;
                    }
                    else {
                        my $val = $phenotype_data_altered{$p}->{$t} + 0;

                        my $sim_val = $sim_data_check_2_times{$t}->{$row_number}->{$col_number};
                        $sim_val = (($sim_val - $env_sim_min_2)/($env_sim_max_2 - $env_sim_min_2))*$env_variance_percent;
                        $val += $sim_val;

                        if ($val < $phenotype_min_altered_env_2) {
                            $phenotype_min_altered_env_2 = $val;
                        }
                        elsif ($val >= $phenotype_max_altered_env_2) {
                            $phenotype_max_altered_env_2 = $val;
                        }

                        $sim_data_2{$p}->{$t} = $sim_val;
                        $phenotype_data_altered_env_2{$p}->{$t} = $val;
                        push @row, $val;
                        push @data_matrix_phenotypes_row, $val;
                    }
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, '';
                    push @data_matrix_phenotypes_row, 'NA';
                }

                push @data_matrix_altered_env_2, \@row;
                push @data_matrix_phenotypes_altered_env_2, \@data_matrix_phenotypes_row;

                $current_trait_index++;
            }
        }

        open(my $F, ">", $stats_tempfile_2) || die "Can't open file ".$stats_tempfile_2;
            foreach (@data_matrix_altered_env_2) {
                my $line = join ' ', @$_;
                print $F "$line\n";
            }
        close($F);

        open(my $F2, ">", $stats_prep2_tempfile) || die "Can't open file ".$stats_prep2_tempfile;
            foreach (@data_matrix_phenotypes_altered_env_2) {
                my $line = join ',', @$_;
                print $F2 "$line\n";
            }
        close($F2);
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'asreml_grm_univariate_pure_spatial_genetic_blups' || $statistics_select eq 'asreml_grm_multivariate_spatial_genetic_blups') {
        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};

            my @row = (
                $germplasm_stock_id,
                $obsunit_stock_id,
                $replicate,
                $row_number,
                $col_number,
                $accession_id_factor_map{$germplasm_stock_id},
                $stock_row_col{$obsunit_stock_id}->{plot_id_factor}
            );

            foreach my $t (@sorted_trait_names) {
                if (defined($phenotype_data_altered{$p}->{$t})) {
                    my $new_val = $phenotype_data_altered{$p}->{$t} + 0;
                    my $sim_val = $sim_data_check_2_times{$t}->{$row_number}->{$col_number};
                    $sim_val = (($sim_val - $env_sim_min_2)/($env_sim_max_2 - $env_sim_min_2))*$env_variance_percent;
                    $new_val += $sim_val;

                    if ($new_val < $phenotype_min_altered_env_2) {
                        $phenotype_min_altered_env_2 = $new_val;
                    }
                    elsif ($new_val >= $phenotype_max_altered_env_2) {
                        $phenotype_max_altered_env_2 = $new_val;
                    }

                    $sim_data_2{$p}->{$t} = $sim_val;
                    $phenotype_data_altered_env_2{$p}->{$t} = $new_val;
                    push @row, $new_val;
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, '';
                }
            }
            push @data_matrix_altered_env_2, \@row;
        }

        open(my $F, ">", $stats_tempfile_2) || die "Can't open file ".$stats_tempfile_2;
            print $F $header_string."\n";
            foreach (@data_matrix_altered_env_2) {
                my $line = join ',', @$_;
                print $F "$line\n";
            }
        close($F);
    }

    print STDERR Dumper [$phenotype_min_altered_env_2, $phenotype_max_altered_env_2];

    my ($result_blup_data_altered_env_2, $result_blup_data_delta_altered_env_2, $result_blup_spatial_data_altered_env_2, $result_blup_pe_data_altered_env_2, $result_blup_pe_data_delta_altered_env_2, $result_residual_data_altered_env_2, $result_fitted_data_altered_env_2, %fixed_effects_altered_env_2, %rr_genetic_coefficients_altered_env_2, %rr_temporal_coefficients_altered_env_2);
    my (@rr_coeff_genetic_covariance_altered_env_2, @rr_coeff_env_covariance_altered_env_2, @rr_coeff_genetic_correlation_altered_env_2, @rr_coeff_env_correlation_altered_env_2, $rr_residual_variance_altered_env_2);
    my (@varcomp_altered_env_2);
    my $model_sum_square_residual_altered_env_2 = 0;
    my $model_sum_square_cv1_altered_env_2 = 0;
    my $model_sum_square_cv2_altered_env_2 = 0;
    my $model_sum_square_cv3_altered_env_2 = 0;
    my $model_sum_square_cv4_altered_env_2 = 0;
    my $model_sum_square_cv5_altered_env_2 = 0;
    my $model_sum_square_cv1_2_altered_env_2 = 0;
    my $model_sum_square_cv2_2_altered_env_2 = 0;
    my $model_sum_square_cv3_2_altered_env_2 = 0;
    my $model_sum_square_cv4_2_altered_env_2 = 0;
    my $model_sum_square_cv5_2_altered_env_2 = 0;
    my $genetic_effect_min_altered_env_2 = 1000000000;
    my $genetic_effect_max_altered_env_2 = -1000000000;
    my $env_effect_min_altered_env_2 = 1000000000;
    my $env_effect_max_altered_env_2 = -1000000000;
    my $genetic_effect_sum_square_altered_env_2 = 0;
    my $genetic_effect_sum_altered_env_2 = 0;
    my $env_effect_sum_square_altered_env_2 = 0;
    my $env_effect_sum_altered_env_2 = 0;
    my $residual_sum_square_altered_env_2 = 0;
    my $residual_sum_altered_env_2 = 0;

    print STDERR "RUN ENV ESTIMATE ON Altered Pheno With Sim Env random_1d_normal_gradient\n";
    if ($statistics_select eq 'sommer_grm_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_spatial_pure_2dspl_genetic_blups') {
        #print STDERR Dumper $prepare_file_cv_cmd;
        # print STDERR Dumper $statistics_cmd;
        eval {
            my $status_prepare_file_cv = system($prepare_file_cv_cmd);
            my $status_prepare_file_cv2 = system($prepare_file_cv2_cmd);
            my $status = system($statistics_cmd);
            if ($perform_cv) {
                my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
            }
        };
        my $run_stats_fault = 0;
        if ($@) {
            print STDERR "R ERROR\n";
            print STDERR Dumper $@;
            $run_stats_fault = 1;
        }
        else {
            my $current_gen_row_count = 0;
            my $current_env_row_count = 0;

            open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                my $header = <$fh>;
                my @header_cols;
                if ($csv->parse($header)) {
                    @header_cols = $csv->fields();
                }

                while (my $row = <$fh>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $col_counter = 0;
                    foreach my $encoded_trait (@header_cols) {
                        my $trait = $trait_name_encoder_rev{$encoded_trait};
                        my $stock_id = $columns[0];

                        my $stock_name = $stock_info{$stock_id}->{uniquename};
                        my $value = $columns[$col_counter+1];
                        if (defined $value && $value ne '') {
                            $result_blup_data_altered_env_2->{$stock_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $genetic_effect_min_altered_env_2) {
                                $genetic_effect_min_altered_env_2 = $value;
                            }
                            elsif ($value >= $genetic_effect_max_altered_env_2) {
                                $genetic_effect_max_altered_env_2 = $value;
                            }

                            $genetic_effect_sum_altered_env_2 += abs($value);
                            $genetic_effect_sum_square_altered_env_2 = $genetic_effect_sum_square_altered_env_2 + $value*$value;
                        }
                        $col_counter++;
                    }
                    $current_gen_row_count++;
                }
            close($fh);

            open(my $fh_2dspl, '<', $stats_out_tempfile_2dspl) or die "Could not open file '$stats_out_tempfile_2dspl' $!";
                print STDERR "Opened $stats_out_tempfile_2dspl\n";
                my $header_2dspl = <$fh_2dspl>;
                my @header_cols_2dspl;
                if ($csv->parse($header_2dspl)) {
                    @header_cols_2dspl = $csv->fields();
                }
                shift @header_cols_2dspl;
                while (my $row_2dspl = <$fh_2dspl>) {
                    my @columns;
                    if ($csv->parse($row_2dspl)) {
                        @columns = $csv->fields();
                    }
                    my $col_counter = 0;
                    foreach my $encoded_trait (@header_cols_2dspl) {
                        my $trait = $trait_name_encoder_rev{$encoded_trait};
                        my $plot_id = $columns[0];

                        my $plot_name = $plot_id_map{$plot_id};
                        my $value = $columns[$col_counter+1];
                        if (defined $value && $value ne '') {
                            $result_blup_spatial_data_altered_env_2->{$plot_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $env_effect_min_altered_env_2) {
                                $env_effect_min_altered_env_2 = $value;
                            }
                            elsif ($value >= $env_effect_max_altered_env_2) {
                                $env_effect_max_altered_env_2 = $value;
                            }

                            $env_effect_sum_altered_env_2 += abs($value);
                            $env_effect_sum_square_altered_env_2 = $env_effect_sum_square_altered_env_2 + $value*$value;
                        }
                        $col_counter++;
                    }
                    $current_env_row_count++;
                }
            close($fh_2dspl);

            open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                print STDERR "Opened $stats_out_tempfile_residual\n";
                my $header_residual = <$fh_residual>;
                my @header_cols_residual;
                if ($csv->parse($header_residual)) {
                    @header_cols_residual = $csv->fields();
                }
                while (my $row = <$fh_residual>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $residual = $columns[1 + $_];
                        my $fitted = $columns[1 + $number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_2->{$stock_name}->{$trait_name} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_2 += abs($residual);
                            $residual_sum_square_altered_env_2 = $residual_sum_square_altered_env_2 + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_2->{$stock_name}->{$trait_name} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_2 = $model_sum_square_residual_altered_env_2 + $residual*$residual;
                    }
                }
            close($fh_residual);

            open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                my $header_cv1 = <$fh_cv1>;
                my @header_cols_cv1;
                if ($csv->parse($header_cv1)) {
                    @header_cols_cv1 = $csv->fields();
                }
                while (my $row = <$fh_cv1>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_2 = $model_sum_square_cv1_altered_env_2 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv1);

            open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                my $header_cv2 = <$fh_cv2>;
                my @header_cols_cv2;
                if ($csv->parse($header_cv2)) {
                    @header_cols_cv2 = $csv->fields();
                }
                while (my $row = <$fh_cv2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_2 = $model_sum_square_cv2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv2);

            open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                my $header_cv3 = <$fh_cv3>;
                my @header_cols_cv3;
                if ($csv->parse($header_cv3)) {
                    @header_cols_cv3 = $csv->fields();
                }
                while (my $row = <$fh_cv3>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_2 = $model_sum_square_cv3_altered_env_2 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv3);

            open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                my $header_cv4 = <$fh_cv4>;
                my @header_cols_cv4;
                if ($csv->parse($header_cv4)) {
                    @header_cols_cv4 = $csv->fields();
                }
                while (my $row = <$fh_cv4>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_2 = $model_sum_square_cv4_altered_env_2 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv4);

            open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                my $header_cv5 = <$fh_cv5>;
                my @header_cols_cv5;
                if ($csv->parse($header_cv5)) {
                    @header_cols_cv5 = $csv->fields();
                }
                while (my $row = <$fh_cv5>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_2 = $model_sum_square_cv5_altered_env_2 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv5);

            open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                my $header_cv1_2 = <$fh_cv1_2>;
                my @header_cols_cv1_2;
                if ($csv->parse($header_cv1_2)) {
                    @header_cols_cv1_2 = $csv->fields();
                }
                while (my $row = <$fh_cv1_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_2 = $model_sum_square_cv1_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv1_2);

            open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                my $header_cv2_2 = <$fh_cv2_2>;
                my @header_cols_cv2_2;
                if ($csv->parse($header_cv2_2)) {
                    @header_cols_cv2_2 = $csv->fields();
                }
                while (my $row = <$fh_cv2_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_2 = $model_sum_square_cv2_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv2_2);

            open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                my $header_cv3_2 = <$fh_cv3_2>;
                my @header_cols_cv3_2;
                if ($csv->parse($header_cv3_2)) {
                    @header_cols_cv3_2 = $csv->fields();
                }
                while (my $row = <$fh_cv3_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_2 = $model_sum_square_cv3_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv3_2);

            open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                my $header_cv4_2 = <$fh_cv4_2>;
                my @header_cols_cv4_2;
                if ($csv->parse($header_cv4_2)) {
                    @header_cols_cv4_2 = $csv->fields();
                }
                while (my $row = <$fh_cv4_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_2 = $model_sum_square_cv4_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv4_2);

            open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                my $header_cv5_2 = <$fh_cv5_2>;
                my @header_cols_cv5_2;
                if ($csv->parse($header_cv5_2)) {
                    @header_cols_cv5_2 = $csv->fields();
                }
                while (my $row = <$fh_cv5_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_2 = $model_sum_square_cv5_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv5_2);

            open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                print STDERR "Opened $stats_out_tempfile_varcomp\n";
                my $header_varcomp = <$fh_varcomp>;
                my @header_cols_varcomp;
                if ($csv->parse($header_varcomp)) {
                    @header_cols_varcomp = $csv->fields();
                }
                while (my $row = <$fh_varcomp>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    push @varcomp_altered_env_2, \@columns;
                }
            close($fh_varcomp);

            if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                $run_stats_fault = 1;
            }
        }

        if ($run_stats_fault == 1) {
            print STDERR "ERROR IN R CMD\n";
            return {error=>'Error in R! Try a larger tolerance'};
        }
    }
    elsif ($statistics_select eq 'sommer_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_pure_2dspl_genetic_blups') {
        my @encoded_traits = values %trait_name_encoder;
        foreach my $t (@encoded_traits) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };
            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;
                    my @header_cols;
                    if ($csv->parse($header)) {
                        @header_cols = $csv->fields();
                    }

                    while (my $row = <$fh>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $col_counter = 0;
                        foreach my $encoded_trait (@header_cols) {
                            if ($encoded_trait eq $t) {
                                my $trait = $trait_name_encoder_rev{$encoded_trait};
                                my $stock_id = $columns[0];

                                my $stock_name = $stock_info{$stock_id}->{uniquename};
                                my $value = $columns[$col_counter+1];
                                if (defined $value && $value ne '') {
                                    $result_blup_data_altered_env_2->{$stock_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                                    if ($value < $genetic_effect_min_altered_env_2) {
                                        $genetic_effect_min_altered_env_2 = $value;
                                    }
                                    elsif ($value >= $genetic_effect_max_altered_env_2) {
                                        $genetic_effect_max_altered_env_2 = $value;
                                    }

                                    $genetic_effect_sum_altered_env_2 += abs($value);
                                    $genetic_effect_sum_square_altered_env_2 = $genetic_effect_sum_square_altered_env_2 + $value*$value;
                                }
                            }
                            $col_counter++;
                        }
                        $current_gen_row_count++;
                    }
                close($fh);

                open(my $fh_2dspl, '<', $stats_out_tempfile_2dspl) or die "Could not open file '$stats_out_tempfile_2dspl' $!";
                    print STDERR "Opened $stats_out_tempfile_2dspl\n";
                    my $header_2dspl = <$fh_2dspl>;
                    my @header_cols_2dspl;
                    if ($csv->parse($header_2dspl)) {
                        @header_cols_2dspl = $csv->fields();
                    }
                    shift @header_cols_2dspl;
                    while (my $row_2dspl = <$fh_2dspl>) {
                        my @columns;
                        if ($csv->parse($row_2dspl)) {
                            @columns = $csv->fields();
                        }
                        my $col_counter = 0;
                        foreach my $encoded_trait (@header_cols_2dspl) {
                            if ($encoded_trait eq $t) {
                                my $trait = $trait_name_encoder_rev{$encoded_trait};
                                my $plot_id = $columns[0];

                                my $plot_name = $plot_id_map{$plot_id};
                                my $value = $columns[$col_counter+1];
                                if (defined $value && $value ne '') {
                                    $result_blup_spatial_data_altered_env_2->{$plot_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                                    if ($value < $env_effect_min_altered_env_2) {
                                        $env_effect_min_altered_env_2 = $value;
                                    }
                                    elsif ($value >= $env_effect_max_altered_env_2) {
                                        $env_effect_max_altered_env_2 = $value;
                                    }

                                    $env_effect_sum_altered_env_2 += abs($value);
                                    $env_effect_sum_square_altered_env_2 = $env_effect_sum_square_altered_env_2 + $value*$value;
                                }
                            }
                            $col_counter++;
                        }
                        $current_env_row_count++;
                    }
                close($fh_2dspl);

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_2->{$stock_name}->{$trait_name} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_2 += abs($residual);
                            $residual_sum_square_altered_env_2 = $residual_sum_square_altered_env_2 + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_2->{$stock_name}->{$trait_name} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_2 = $model_sum_square_residual_altered_env_2 + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_2 = $model_sum_square_cv1_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_2 = $model_sum_square_cv2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_2 = $model_sum_square_cv3_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_2 = $model_sum_square_cv4_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_2 = $model_sum_square_cv5_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_2 = $model_sum_square_cv1_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_2 = $model_sum_square_cv2_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_2 = $model_sum_square_cv3_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_2 = $model_sum_square_cv4_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_2 = $model_sum_square_cv5_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        push @varcomp_altered_env_2, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {

        print STDERR Dumper $statistics_cmd;
        my $status_r = system($statistics_cmd);

        my @pheno_var;
        open(my $fh_r, '<', $stats_out_param_tempfile) or die "Could not open file '$stats_out_param_tempfile' $!";
            print STDERR "Opened $stats_out_param_tempfile\n";

            while (my $row = <$fh_r>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @pheno_var, \@columns;
            }
        close($fh_r);
        # print STDERR Dumper \@pheno_var;

        my $stats_tempfile_2_basename = basename($stats_tempfile_2);
        my $grm_file_basename = basename($grm_rename_tempfile);
        my $permanent_environment_structure_file_basename = basename($permanent_environment_structure_tempfile);
        my $permanent_environment_structure_env_file_basename = basename($permanent_environment_structure_env_tempfile_mat);
        #my @phenotype_header = ("id", "plot_id", "replicate", "time", "replicate_time", "ind_replicate", @sorted_trait_names, "phenotype");

        my $effect_1_levels = scalar(@rep_time_factors);
        my $effect_grm_levels = scalar(@unique_accession_names);
        my $effect_pe_levels = scalar(@ind_rep_factors);

        print STDERR Dumper $stats_tempfile_2;
        my $data_cv_cmd = 'R -e "mat <- read.csv(\''.$stats_tempfile_2.'\', header=FALSE, sep=\' \');
        randomized_positions <- sample(length(mat[,1]));
        cv_step_size <- length(mat[,1]) %/% 5;
        cv_step_size_modulo <- length(mat[,1]) %% 5;
        mat_CV1 <- mat; mat_CV2 <- mat; mat_CV3 <- mat; mat_CV4 <- mat; mat_CV5 <- mat;
        mat_CV1[c(randomized_positions[1:cv_step_size]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV2[c(randomized_positions[(cv_step_size+1):(2*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV3[c(randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV4[c(randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV5[c(randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV1_2 <- mat; mat_CV2_2 <- mat; mat_CV3_2 <- mat; mat_CV4_2 <- mat; mat_CV5_2 <- mat;
        mat_CV1_2[c(randomized_positions[1:cv_step_size]),ncol(mat)] <- -999;
        mat_CV2_2[c(randomized_positions[(cv_step_size+1):(2*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV3_2[c(randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV4_2[c(randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV5_2[c(randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]),ncol(mat)] <- -999;
        write.table(mat, file=\''.$stats_tempfile_2.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV1, file=\''.$stats_out_cv1_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV2, file=\''.$stats_out_cv2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV3, file=\''.$stats_out_cv3_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV4, file=\''.$stats_out_cv4_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV5, file=\''.$stats_out_cv5_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV1_2, file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV2_2, file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV3_2, file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV4_2, file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV5_2, file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        "';
        my $status_cv_files = system($data_cv_cmd);

        my $stats_out_cv1_predict_tempfile_basename = basename($stats_out_cv1_predict_tempfile);
        my $stats_out_cv2_predict_tempfile_basename = basename($stats_out_cv2_predict_tempfile);
        my $stats_out_cv3_predict_tempfile_basename = basename($stats_out_cv3_predict_tempfile);
        my $stats_out_cv4_predict_tempfile_basename = basename($stats_out_cv4_predict_tempfile);
        my $stats_out_cv5_predict_tempfile_basename = basename($stats_out_cv5_predict_tempfile);

        my $stats_out_cv1_2_predict_tempfile_basename = basename($stats_out_cv1_2_predict_tempfile);
        my $stats_out_cv2_2_predict_tempfile_basename = basename($stats_out_cv2_2_predict_tempfile);
        my $stats_out_cv3_2_predict_tempfile_basename = basename($stats_out_cv3_2_predict_tempfile);
        my $stats_out_cv4_2_predict_tempfile_basename = basename($stats_out_cv4_2_predict_tempfile);
        my $stats_out_cv5_2_predict_tempfile_basename = basename($stats_out_cv5_2_predict_tempfile);

        @param_file_rows_2 = (
            '(CO)VARIANCES'
        );
        foreach (@pheno_var) {
            my $s = join ' ', @$_;
            push @param_file_rows_2, $s;
        }
        @param_file_rows_4 = (
            '(CO)VARIANCES'
        );
        foreach (@pheno_var) {
            my $s = join ' ', @$_;
            push @param_file_rows_4, $s;
        }

        open(my $Fp, ">", $parameter_tempfile) || die "Can't open file ".$parameter_tempfile;
            foreach ((@param_file_rows_data, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp "$_\n";
            }
        close($Fp);

        open(my $Fp_cv1, ">", $parameter_tempfile_cv1) || die "Can't open file ".$parameter_tempfile_cv1;
            foreach ((@param_file_rows_data_cv1, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv1 "$_\n";
            }
        close($Fp_cv1);

        open(my $Fp_cv2, ">", $parameter_tempfile_cv2) || die "Can't open file ".$parameter_tempfile_cv2;
            foreach ((@param_file_rows_data_cv2, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv2 "$_\n";
            }
        close($Fp_cv2);

        open(my $Fp_cv3, ">", $parameter_tempfile_cv3) || die "Can't open file ".$parameter_tempfile_cv3;
            foreach ((@param_file_rows_data_cv3, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv3 "$_\n";
            }
        close($Fp_cv3);

        open(my $Fp_cv4, ">", $parameter_tempfile_cv4) || die "Can't open file ".$parameter_tempfile_cv4;
            foreach ((@param_file_rows_data_cv4, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv4 "$_\n";
            }
        close($Fp_cv4);

        open(my $Fp_cv5, ">", $parameter_tempfile_cv5) || die "Can't open file ".$parameter_tempfile_cv5;
            foreach ((@param_file_rows_data_cv5, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv5 "$_\n";
            }
        close($Fp_cv5);

        my $command_name = '';
        if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'blupf90_grm_random_regression_dap_blups') {
            $command_name = 'blupf90';
        }
        elsif ($statistics_select eq 'airemlf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
            $command_name = 'airemlf90';
        }

        my $parameter_tempfile_basename = basename($parameter_tempfile);
        my $parameter_tempfile_cv1_basename = basename($parameter_tempfile_cv1);
        my $parameter_tempfile_cv2_basename = basename($parameter_tempfile_cv2);
        my $parameter_tempfile_cv3_basename = basename($parameter_tempfile_cv3);
        my $parameter_tempfile_cv4_basename = basename($parameter_tempfile_cv4);
        my $parameter_tempfile_cv5_basename = basename($parameter_tempfile_cv5);
        my $parameter_tempfile_cv1_2_basename = basename($parameter_tempfile_cv1_2);
        my $parameter_tempfile_cv2_2_basename = basename($parameter_tempfile_cv2_2);
        my $parameter_tempfile_cv3_2_basename = basename($parameter_tempfile_cv3_2);
        my $parameter_tempfile_cv4_2_basename = basename($parameter_tempfile_cv4_2);
        my $parameter_tempfile_cv5_2_basename = basename($parameter_tempfile_cv5_2);

        print STDERR Dumper $cmd_f90;
        my $status = system($cmd_f90);

        my @log_output_rows;
        open(my $fh_log, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
            print STDERR "Opened $stats_out_tempfile\n";
            while (my $row = <$fh_log>) {
                print STDERR $row;
                push @log_output_rows, $row;
            }
        close($fh_log);

        my $log_output = join '', @log_output_rows;
        my ($gen_var_string) = $log_output =~ /Genetic variance\(s\) for effect  2(.*?)correlations/gs;
        @rr_coeff_genetic_covariance_altered_env_2 = split ' ', $gen_var_string;
        print STDERR Dumper \@rr_coeff_genetic_covariance_altered_env_2;
        my ($env_var_string) = $log_output =~ /Genetic variance\(s\) for effect  $legendre_order_number_env_var_pos(.*?)correlations/gs;
        @rr_coeff_env_covariance_altered_env_2 = split ' ', $env_var_string;
        print STDERR Dumper \@rr_coeff_env_covariance_altered_env_2;
        my (@gen_cor_string) = $log_output =~ /correlations(.*?)eigenvectors/gs;
        @rr_coeff_genetic_correlation_altered_env_2 = split ' ', $gen_cor_string[0];
        print STDERR Dumper \@rr_coeff_genetic_correlation_altered_env_2;
        @rr_coeff_env_correlation_altered_env_2 = split ' ', $gen_cor_string[1];
        print STDERR Dumper \@rr_coeff_env_correlation_altered_env_2;
        my ($res_se_string) = $log_output =~ /SE for R(.*?)\* FINISHED \(AIREMLF90\)/gs;
        print STDERR Dumper $res_se_string;
        # $rr_residual_variance_altered_env_2 = ($res_se_string**2)*$number_plots;
        $rr_residual_variance_altered_env_2 = $res_se_string;
        print STDERR Dumper $rr_residual_variance_altered_env_2;

        @param_file_rows_6 = (
            '(CO)VARIANCES'
        );
        my $cov_gen_counter = 0;
        foreach my $i (0..$legendre_order_number) {
            my @cov_row;
            foreach my $j (0..$legendre_order_number) {
                push @cov_row, $rr_coeff_genetic_covariance_altered_env_2[$cov_gen_counter];
                $cov_gen_counter++;
            }
            my $s = join ' ', @cov_row;
            push @param_file_rows_6, $s;
        }

        @param_file_rows_7 = (
            '(CO)VARIANCES'
        );
        my $cov_env_counter = 0;
        foreach my $i (0..$legendre_order_number) {
            my @cov_row;
            foreach my $j (0..$legendre_order_number) {
                push @cov_row, $rr_coeff_env_covariance_altered_env_2[$cov_env_counter];
                $cov_env_counter++;
            }
            my $s = join ' ', @cov_row;
            push @param_file_rows_7, $s;
        }

        open(my $Fp_cv1_2, ">", $parameter_tempfile_cv1_2) || die "Can't open file ".$parameter_tempfile_cv1_2;
            foreach ((@param_file_rows_data_cv1, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv1_2 "$_\n";
            }
        close($Fp_cv1_2);

        open(my $Fp_cv2_2, ">", $parameter_tempfile_cv2_2) || die "Can't open file ".$parameter_tempfile_cv2_2;
            foreach ((@param_file_rows_data_cv2, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv2_2 "$_\n";
            }
        close($Fp_cv2_2);

        open(my $Fp_cv3_2, ">", $parameter_tempfile_cv3_2) || die "Can't open file ".$parameter_tempfile_cv3_2;
            foreach ((@param_file_rows_data_cv3, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv3_2 "$_\n";
            }
        close($Fp_cv3_2);

        open(my $Fp_cv4_2, ">", $parameter_tempfile_cv4_2) || die "Can't open file ".$parameter_tempfile_cv4_2;
            foreach ((@param_file_rows_data_cv4, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv4_2 "$_\n";
            }
        close($Fp_cv4_2);

        open(my $Fp_cv5_2, ">", $parameter_tempfile_cv5_2) || die "Can't open file ".$parameter_tempfile_cv5_2;
            foreach ((@param_file_rows_data_cv5, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv5_2 "$_\n";
            }
        close($Fp_cv5_2);

        my $q_time = "SELECT t.cvterm_id FROM cvterm as t JOIN cv ON(t.cv_id=cv.cv_id) WHERE t.name=? and cv.name=?;";
        my $h_time = $schema->storage->dbh()->prepare($q_time);

        $yhat_residual_tempfile = $tmp_stats_dir."/yhat_residual";
        open(my $fh_yhat_res, '<', $yhat_residual_tempfile) or die "Could not open file '$yhat_residual_tempfile' $!";
            print STDERR "Opened $yhat_residual_tempfile\n";

            my $pred_res_counter = 0;
            my $trait_counter = 0;
            while (my $row = <$fh_yhat_res>) {
                # print STDERR $row;
                my @vals = split ' ', $row;
                my $pred = $vals[0];
                my $residual = $vals[1];
                $model_sum_square_residual_altered_env_2 = $model_sum_square_residual_altered_env_2 + $residual*$residual;

                my $plot_name = $plot_id_count_map_reverse{$pred_res_counter};
                my $time = $time_count_map_reverse{$pred_res_counter};

                if (defined $residual && $residual ne '') {
                    $result_residual_data_altered_env_2->{$plot_name}->{$seen_times{$time}} = [$residual, $timestamp, $user_name, '', ''];
                    $residual_sum_altered_env_2 += abs($residual);
                    $residual_sum_square_altered_env_2 = $residual_sum_square_altered_env_2 + $residual*$residual;
                }
                if (defined $pred && $pred ne '') {
                    $result_fitted_data_altered_env_2->{$plot_name}->{$seen_times{$time}} = [$pred, $timestamp, $user_name, '', ''];
                }

                $pred_res_counter++;
            }
        close($fh_yhat_res);

        $blupf90_solutions_tempfile = $tmp_stats_dir."/solutions";
        open(my $fh_sol, '<', $blupf90_solutions_tempfile) or die "Could not open file '$blupf90_solutions_tempfile' $!";
            print STDERR "Opened $blupf90_solutions_tempfile\n";

            my $head = <$fh_sol>;
            print STDERR $head;

            my $solution_file_counter = 0;
            my $grm_sol_counter = 0;
            my $grm_sol_trait_counter = 0;
            my $pe_sol_counter = 0;
            my $pe_sol_trait_counter = 0;
            while (defined(my $row = <$fh_sol>)) {
                # print STDERR $row;
                my @vals = split ' ', $row;
                my $level = $vals[2];
                my $value = $vals[3];
                if ($solution_file_counter < $effect_1_levels) {
                    $fixed_effects_altered_env_2{$solution_file_counter}->{$level} = $value;
                }
                elsif ($solution_file_counter < $effect_1_levels + $effect_grm_levels*($legendre_order_number+1)) {
                    my $accession_name = $accession_id_factor_map_reverse{$level};
                    if ($grm_sol_counter < $effect_grm_levels-1) {
                        $grm_sol_counter++;
                    }
                    else {
                        $grm_sol_counter = 0;
                        $grm_sol_trait_counter++;
                    }
                    if (defined $value && $value ne '') {
                        push @{$rr_genetic_coefficients_altered_env_2{$accession_name}}, $value;
                    }
                }
                else {
                    my $plot_name = $plot_id_factor_map_reverse{$level};
                    if ($pe_sol_counter < $effect_pe_levels-1) {
                        $pe_sol_counter++;
                    }
                    else {
                        $pe_sol_counter = 0;
                        $pe_sol_trait_counter++;
                    }
                    if (defined $value && $value ne '') {
                        push @{$rr_temporal_coefficients_altered_env_2{$plot_name}}, $value;
                    }
                }
                $solution_file_counter++;
            }
        close($fh_sol);

        # print STDERR Dumper \%rr_genetic_coefficients_altered;
        # print STDERR Dumper \%rr_temporal_coefficients_altered;

        open(my $Fgc, ">", $coeff_genetic_tempfile) || die "Can't open file ".$coeff_genetic_tempfile;

        while ( my ($accession_name, $coeffs) = each %rr_genetic_coefficients_altered_env_2) {
            my @line = ($accession_name, @$coeffs);
            my $line_string = join ',', @line;
            print $Fgc "$line_string\n";

            foreach my $t_i (0..20) {
                my $time = $t_i*5/100;
                my $time_rescaled = sprintf("%.2f", $time*($time_max - $time_min) + $time_min);

                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                my $time_term_string = '';
                if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {
                    $time_term_string = "GDD $time_rescaled";
                }
                elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
                    $time_term_string = "day $time_rescaled"
                }
                $h_time->execute($time_term_string, 'cxgn_time_ontology');
                my ($time_cvterm_id) = $h_time->fetchrow_array();

                if (!$time_cvterm_id) {
                    my $new_time_term = $schema->resultset("Cv::Cvterm")->create_with({
                       name => $time_term_string,
                       cv => 'cxgn_time_ontology'
                    });
                    $time_cvterm_id = $new_time_term->cvterm_id();
                }
                my $time_term_string_blup = SGN::Model::Cvterm::get_trait_from_cvterm_id($schema, $time_cvterm_id, 'extended');

                $result_blup_data_altered_env_2->{$accession_name}->{$time_term_string_blup} = [$value, $timestamp, $user_name, '', ''];
            }
        }
        close($Fgc);

        while ( my ($accession_name, $coeffs) = each %rr_genetic_coefficients_altered_env_2) {
            foreach my $time_term (@sorted_trait_names) {
                my $time = ($time_term - $time_min)/($time_max - $time_min);
                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                $result_blup_data_delta_altered_env_2->{$accession_name}->{$time_term} = [$value, $timestamp, $user_name, '', ''];

                if ($value < $genetic_effect_min_altered_env_2) {
                    $genetic_effect_min_altered_env_2 = $value;
                }
                elsif ($value >= $genetic_effect_max_altered_env_2) {
                    $genetic_effect_max_altered_env_2 = $value;
                }

                $genetic_effect_sum_altered_env_2 += abs($value);
                $genetic_effect_sum_square_altered_env_2 = $genetic_effect_sum_square_altered_env_2 + $value*$value;
            }
        }

        open(my $Fpc, ">", $coeff_pe_tempfile) || die "Can't open file ".$coeff_pe_tempfile;

        while ( my ($plot_name, $coeffs) = each %rr_temporal_coefficients_altered_env_2) {
            my @line = ($plot_name, @$coeffs);
            my $line_string = join ',', @line;
            print $Fpc "$line_string\n";

            foreach my $t_i (0..20) {
                my $time = $t_i*5/100;
                my $time_rescaled = sprintf("%.2f", $time*($time_max - $time_min) + $time_min);

                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                my $time_term_string = '';
                if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {
                    $time_term_string = "GDD $time_rescaled";
                }
                elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
                    $time_term_string = "day $time_rescaled"
                }
                $h_time->execute($time_term_string, 'cxgn_time_ontology');
                my ($time_cvterm_id) = $h_time->fetchrow_array();

                if (!$time_cvterm_id) {
                    my $new_time_term = $schema->resultset("Cv::Cvterm")->create_with({
                       name => $time_term_string,
                       cv => 'cxgn_time_ontology'
                    });
                    $time_cvterm_id = $new_time_term->cvterm_id();
                }
                my $time_term_string_pe = SGN::Model::Cvterm::get_trait_from_cvterm_id($schema, $time_cvterm_id, 'extended');

                $result_blup_pe_data_altered_env_2->{$plot_name}->{$time_term_string_pe} = [$value, $timestamp, $user_name, '', ''];
            }
        }
        close($Fpc);

        while ( my ($plot_name, $coeffs) = each %rr_temporal_coefficients_altered_env_2) {
            foreach my $time_term (@sorted_trait_names) {
                my $time = ($time_term - $time_min)/($time_max - $time_min);
                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                $result_blup_pe_data_delta_altered_env_2->{$plot_name}->{$time_term} = [$value, $timestamp, $user_name, '', ''];

                if ($value < $env_effect_min_altered_env_2) {
                    $env_effect_min_altered_env_2 = $value;
                }
                elsif ($value >= $env_effect_max_altered_env_2) {
                    $env_effect_max_altered_env_2 = $value;
                }

                $env_effect_sum_altered_env_2 += abs($value);
                $env_effect_sum_square_altered_env_2 = $env_effect_sum_square_altered_env_2 + $value*$value;
            }
        }

        if ($perform_cv) {
            my $cmd_f90_cv1 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv1_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv1;
            my $status_cv1 = system($cmd_f90_cv1);

            open(my $fh_log_cv1, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv1>) {
                    print STDERR $row;
                }
            close($fh_log_cv1);

            my $yhat_residual_tempfile_cv1 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv1, '<', $yhat_residual_tempfile_cv1) or die "Could not open file '$yhat_residual_tempfile_cv1' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv1\n";

                while (my $row = <$fh_yhat_res_cv1>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv1_altered_env_2 = $model_sum_square_cv1_altered_env_2 + $residual*$residual;
                }
            close($fh_yhat_res_cv1);

            my $cmd_f90_cv2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv2_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv2;
            my $status_cv2 = system($cmd_f90_cv2);

            open(my $fh_log_cv2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv2>) {
                    print STDERR $row;
                }
            close($fh_log_cv2);

            my $yhat_residual_tempfile_cv2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv2, '<', $yhat_residual_tempfile_cv2) or die "Could not open file '$yhat_residual_tempfile_cv2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv2\n";

                while (my $row = <$fh_yhat_res_cv2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv2_altered_env_2 = $model_sum_square_cv2_altered_env_2 + $residual*$residual;
                }
            close($fh_yhat_res_cv2);

            my $cmd_f90_cv3 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv3_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv3;
            my $status_cv3 = system($cmd_f90_cv3);

            open(my $fh_log_cv3, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv3>) {
                    print STDERR $row;
                }
            close($fh_log_cv3);

            my $yhat_residual_tempfile_cv3 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv3, '<', $yhat_residual_tempfile_cv3) or die "Could not open file '$yhat_residual_tempfile_cv3' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv3\n";

                while (my $row = <$fh_yhat_res_cv3>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv3_altered_env_2 = $model_sum_square_cv3_altered_env_2 + $residual*$residual;
                }
            close($fh_yhat_res_cv3);

            my $cmd_f90_cv4 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv4_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv4;
            my $status_cv4 = system($cmd_f90_cv4);

            open(my $fh_log_cv4, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv4>) {
                    print STDERR $row;
                }
            close($fh_log_cv4);

            my $yhat_residual_tempfile_cv4 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv4, '<', $yhat_residual_tempfile_cv4) or die "Could not open file '$yhat_residual_tempfile_cv4' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv4\n";

                while (my $row = <$fh_yhat_res_cv4>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv4_altered_env_2 = $model_sum_square_cv4_altered_env_2 + $residual*$residual;
                }
            close($fh_yhat_res_cv4);

            my $cmd_f90_cv5 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv5_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv5;
            my $status_cv5 = system($cmd_f90_cv5);

            open(my $fh_log_cv5, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv5>) {
                    print STDERR $row;
                }
            close($fh_log_cv5);

            my $yhat_residual_tempfile_cv5 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv5, '<', $yhat_residual_tempfile_cv5) or die "Could not open file '$yhat_residual_tempfile_cv5' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv5\n";

                while (my $row = <$fh_yhat_res_cv5>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv5_altered_env_2 = $model_sum_square_cv5_altered_env_2 + $residual*$residual;
                }
            close($fh_yhat_res_cv5);

            my $cmd_f90_cv1_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv1_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv1_2;
            my $status_cv1_2 = system($cmd_f90_cv1_2);

            open(my $fh_log_cv1_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv1_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv1_2);

            my $yhat_residual_tempfile_cv1_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv1_2, '<', $yhat_residual_tempfile_cv1_2) or die "Could not open file '$yhat_residual_tempfile_cv1_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv1_2\n";

                while (my $row = <$fh_yhat_res_cv1_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv1_2_altered_env_2 = $model_sum_square_cv1_2_altered_env_2 + $residual*$residual;
                }
            close($fh_yhat_res_cv1_2);

            my $cmd_f90_cv2_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv2_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv2_2;
            my $status_cv2_2 = system($cmd_f90_cv2_2);

            open(my $fh_log_cv2_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv2_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv2_2);

            my $yhat_residual_tempfile_cv2_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv2_2, '<', $yhat_residual_tempfile_cv2_2) or die "Could not open file '$yhat_residual_tempfile_cv2_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv2_2\n";

                while (my $row = <$fh_yhat_res_cv2_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv2_2_altered_env_2 = $model_sum_square_cv2_2_altered_env_2 + $residual*$residual;
                }
            close($fh_yhat_res_cv2_2);

            my $cmd_f90_cv3_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv3_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv3_2;
            my $status_cv3_2 = system($cmd_f90_cv3_2);

            open(my $fh_log_cv3_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv3_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv3_2);

            my $yhat_residual_tempfile_cv3_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv3_2, '<', $yhat_residual_tempfile_cv3_2) or die "Could not open file '$yhat_residual_tempfile_cv3_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv3_2\n";

                while (my $row = <$fh_yhat_res_cv3_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv3_2_altered_env_2 = $model_sum_square_cv3_2_altered_env_2 + $residual*$residual;
                }
            close($fh_yhat_res_cv3_2);

            my $cmd_f90_cv4_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv4_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv4_2;
            my $status_cv4_2 = system($cmd_f90_cv4_2);

            open(my $fh_log_cv4_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv4_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv4_2);

            my $yhat_residual_tempfile_cv4_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv4_2, '<', $yhat_residual_tempfile_cv4_2) or die "Could not open file '$yhat_residual_tempfile_cv4_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv4_2\n";

                while (my $row = <$fh_yhat_res_cv4_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv4_2_altered_env_2 = $model_sum_square_cv4_2_altered_env_2 + $residual*$residual;
                }
            close($fh_yhat_res_cv4_2);

            my $cmd_f90_cv5_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv5_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv5_2;
            my $status_cv5_2 = system($cmd_f90_cv5_2);

            open(my $fh_log_cv5_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv5_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv5_2);

            my $yhat_residual_tempfile_cv5_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv5_2, '<', $yhat_residual_tempfile_cv5_2) or die "Could not open file '$yhat_residual_tempfile_cv5_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv5_2\n";

                while (my $row = <$fh_yhat_res_cv5_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv5_2_altered_env_2 = $model_sum_square_cv5_2_altered_env_2 + $residual*$residual;
                }
            close($fh_yhat_res_cv5_2);
        }
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_spatial_genetic_blups') {
        foreach my $t (@sorted_trait_names) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;
                my @row_col_ordered_plots_names;

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        push @row_col_ordered_plots_names, $stock_name;
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_2->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_2 += abs($residual);
                            $residual_sum_square_altered_env_2 = $residual_sum_square_altered_env_2 + $residual*$residual;}
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_2->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_2 = $model_sum_square_residual_altered_env_2 + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;

                    my $solution_file_counter = 0;
                    while (defined(my $row = <$fh>)) {
                        # print STDERR $row;
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $level = $columns[0];
                        my $value = $columns[1];
                        my $std = $columns[2];
                        my $z_ratio = $columns[3];
                        if (defined $value && $value ne '') {
                            if ($solution_file_counter < $row_number_span) {
                                # print STDERR "$level $value \n";
                            }
                            elsif ($solution_file_counter < $row_number_span + $number_accessions) {
                                my $stock_name = $accession_id_factor_map_reverse{$solution_file_counter - $row_number_span + 1};
                                $result_blup_data_altered_env_2->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $genetic_effect_min_altered_env_2) {
                                    $genetic_effect_min_altered_env_2 = $value;
                                }
                                elsif ($value >= $genetic_effect_max_altered_env_2) {
                                    $genetic_effect_max_altered_env_2 = $value;
                                }

                                $genetic_effect_sum_altered_env_2 += abs($value);
                                $genetic_effect_sum_square_altered_env_2 = $genetic_effect_sum_square_altered_env_2 + $value*$value;

                                $current_gen_row_count++;
                            }
                            elsif ($solution_file_counter < $col_number_span + $row_number_span + $number_accessions) {
                                # print STDERR "$level $value \n";
                            }
                            else {
                                my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                                $result_blup_spatial_data_altered_env_2->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $env_effect_min_altered_env_2) {
                                    $env_effect_min_altered_env_2 = $value;
                                }
                                elsif ($value >= $env_effect_max_altered_env_2) {
                                    $env_effect_max_altered_env_2 = $value;
                                }

                                $env_effect_sum_altered_env_2 += abs($value);
                                $env_effect_sum_square_altered_env_2 = $env_effect_sum_square_altered_env_2 + $value*$value;

                                $current_env_row_count++;
                            }
                        }
                        $solution_file_counter++;
                    }
                close($fh);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_2 = $model_sum_square_cv1_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_2 = $model_sum_square_cv2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_2 = $model_sum_square_cv3_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_2 = $model_sum_square_cv4_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_2 = $model_sum_square_cv5_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_2 = $model_sum_square_cv1_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_2 = $model_sum_square_cv2_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_2 = $model_sum_square_cv3_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_2 = $model_sum_square_cv4_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_2 = $model_sum_square_cv5_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        $columns[0] = "trait:".$columns[0]."!trait_t".$t.":t".$t;
                        push @varcomp_altered_env_2, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_pure_spatial_genetic_blups') {
        $analysis_model_language = "R";

        $statistical_ontology_term = "Univariate linear mixed model 2D spline genetic BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000038"; #In the JS this is set to either Univariate linear mixed model 2D spline spatial BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000039

        $analysis_model_training_data_file_type = "nicksmixedmodelsanalytics_v1.01_asreml_grm_univariate_spatial_genetic_blups_phenotype_file";

        my @grm_old;
        open(my $fh_grm_old, '<', $grm_file) or die "Could not open file '$grm_file' $!";
            print STDERR "Opened $grm_file\n";

            while (my $row = <$fh_grm_old>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @grm_old, \@columns;
            }
        close($fh_grm_old);

        my %grm_hash_ordered;
        foreach (@grm_old) {
            my $l1 = $accession_id_factor_map{$_->[0]};
            my $l2 = $accession_id_factor_map{$_->[1]};
            my $val = sprintf("%.8f", $_->[2]);
            if ($l1 > $l2) {
                $grm_hash_ordered{$l1}->{$l2} = $val;
            }
            else {
                $grm_hash_ordered{$l2}->{$l1} = $val;
            }
        }

        open(my $fh_grm_new, '>', $grm_rename_tempfile) or die "Could not open file '$grm_rename_tempfile' $!";
            print STDERR "Opened $grm_rename_tempfile\n";

            foreach my $i (sort {$a <=> $b} keys %grm_hash_ordered) {
                my $v = $grm_hash_ordered{$i};
                foreach my $j (sort {$a <=> $b} keys %$v) {
                    my $val = $v->{$j};
                    print $fh_grm_new "$i $j $val\n";
                }
            }
        close($fh_grm_new);

        my @encoded_traits = values %trait_name_encoder;
        $number_traits = scalar(@sorted_trait_names);
        $number_accessions = scalar(@unique_accession_names);
        foreach my $t (@sorted_trait_names) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;
                my @row_col_ordered_plots_names;

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        push @row_col_ordered_plots_names, $stock_name;
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_2->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_2 += abs($residual);
                            $residual_sum_square_altered_env_2 = $residual_sum_square_altered_env_2 + $residual*$residual;}
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_2->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_2 = $model_sum_square_residual_altered_env_2 + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;

                    my $solution_file_counter = 0;
                    while (defined(my $row = <$fh>)) {
                        # print STDERR $row;
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $level = $columns[0];
                        my $value = $columns[1];
                        my $std = $columns[2];
                        my $z_ratio = $columns[3];
                        if (defined $value && $value ne '') {
                            if ($solution_file_counter < $number_accessions) {
                                my $stock_name = $accession_id_factor_map_reverse{$solution_file_counter + 1};
                                $result_blup_data_altered_env_2->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $genetic_effect_min_altered_env_2) {
                                    $genetic_effect_min_altered_env_2 = $value;
                                }
                                elsif ($value >= $genetic_effect_max_altered_env_2) {
                                    $genetic_effect_max_altered_env_2 = $value;
                                }

                                $genetic_effect_sum_altered_env_2 += abs($value);
                                $genetic_effect_sum_square_altered_env_2 = $genetic_effect_sum_square_altered_env_2 + $value*$value;

                                $current_gen_row_count++;
                            }
                            else {
                                my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                                $result_blup_spatial_data_altered_env_2->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $env_effect_min_altered_env_2) {
                                    $env_effect_min_altered_env_2 = $value;
                                }
                                elsif ($value >= $env_effect_max_altered_env_2) {
                                    $env_effect_max_altered_env_2 = $value;
                                }

                                $env_effect_sum_altered_env_2 += abs($value);
                                $env_effect_sum_square_altered_env_2 = $env_effect_sum_square_altered_env_2 + $value*$value;

                                $current_env_row_count++;
                            }
                        }
                        $solution_file_counter++;
                    }
                close($fh);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_2 = $model_sum_square_cv1_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_2 = $model_sum_square_cv2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_2 = $model_sum_square_cv3_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_2 = $model_sum_square_cv4_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_2 = $model_sum_square_cv5_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_2 = $model_sum_square_cv1_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_2 = $model_sum_square_cv2_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_2 = $model_sum_square_cv3_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_2 = $model_sum_square_cv4_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_2 = $model_sum_square_cv5_2_altered_env_2 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        $columns[0] = "trait:".$columns[0]."!trait_t".$t.":t".$t;
                        push @varcomp_altered_env_2, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'asreml_grm_multivariate_spatial_genetic_blups') {
        # print STDERR Dumper $prepare_file_cv_cmd;
        # print STDERR Dumper $statistics_cmd;
        eval {
            my $status_prepare_file_cv2 = system($prepare_file_cv2_cmd);
            my $status_prepare_file_cv = system($prepare_file_cv_cmd);
            my $status = system($statistics_cmd);
            if ($perform_cv) {
                my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
            }
        };

        my $run_stats_fault = 0;
        if ($@) {
            print STDERR "R ERROR\n";
            print STDERR Dumper $@;
            $run_stats_fault = 1;
        }
        else {
            my $current_gen_row_count = 0;
            my $current_env_row_count = 0;
            my @row_col_ordered_plots_names;

            open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                print STDERR "Opened $stats_out_tempfile_residual\n";
                my $header_residual = <$fh_residual>;
                my @header_cols_residual;
                if ($csv->parse($header_residual)) {
                    @header_cols_residual = $csv->fields();
                }
                my $residual_file_counter_index = 0;
                my $residual_file_counter = 1;
                while (my $row = <$fh_residual>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    my $residual = $columns[1];
                    my $fitted = $columns[2];
                    my $stock_name = $plot_id_map{$stock_id};
                    push @row_col_ordered_plots_names, $stock_name;
                    my $t = $sorted_trait_names[$residual_file_counter_index];
                    if ($residual_file_counter == scalar(@unique_plot_names)) {
                        $residual_file_counter = 0;
                        $residual_file_counter_index++;
                    }
                    if (defined $residual && $residual ne '') {
                        $result_residual_data_altered_env_2->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                        $residual_sum_altered_env_2 += abs($residual);
                        $residual_sum_square_altered_env_2 = $residual_sum_square_altered_env_2 + $residual*$residual;
                    }
                    if (defined $fitted && $fitted ne '') {
                        $result_fitted_data_altered_env_2->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                    }
                    $model_sum_square_residual_altered_env_2 = $model_sum_square_residual_altered_env_2 + $residual*$residual;

                    $residual_file_counter++;
                }
            close($fh_residual);

            open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                my $header = <$fh>;
                my @header_cols;
                if ($csv->parse($header)) {
                    @header_cols = $csv->fields();
                }

                my $solution_file_counter = 0;
                my $solution_file_g_counter = 1;
                my $solution_file_p_counter = 1;
                my $solution_file_counter_g_index = 0;
                my $solution_file_counter_p_index = 0;
                while (defined(my $row = <$fh>)) {
                    # print STDERR $row;
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $level = $columns[0];
                    my $value = $columns[1];
                    my $std = $columns[2];
                    my $z_ratio = $columns[3];
                    if (defined $value && $value ne '') {
                        if ($solution_file_counter < $number_accessions*$number_traits) {
                            my $t = $sorted_trait_names[$solution_file_counter_g_index];
                            if ($solution_file_g_counter == $number_accessions) {
                                $solution_file_g_counter = 0;
                                $solution_file_counter_g_index++;
                            }

                            my $stock_name = $accession_id_factor_map_reverse{$solution_file_g_counter+1};
                            $result_blup_data_altered_env_2->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $genetic_effect_min_altered_env_2) {
                                $genetic_effect_min_altered_env_2 = $value;
                            }
                            elsif ($value >= $genetic_effect_max_altered_env_2) {
                                $genetic_effect_max_altered_env_2 = $value;
                            }

                            $genetic_effect_sum_altered_env_2 += abs($value);
                            $genetic_effect_sum_square_altered_env_2 = $genetic_effect_sum_square_altered_env_2 + $value*$value;

                            $solution_file_g_counter++;
                            $current_gen_row_count++;
                        }
                        else {
                            my $t = $sorted_trait_names[$solution_file_counter_p_index];
                            if ($solution_file_p_counter == scalar(@unique_plot_names)) {
                                $solution_file_p_counter = 0;
                                $solution_file_counter_p_index++;
                            }

                            my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                            $result_blup_spatial_data_altered_env_2->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $env_effect_min_altered_env_2) {
                                $env_effect_min_altered_env_2 = $value;
                            }
                            elsif ($value >= $env_effect_max_altered_env_2) {
                                $env_effect_max_altered_env_2 = $value;
                            }

                            $env_effect_sum_altered_env_2 += abs($value);
                            $env_effect_sum_square_altered_env_2 = $env_effect_sum_square_altered_env_2 + $value*$value;

                            $solution_file_p_counter++;
                            $current_env_row_count++;
                        }
                    }
                    $solution_file_counter++;
                }
            close($fh);

            open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                my $header_cv1 = <$fh_cv1>;
                my @header_cols_cv1;
                if ($csv->parse($header_cv1)) {
                    @header_cols_cv1 = $csv->fields();
                }
                while (my $row = <$fh_cv1>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv1_altered_env_2 = $model_sum_square_cv1_altered_env_2 + ($true_value-$fitted)**2;
                }
            close($fh_cv1);

            open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                my $header_cv2 = <$fh_cv2>;
                my @header_cols_cv2;
                if ($csv->parse($header_cv2)) {
                    @header_cols_cv2 = $csv->fields();
                }
                while (my $row = <$fh_cv2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv2_altered_env_2 = $model_sum_square_cv2_altered_env_2 + ($true_value-$fitted)**2;
                }
            close($fh_cv2);

            open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                my $header_cv3 = <$fh_cv3>;
                my @header_cols_cv3;
                if ($csv->parse($header_cv3)) {
                    @header_cols_cv3 = $csv->fields();
                }
                while (my $row = <$fh_cv3>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv3_altered_env_2 = $model_sum_square_cv3_altered_env_2 + ($true_value-$fitted)**2;
                }
            close($fh_cv3);

            open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                my $header_cv4 = <$fh_cv4>;
                my @header_cols_cv4;
                if ($csv->parse($header_cv4)) {
                    @header_cols_cv4 = $csv->fields();
                }
                while (my $row = <$fh_cv4>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv4_altered_env_2 = $model_sum_square_cv4_altered_env_2 + ($true_value-$fitted)**2;
                }
            close($fh_cv4);

            open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                my $header_cv5 = <$fh_cv5>;
                my @header_cols_cv5;
                if ($csv->parse($header_cv5)) {
                    @header_cols_cv5 = $csv->fields();
                }
                while (my $row = <$fh_cv5>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv5_altered_env_2 = $model_sum_square_cv5_altered_env_2 + ($true_value-$fitted)**2;
                }
            close($fh_cv5);

            open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                my $header_cv1_2 = <$fh_cv1_2>;
                my @header_cols_cv1_2;
                if ($csv->parse($header_cv1_2)) {
                    @header_cols_cv1_2 = $csv->fields();
                }
                while (my $row = <$fh_cv1_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv1_2_altered_env_2 = $model_sum_square_cv1_2_altered_env_2 + ($true_value-$fitted)**2;
                }
            close($fh_cv1_2);

            open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                my $header_cv2_2 = <$fh_cv2_2>;
                my @header_cols_cv2_2;
                if ($csv->parse($header_cv2_2)) {
                    @header_cols_cv2_2 = $csv->fields();
                }
                while (my $row = <$fh_cv2_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv2_2_altered_env_2 = $model_sum_square_cv2_2_altered_env_2 + ($true_value-$fitted)**2;
                }
            close($fh_cv2_2);

            open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                my $header_cv3_2 = <$fh_cv3_2>;
                my @header_cols_cv3_2;
                if ($csv->parse($header_cv3_2)) {
                    @header_cols_cv3_2 = $csv->fields();
                }
                while (my $row = <$fh_cv3_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv3_2_altered_env_2 = $model_sum_square_cv3_2_altered_env_2 + ($true_value-$fitted)**2;
                }
            close($fh_cv3_2);

            open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                my $header_cv4_2 = <$fh_cv4_2>;
                my @header_cols_cv4_2;
                if ($csv->parse($header_cv4_2)) {
                    @header_cols_cv4_2 = $csv->fields();
                }
                while (my $row = <$fh_cv4_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv4_2_altered_env_2 = $model_sum_square_cv4_2_altered_env_2 + ($true_value-$fitted)**2;
                }
            close($fh_cv4_2);

            open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                my $header_cv5_2 = <$fh_cv5_2>;
                my @header_cols_cv5_2;
                if ($csv->parse($header_cv5_2)) {
                    @header_cols_cv5_2 = $csv->fields();
                }
                while (my $row = <$fh_cv5_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv5_2_altered_env_2 = $model_sum_square_cv5_2_altered_env_2 + ($true_value-$fitted)**2;
                }
            close($fh_cv5_2);

            open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                print STDERR "Opened $stats_out_tempfile_varcomp\n";
                my $header_varcomp = <$fh_varcomp>;
                my @header_cols_varcomp;
                if ($csv->parse($header_varcomp)) {
                    @header_cols_varcomp = $csv->fields();
                }
                while (my $row = <$fh_varcomp>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    push @varcomp_altered_env_2, \@columns;
                }
            close($fh_varcomp);

            if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                $run_stats_fault = 1;
            }

            if ($run_stats_fault == 1) {
                print STDERR "ERROR IN R CMD\n";
                return {error=>'Error in R! Try a larger tolerance'};
            }
        }
    }
    print STDERR "ALTERED w/SIM_ENV 1dn $statistics_select GENETIC EFFECT SUM $genetic_effect_sum_altered_env_2\n";
    print STDERR "ALTERED w/SIM_ENV 1dn $statistics_select ENV EFFECT SUM $env_effect_sum_altered_env_2\n";
    print STDERR Dumper [$genetic_effect_min_altered_env_2, $genetic_effect_max_altered_env_2, $env_effect_min_altered_env_2, $env_effect_max_altered_env_2];

    my @model_sum_square_altered_env_2_cv_values = ($model_sum_square_cv1_altered_env_2, $model_sum_square_cv2_altered_env_2, $model_sum_square_cv3_altered_env_2, $model_sum_square_cv4_altered_env_2, $model_sum_square_cv5_altered_env_2);
    my @model_sum_square_altered_env_2_cv_2_values = ($model_sum_square_cv1_2_altered_env_2, $model_sum_square_cv2_2_altered_env_2, $model_sum_square_cv3_2_altered_env_2, $model_sum_square_cv4_2_altered_env_2, $model_sum_square_cv5_2_altered_env_2);
    print STDERR Dumper \@model_sum_square_altered_env_2_cv_values;
    print STDERR Dumper \@model_sum_square_altered_env_2_cv_2_values;
    my $model_sum_square_altered_env_2_cv_stat = Statistics::Descriptive::Full->new();
    $model_sum_square_altered_env_2_cv_stat->add_data(@model_sum_square_altered_env_2_cv_values);
    my $model_sum_square_altered_env_cv_result_2 = {
        values => \@model_sum_square_altered_env_2_cv_values,
        variance => $model_sum_square_altered_env_2_cv_stat->variance(),
        mean => $model_sum_square_altered_env_2_cv_stat->mean()
    };
    my $model_sum_square_altered_env_2_cv_2_stat = Statistics::Descriptive::Full->new();
    $model_sum_square_altered_env_2_cv_2_stat->add_data(@model_sum_square_altered_env_2_cv_2_values);
    my $model_sum_square_altered_env_cv_2_result_2 = {
        values => \@model_sum_square_altered_env_2_cv_2_values,
        variance => $model_sum_square_altered_env_2_cv_2_stat->variance(),
        mean => $model_sum_square_altered_env_2_cv_2_stat->mean()
    };

    $env_simulation = "random_2d_normal_gradient";

    my (%phenotype_data_altered_env_3, @data_matrix_altered_env_3, @data_matrix_phenotypes_altered_env_3);
    my $phenotype_min_altered_env_3 = 1000000000;
    my $phenotype_max_altered_env_3 = -1000000000;
    my $env_sim_min_3 = 10000000000000;
    my $env_sim_max_3 = -10000000000000;
    my %sim_data_3;
    my %sim_data_check_3_times;

    eval {
        my $row_number_adjustment = 0;
        my $col_number_adjustment = 0;
        my $time_count = 0;
        my @sim_data_env_first;
        foreach my $t (@sorted_trait_names) {
            foreach my $p (@unique_plot_names) {
                my $row_number = $stock_name_row_col{$p}->{row_number};
                my $col_number = $stock_name_row_col{$p}->{col_number};
                my $sim_val = eval $env_sim_exec->{$env_simulation};

                $sim_data_check_3_times{$t}->{$row_number}->{$col_number} = $sim_val;

                if ($sim_val < $env_sim_min_3) {
                    $env_sim_min_3 = $sim_val;
                }
                elsif ($sim_val >= $env_sim_max_3) {
                    $env_sim_max_3 = $sim_val;
                }

                if ($time_count == 0) {
                    push @sim_data_env_first, $sim_val;
                }
            }
            $time_count++;
        }

        if ($sim_env_change_over_time eq 'changing_gradual') {
            open(my $sim_change_f, ">", $sim_env_changing_mat_tempfile) || die "Can't open file ".$sim_env_changing_mat_tempfile;
                print STDERR "OPENING ENV SIM CHANGING GRADUAL $env_simulation CORR $sim_env_changing_mat_tempfile\n";
                foreach (@sim_data_env_first) {
                    print $sim_change_f $_."\n";
                }
            close($sim_change_f);

            my $sim_change_cmd = 'R -e "library(data.table);
            mat <- fread(\''.$sim_env_changing_mat_tempfile.'\', header=FALSE, sep=\'\t\');
            x1 <- mat\$V1;
            x234 <- scale(matrix( rnorm('.$number_plots.'* ('.$number_traits.'-1) ), ncol='.$number_traits.'-1 ));
            x1234 <- cbind(scale(x1),x234);
            c1 <- var(x1234);
            chol1 <- solve(chol(c1));
            newx <-  x1234 %*% chol1;
            zapsmall(cor(newx));
            all.equal( x1234[,1], newx[,1] );
            newc <- matrix(NA, ncol='.$number_traits.', nrow='.$number_traits.');
            diag(newc) <- rep(1,'.$number_traits.');
            newc[lower.tri(newc)] <- rep('.$correlation_between_times.',sum(seq(1,'.$number_traits.'-1)));
            newc[upper.tri(newc)] <- rep('.$correlation_between_times.',sum(seq(1,'.$number_traits.'-1)));
            eigen(newc);
            chol2 <- chol(newc);
            finalx <- newx %*% chol2 * sd(x1) + mean(x1);
            write.table(finalx, file=\''.$sim_env_changing_mat_full_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\'\t\');"';
            # print STDERR Dumper $sim_change_cmd;
            my $status_sim_change = system($sim_change_cmd);

            open(my $sim_change_res, '<', $sim_env_changing_mat_full_tempfile) or die "Could not open file '$sim_env_changing_mat_full_tempfile' $!";
                print STDERR "OPENING ENV SIM CHANGING GRADUAL VALUES $env_simulation CORR $sim_env_changing_mat_full_tempfile\n";
                my $sim_change_line_counter = 0;
                while (my $row = <$sim_change_res>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $p = $unique_plot_names[$sim_change_line_counter];
                    my $row_number = $stock_name_row_col{$p}->{row_number};
                    my $col_number = $stock_name_row_col{$p}->{col_number};

                    my $sim_change_trait_counter = 0;
                    foreach my $sim_val (@columns) {
                        my $t = $sorted_trait_names[$sim_change_trait_counter];
                        $sim_data_check_3_times{$t}->{$row_number}->{$col_number} = $sim_val;

                        if ($sim_val < $env_sim_min_3) {
                            $env_sim_min_3 = $sim_val;
                        }
                        elsif ($sim_val >= $env_sim_max_3) {
                            $env_sim_max_3 = $sim_val;
                        }

                        $sim_change_trait_counter++;
                    }
                    $sim_change_line_counter++;
                }
            close($sim_change_res);
        }
    };

    if ($permanent_environment_structure eq 'env_corr_structure') {
        my @sim_data_diff_3;
        my $num_plots = scalar(@unique_plot_names);
        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $plot_id = $stock_name_row_col{$p}->{obsunit_stock_id};
            my @diffs = ($plot_id);
            foreach my $t (@sorted_trait_names) {
                my $sim_val = $sim_data_check_3_times{$t}->{$row_number}->{$col_number};
                foreach my $r (@seen_rows_ordered) {
                    foreach my $c (@seen_cols_ordered) {
                        my $v = $sim_data_check_3_times{$t}->{$r}->{$c};
                        push @diffs, $sim_val - $v;
                    }
                }
            }
            push @sim_data_diff_3, \@diffs;
        }

        open(my $pe_pheno_f, ">", $permanent_environment_structure_env_tempfile) || die "Can't open file ".$permanent_environment_structure_env_tempfile;
            print STDERR "OPENING PERMANENT ENVIRONMENT ENV $env_simulation CORR $permanent_environment_structure_env_tempfile\n";
            foreach (@sim_data_diff_3) {
                my $line = join "\t", @$_;
                print $pe_pheno_f $line."\n";
            }
        close($pe_pheno_f);

        my $pe_rel_cmd = 'R -e "library(lme4); library(data.table);
        mat_agg <- fread(\''.$permanent_environment_structure_env_tempfile.'\', header=FALSE, sep=\'\t\');
        mat_pheno <- mat_agg[,2:ncol(mat_agg)];
        a <- data.matrix(mat_pheno) - (matrix(rep(1,'.$num_plots.'*'.$num_plots.'), nrow='.$num_plots.') %*% data.matrix(mat_pheno))/'.$num_plots.';
        cor_mat <- a %*% t(a);
        rownames(cor_mat) <- data.matrix(mat_agg[,1]);
        colnames(cor_mat) <- data.matrix(mat_agg[,1]);
        range01 <- function(x){(x-min(x))/(max(x)-min(x))};
        cor_mat <- range01(cor_mat);
        write.table(cor_mat, file=\''.$permanent_environment_structure_env_tempfile2.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');"';
        # print STDERR Dumper $pe_rel_cmd;
        my $status_pe_rel = system($pe_rel_cmd);

        my %rel_pe_result_hash;
        open(my $pe_rel_res, '<', $permanent_environment_structure_env_tempfile2) or die "Could not open file '$permanent_environment_structure_env_tempfile2' $!";
            print STDERR "Opened PERMANENT ENV $env_simulation CORR FILE $permanent_environment_structure_env_tempfile2\n";
            my $header_row = <$pe_rel_res>;
            my @header;
            if ($csv->parse($header_row)) {
                @header = $csv->fields();
            }

            while (my $row = <$pe_rel_res>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                my $stock_id1 = $columns[0];
                my $counter = 1;
                foreach my $stock_id2 (@header) {
                    my $val = $columns[$counter];
                    $rel_pe_result_hash{$stock_id1}->{$stock_id2} = $val;
                    $counter++;
                }
            }
        close($pe_rel_res);

        my $data_rel_pe = '';
        my %result_hash_pe;
        foreach my $s (sort { $a <=> $b } @plot_ids_ordered) {
            foreach my $r (sort { $a <=> $b } @plot_ids_ordered) {
                my $s_factor = $stock_name_row_col{$plot_id_map{$s}}->{plot_id_factor};
                my $r_factor = $stock_name_row_col{$plot_id_map{$r}}->{plot_id_factor};
                if (!exists($result_hash_pe{$s_factor}->{$r_factor}) && !exists($result_hash_pe{$r_factor}->{$s_factor})) {
                    $result_hash_pe{$s_factor}->{$r_factor} = $rel_pe_result_hash{$s}->{$r};
                }
            }
        }
        foreach my $r (sort { $a <=> $b } keys %result_hash_pe) {
            foreach my $s (sort { $a <=> $b } keys %{$result_hash_pe{$r}}) {
                my $val = $result_hash_pe{$r}->{$s};
                if (defined $val and length $val) {
                    $data_rel_pe .= "$r\t$s\t$val\n";
                }
            }
        }

        open(my $pe_rel_out, ">", $permanent_environment_structure_env_tempfile_mat) || die "Can't open file ".$permanent_environment_structure_env_tempfile_mat;
            print STDERR "Opened PERMANENT ENV $env_simulation CORR FILE 3col $permanent_environment_structure_env_tempfile_mat\n";
            print $pe_rel_out $data_rel_pe;
        close($pe_rel_out);
    }

    print STDERR "ADD SIMULATED ENV TO ALTERED PHENO random_2d_normal_gradient\n";
    print STDERR Dumper [$env_sim_min_3, $env_sim_max_3];
    if ($statistics_select eq 'sommer_grm_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_genetic_blups' || $statistics_select eq 'sommer_grm_spatial_pure_2dspl_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_pure_2dspl_genetic_blups') {

        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};
            my @row = ($replicate, $block, "S".$germplasm_stock_id, $obsunit_stock_id, $row_number, $col_number, $row_number, $col_number);

            foreach my $t (@sorted_trait_names) {
                if (defined($phenotype_data_altered{$p}->{$t})) {
                    my $new_val = $phenotype_data_altered{$p}->{$t} + 0;
                    my $sim_val = $sim_data_check_3_times{$t}->{$row_number}->{$col_number};
                    $sim_val = (($sim_val - $env_sim_min_3)/($env_sim_max_3 - $env_sim_min_3))*$env_variance_percent;
                    $new_val += $sim_val;

                    if ($new_val < $phenotype_min_altered_env_3) {
                        $phenotype_min_altered_env_3 = $new_val;
                    }
                    elsif ($new_val >= $phenotype_max_altered_env_3) {
                        $phenotype_max_altered_env_3 = $new_val;
                    }

                    $sim_data_3{$p}->{$t} = $sim_val;
                    $phenotype_data_altered_env_3{$p}->{$t} = $new_val;
                    push @row, $new_val;
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, 'NA';
                }
            }
            push @data_matrix_altered_env_3, \@row;
        }

        open(my $F, ">", $stats_tempfile) || die "Can't open file ".$stats_tempfile;
            print $F $header_string."\n";
            foreach (@data_matrix_altered_env_3) {
                my $line = join ',', @$_;
                print $F "$line\n";
            }
        close($F);
    }
    elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {

        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};

            my @data_matrix_phenotypes_row;
            my $current_trait_index = 0;
            foreach my $t (@sorted_trait_names) {
                my @row = (
                    $accession_id_factor_map{$germplasm_stock_id},
                    $obsunit_stock_id,
                    $replicate,
                    $t,
                    $plot_rep_time_factor_map{$obsunit_stock_id}->{$replicate}->{$t},
                    $stock_row_col{$obsunit_stock_id}->{plot_id_factor}
                );

                my $polys = $polynomial_map{$t};
                push @row, @$polys;

                if (defined($phenotype_data_altered{$p}->{$t})) {
                    if ($use_area_under_curve) {
                        my $val = 0;
                        foreach my $counter (0..$current_trait_index) {
                            if ($counter == 0) {
                                $val = $val + $phenotype_data_altered{$p}->{$sorted_trait_names[$counter]} + 0;
                            }
                            else {
                                my $t1 = $sorted_trait_names[$counter-1];
                                my $t2 = $sorted_trait_names[$counter];
                                my $p1 = $phenotype_data_altered{$p}->{$t1} + 0;
                                my $p2 = $phenotype_data_altered{$p}->{$t2} + 0;
                                my $neg = 1;
                                my $min_val = $p1;
                                if ($p2 < $p1) {
                                    $neg = -1;
                                    $min_val = $p2;
                                }
                                $val = $val + (($neg*($p2-$p1)*($t2-$t1))/2)+($t2-$t1)*$min_val;
                            }
                        }

                        my $sim_val = $sim_data_check_3_times{$t}->{$row_number}->{$col_number};
                        $sim_val = (($sim_val - $env_sim_min_3)/($env_sim_max_3 - $env_sim_min_3))*$env_variance_percent;
                        $val += $sim_val;

                        if ($val < $phenotype_min_altered_env_3) {
                            $phenotype_min_altered_env_3 = $val;
                        }
                        elsif ($val >= $phenotype_max_altered_env_3) {
                            $phenotype_max_altered_env_3 = $val;
                        }

                        $sim_data_3{$p}->{$t} = $sim_val;
                        $phenotype_data_altered_env_3{$p}->{$t} = $val;
                        push @row, $val;
                        push @data_matrix_phenotypes_row, $val;
                    }
                    else {
                        my $val = $phenotype_data_altered{$p}->{$t} + 0;

                        my $sim_val = $sim_data_check_3_times{$t}->{$row_number}->{$col_number};
                        $sim_val = (($sim_val - $env_sim_min_3)/($env_sim_max_3 - $env_sim_min_3))*$env_variance_percent;
                        $val += $sim_val;

                        if ($val < $phenotype_min_altered_env_3) {
                            $phenotype_min_altered_env_3 = $val;
                        }
                        elsif ($val >= $phenotype_max_altered_env_3) {
                            $phenotype_max_altered_env_3 = $val;
                        }

                        $sim_data_3{$p}->{$t} = $sim_val;
                        $phenotype_data_altered_env_3{$p}->{$t} = $val;
                        push @row, $val;
                        push @data_matrix_phenotypes_row, $val;
                    }
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, '';
                    push @data_matrix_phenotypes_row, 'NA';
                }

                push @data_matrix_altered_env_3, \@row;
                push @data_matrix_phenotypes_altered_env_3, \@data_matrix_phenotypes_row;

                $current_trait_index++;
            }
        }

        open(my $F, ">", $stats_tempfile_2) || die "Can't open file ".$stats_tempfile_2;
            foreach (@data_matrix_altered_env_3) {
                my $line = join ' ', @$_;
                print $F "$line\n";
            }
        close($F);

        open(my $F2, ">", $stats_prep2_tempfile) || die "Can't open file ".$stats_prep2_tempfile;
            foreach (@data_matrix_phenotypes_altered_env_3) {
                my $line = join ',', @$_;
                print $F2 "$line\n";
            }
        close($F2);
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'asreml_grm_univariate_pure_spatial_genetic_blups' || $statistics_select eq 'asreml_grm_multivariate_spatial_genetic_blups') {
        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};

            my @row = (
                $germplasm_stock_id,
                $obsunit_stock_id,
                $replicate,
                $row_number,
                $col_number,
                $accession_id_factor_map{$germplasm_stock_id},
                $stock_row_col{$obsunit_stock_id}->{plot_id_factor}
            );

            foreach my $t (@sorted_trait_names) {
                if (defined($phenotype_data_altered{$p}->{$t})) {
                    my $new_val = $phenotype_data_altered{$p}->{$t} + 0;
                    my $sim_val = $sim_data_check_3_times{$t}->{$row_number}->{$col_number};
                    $sim_val = (($sim_val - $env_sim_min_3)/($env_sim_max_3 - $env_sim_min_3))*$env_variance_percent;
                    $new_val += $sim_val;

                    if ($new_val < $phenotype_min_altered_env_3) {
                        $phenotype_min_altered_env_3 = $new_val;
                    }
                    elsif ($new_val >= $phenotype_max_altered_env_3) {
                        $phenotype_max_altered_env_3 = $new_val;
                    }

                    $sim_data_3{$p}->{$t} = $sim_val;
                    $phenotype_data_altered_env_3{$p}->{$t} = $new_val;
                    push @row, $new_val;
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, '';
                }
            }
            push @data_matrix_altered_env_3, \@row;
        }

        open(my $F, ">", $stats_tempfile_2) || die "Can't open file ".$stats_tempfile_2;
            print $F $header_string."\n";
            foreach (@data_matrix_altered_env_3) {
                my $line = join ',', @$_;
                print $F "$line\n";
            }
        close($F);
    }

    print STDERR Dumper [$phenotype_min_altered_env_3, $phenotype_max_altered_env_3];

    my ($result_blup_data_altered_env_3, $result_blup_data_delta_altered_env_3, $result_blup_spatial_data_altered_env_3, $result_blup_pe_data_altered_env_3, $result_blup_pe_data_delta_altered_env_3, $result_residual_data_altered_env_3, $result_fitted_data_altered_env_3, %fixed_effects_altered_env_3, %rr_genetic_coefficients_altered_env_3, %rr_temporal_coefficients_altered_env_3);
    my (@rr_coeff_genetic_covariance_altered_env_3, @rr_coeff_env_covariance_altered_env_3, @rr_coeff_genetic_correlation_altered_env_3, @rr_coeff_env_correlation_altered_env_3, $rr_residual_variance_altered_env_3);
    my (@varcomp_altered_env_3);
    my $model_sum_square_residual_altered_env_3 = 0;
    my $model_sum_square_cv1_altered_env_3 = 0;
    my $model_sum_square_cv2_altered_env_3 = 0;
    my $model_sum_square_cv3_altered_env_3 = 0;
    my $model_sum_square_cv4_altered_env_3 = 0;
    my $model_sum_square_cv5_altered_env_3 = 0;
    my $model_sum_square_cv1_2_altered_env_3 = 0;
    my $model_sum_square_cv2_2_altered_env_3 = 0;
    my $model_sum_square_cv3_2_altered_env_3 = 0;
    my $model_sum_square_cv4_2_altered_env_3 = 0;
    my $model_sum_square_cv5_2_altered_env_3 = 0;
    my $genetic_effect_min_altered_env_3 = 1000000000;
    my $genetic_effect_max_altered_env_3 = -1000000000;
    my $env_effect_min_altered_env_3 = 1000000000;
    my $env_effect_max_altered_env_3 = -1000000000;
    my $genetic_effect_sum_square_altered_env_3 = 0;
    my $genetic_effect_sum_altered_env_3 = 0;
    my $env_effect_sum_square_altered_env_3 = 0;
    my $env_effect_sum_altered_env_3 = 0;
    my $residual_sum_square_altered_env_3 = 0;
    my $residual_sum_altered_env_3 = 0;

    print STDERR "RUN ENV ESTIMATE ON Altered Pheno With Sim Env random_2d_normal_gradient\n";
    if ($statistics_select eq 'sommer_grm_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_spatial_pure_2dspl_genetic_blups') {
        #print STDERR Dumper $prepare_file_cv_cmd;
        # print STDERR Dumper $statistics_cmd;
        eval {
            my $status_prepare_file_cv = system($prepare_file_cv_cmd);
            my $status_prepare_file_cv2 = system($prepare_file_cv2_cmd);
            my $status = system($statistics_cmd);
            if ($perform_cv) {
                my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
            }
        };
        my $run_stats_fault = 0;
        if ($@) {
            print STDERR "R ERROR\n";
            print STDERR Dumper $@;
            $run_stats_fault = 1;
        }
        else {
            my $current_gen_row_count = 0;
            my $current_env_row_count = 0;

            open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                my $header = <$fh>;
                my @header_cols;
                if ($csv->parse($header)) {
                    @header_cols = $csv->fields();
                }

                while (my $row = <$fh>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $col_counter = 0;
                    foreach my $encoded_trait (@header_cols) {
                        my $trait = $trait_name_encoder_rev{$encoded_trait};
                        my $stock_id = $columns[0];

                        my $stock_name = $stock_info{$stock_id}->{uniquename};
                        my $value = $columns[$col_counter+1];
                        if (defined $value && $value ne '') {
                            $result_blup_data_altered_env_3->{$stock_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $genetic_effect_min_altered_env_3) {
                                $genetic_effect_min_altered_env_3 = $value;
                            }
                            elsif ($value >= $genetic_effect_max_altered_env_3) {
                                $genetic_effect_max_altered_env_3 = $value;
                            }

                            $genetic_effect_sum_altered_env_3 += abs($value);
                            $genetic_effect_sum_square_altered_env_3 = $genetic_effect_sum_square_altered_env_3 + $value*$value;
                        }
                        $col_counter++;
                    }
                    $current_gen_row_count++;
                }
            close($fh);

            open(my $fh_2dspl, '<', $stats_out_tempfile_2dspl) or die "Could not open file '$stats_out_tempfile_2dspl' $!";
                print STDERR "Opened $stats_out_tempfile_2dspl\n";
                my $header_2dspl = <$fh_2dspl>;
                my @header_cols_2dspl;
                if ($csv->parse($header_2dspl)) {
                    @header_cols_2dspl = $csv->fields();
                }
                shift @header_cols_2dspl;
                while (my $row_2dspl = <$fh_2dspl>) {
                    my @columns;
                    if ($csv->parse($row_2dspl)) {
                        @columns = $csv->fields();
                    }
                    my $col_counter = 0;
                    foreach my $encoded_trait (@header_cols_2dspl) {
                        my $trait = $trait_name_encoder_rev{$encoded_trait};
                        my $plot_id = $columns[0];

                        my $plot_name = $plot_id_map{$plot_id};
                        my $value = $columns[$col_counter+1];
                        if (defined $value && $value ne '') {
                            $result_blup_spatial_data_altered_env_3->{$plot_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $env_effect_min_altered_env_3) {
                                $env_effect_min_altered_env_3 = $value;
                            }
                            elsif ($value >= $env_effect_max_altered_env_3) {
                                $env_effect_max_altered_env_3 = $value;
                            }

                            $env_effect_sum_altered_env_3 += abs($value);
                            $env_effect_sum_square_altered_env_3 = $env_effect_sum_square_altered_env_3 + $value*$value;
                        }
                        $col_counter++;
                    }
                    $current_env_row_count++;
                }
            close($fh_2dspl);

            open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                print STDERR "Opened $stats_out_tempfile_residual\n";
                my $header_residual = <$fh_residual>;
                my @header_cols_residual;
                if ($csv->parse($header_residual)) {
                    @header_cols_residual = $csv->fields();
                }
                while (my $row = <$fh_residual>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $residual = $columns[1 + $_];
                        my $fitted = $columns[1 + $number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_3->{$stock_name}->{$trait_name} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_3 += abs($residual);
                            $residual_sum_square_altered_env_3 = $residual_sum_square_altered_env_3 + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_3->{$stock_name}->{$trait_name} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_3 = $model_sum_square_residual_altered_env_3 + $residual*$residual;
                    }
                }
            close($fh_residual);

            open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                my $header_cv1 = <$fh_cv1>;
                my @header_cols_cv1;
                if ($csv->parse($header_cv1)) {
                    @header_cols_cv1 = $csv->fields();
                }
                while (my $row = <$fh_cv1>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_3 = $model_sum_square_cv1_altered_env_3 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv1);

            open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                my $header_cv2 = <$fh_cv2>;
                my @header_cols_cv2;
                if ($csv->parse($header_cv2)) {
                    @header_cols_cv2 = $csv->fields();
                }
                while (my $row = <$fh_cv2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_3 = $model_sum_square_cv2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv2);

            open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                my $header_cv3 = <$fh_cv3>;
                my @header_cols_cv3;
                if ($csv->parse($header_cv3)) {
                    @header_cols_cv3 = $csv->fields();
                }
                while (my $row = <$fh_cv3>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_3 = $model_sum_square_cv3_altered_env_3 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv3);

            open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                my $header_cv4 = <$fh_cv4>;
                my @header_cols_cv4;
                if ($csv->parse($header_cv4)) {
                    @header_cols_cv4 = $csv->fields();
                }
                while (my $row = <$fh_cv4>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_3 = $model_sum_square_cv4_altered_env_3 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv4);

            open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                my $header_cv5 = <$fh_cv5>;
                my @header_cols_cv5;
                if ($csv->parse($header_cv5)) {
                    @header_cols_cv5 = $csv->fields();
                }
                while (my $row = <$fh_cv5>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_3 = $model_sum_square_cv5_altered_env_3 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv5);

            open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                my $header_cv1_2 = <$fh_cv1_2>;
                my @header_cols_cv1_2;
                if ($csv->parse($header_cv1_2)) {
                    @header_cols_cv1_2 = $csv->fields();
                }
                while (my $row = <$fh_cv1_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_3 = $model_sum_square_cv1_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv1_2);

            open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                my $header_cv2_2 = <$fh_cv2_2>;
                my @header_cols_cv2_2;
                if ($csv->parse($header_cv2_2)) {
                    @header_cols_cv2_2 = $csv->fields();
                }
                while (my $row = <$fh_cv2_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_3 = $model_sum_square_cv2_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv2_2);

            open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                my $header_cv3_2 = <$fh_cv3_2>;
                my @header_cols_cv3_2;
                if ($csv->parse($header_cv3_2)) {
                    @header_cols_cv3_2 = $csv->fields();
                }
                while (my $row = <$fh_cv3_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_3 = $model_sum_square_cv3_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv3_2);

            open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                my $header_cv4_2 = <$fh_cv4_2>;
                my @header_cols_cv4_2;
                if ($csv->parse($header_cv4_2)) {
                    @header_cols_cv4_2 = $csv->fields();
                }
                while (my $row = <$fh_cv4_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_3 = $model_sum_square_cv4_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv4_2);

            open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                my $header_cv5_2 = <$fh_cv5_2>;
                my @header_cols_cv5_2;
                if ($csv->parse($header_cv5_2)) {
                    @header_cols_cv5_2 = $csv->fields();
                }
                while (my $row = <$fh_cv5_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_3 = $model_sum_square_cv5_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv5_2);

            open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                print STDERR "Opened $stats_out_tempfile_varcomp\n";
                my $header_varcomp = <$fh_varcomp>;
                my @header_cols_varcomp;
                if ($csv->parse($header_varcomp)) {
                    @header_cols_varcomp = $csv->fields();
                }
                while (my $row = <$fh_varcomp>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    push @varcomp_altered_env_3, \@columns;
                }
            close($fh_varcomp);

            if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                $run_stats_fault = 1;
            }
        }

        if ($run_stats_fault == 1) {
            print STDERR "ERROR IN R CMD\n";
            return {error=>'Error in R! Try a larger tolerance'};
        }
    }
    elsif ($statistics_select eq 'sommer_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_pure_2dspl_genetic_blups') {
        my @encoded_traits = values %trait_name_encoder;
        foreach my $t (@encoded_traits) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;
                    my @header_cols;
                    if ($csv->parse($header)) {
                        @header_cols = $csv->fields();
                    }

                    while (my $row = <$fh>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $col_counter = 0;
                        foreach my $encoded_trait (@header_cols) {
                            if ($encoded_trait eq $t) {
                                my $trait = $trait_name_encoder_rev{$encoded_trait};
                                my $stock_id = $columns[0];

                                my $stock_name = $stock_info{$stock_id}->{uniquename};
                                my $value = $columns[$col_counter+1];
                                if (defined $value && $value ne '') {
                                    $result_blup_data_altered_env_3->{$stock_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                                    if ($value < $genetic_effect_min_altered_env_3) {
                                        $genetic_effect_min_altered_env_3 = $value;
                                    }
                                    elsif ($value >= $genetic_effect_max_altered_env_3) {
                                        $genetic_effect_max_altered_env_3 = $value;
                                    }

                                    $genetic_effect_sum_altered_env_3 += abs($value);
                                    $genetic_effect_sum_square_altered_env_3 = $genetic_effect_sum_square_altered_env_3 + $value*$value;
                                }
                            }
                            $col_counter++;
                        }
                        $current_gen_row_count++;
                    }
                close($fh);

                open(my $fh_2dspl, '<', $stats_out_tempfile_2dspl) or die "Could not open file '$stats_out_tempfile_2dspl' $!";
                    print STDERR "Opened $stats_out_tempfile_2dspl\n";
                    my $header_2dspl = <$fh_2dspl>;
                    my @header_cols_2dspl;
                    if ($csv->parse($header_2dspl)) {
                        @header_cols_2dspl = $csv->fields();
                    }
                    shift @header_cols_2dspl;
                    while (my $row_2dspl = <$fh_2dspl>) {
                        my @columns;
                        if ($csv->parse($row_2dspl)) {
                            @columns = $csv->fields();
                        }
                        my $col_counter = 0;
                        foreach my $encoded_trait (@header_cols_2dspl) {
                            if ($encoded_trait eq $t) {
                                my $trait = $trait_name_encoder_rev{$encoded_trait};
                                my $plot_id = $columns[0];

                                my $plot_name = $plot_id_map{$plot_id};
                                my $value = $columns[$col_counter+1];
                                if (defined $value && $value ne '') {
                                    $result_blup_spatial_data_altered_env_3->{$plot_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                                    if ($value < $env_effect_min_altered_env_3) {
                                        $env_effect_min_altered_env_3 = $value;
                                    }
                                    elsif ($value >= $env_effect_max_altered_env_3) {
                                        $env_effect_max_altered_env_3 = $value;
                                    }

                                    $env_effect_sum_altered_env_3 += abs($value);
                                    $env_effect_sum_square_altered_env_3 = $env_effect_sum_square_altered_env_3 + $value*$value;
                                }
                            }
                            $col_counter++;
                        }
                        $current_env_row_count++;
                    }
                close($fh_2dspl);

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_3->{$stock_name}->{$trait_name} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_3 += abs($residual);
                            $residual_sum_square_altered_env_3 = $residual_sum_square_altered_env_3 + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_3->{$stock_name}->{$trait_name} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_3 = $model_sum_square_residual_altered_env_3 + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_3 = $model_sum_square_cv1_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_3 = $model_sum_square_cv2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_3 = $model_sum_square_cv3_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_3 = $model_sum_square_cv4_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_3 = $model_sum_square_cv5_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_3 = $model_sum_square_cv1_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_3 = $model_sum_square_cv2_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_3 = $model_sum_square_cv3_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_3 = $model_sum_square_cv4_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_3 = $model_sum_square_cv5_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        push @varcomp_altered_env_3, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {

        print STDERR Dumper $statistics_cmd;
        my $status_r = system($statistics_cmd);

        my @pheno_var;
        open(my $fh_r, '<', $stats_out_param_tempfile) or die "Could not open file '$stats_out_param_tempfile' $!";
            print STDERR "Opened $stats_out_param_tempfile\n";

            while (my $row = <$fh_r>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @pheno_var, \@columns;
            }
        close($fh_r);
        # print STDERR Dumper \@pheno_var;

        my $stats_tempfile_2_basename = basename($stats_tempfile_2);
        my $grm_file_basename = basename($grm_rename_tempfile);
        my $permanent_environment_structure_file_basename = basename($permanent_environment_structure_tempfile);
        my $permanent_environment_structure_env_file_basename = basename($permanent_environment_structure_env_tempfile_mat);
        #my @phenotype_header = ("id", "plot_id", "replicate", "time", "replicate_time", "ind_replicate", @sorted_trait_names, "phenotype");

        my $effect_1_levels = scalar(@rep_time_factors);
        my $effect_grm_levels = scalar(@unique_accession_names);
        my $effect_pe_levels = scalar(@ind_rep_factors);

        print STDERR Dumper $stats_tempfile_2;
        my $data_cv_cmd = 'R -e "mat <- read.csv(\''.$stats_tempfile_2.'\', header=FALSE, sep=\' \');
        randomized_positions <- sample(length(mat[,1]));
        cv_step_size <- length(mat[,1]) %/% 5;
        cv_step_size_modulo <- length(mat[,1]) %% 5;
        mat_CV1 <- mat; mat_CV2 <- mat; mat_CV3 <- mat; mat_CV4 <- mat; mat_CV5 <- mat;
        mat_CV1[c(randomized_positions[1:cv_step_size]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV2[c(randomized_positions[(cv_step_size+1):(2*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV3[c(randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV4[c(randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV5[c(randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV1_2 <- mat; mat_CV2_2 <- mat; mat_CV3_2 <- mat; mat_CV4_2 <- mat; mat_CV5_2 <- mat;
        mat_CV1_2[c(randomized_positions[1:cv_step_size]),ncol(mat)] <- -999;
        mat_CV2_2[c(randomized_positions[(cv_step_size+1):(2*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV3_2[c(randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV4_2[c(randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV5_2[c(randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]),ncol(mat)] <- -999;
        write.table(mat, file=\''.$stats_tempfile_2.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV1, file=\''.$stats_out_cv1_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV2, file=\''.$stats_out_cv2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV3, file=\''.$stats_out_cv3_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV4, file=\''.$stats_out_cv4_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV5, file=\''.$stats_out_cv5_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV1_2, file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV2_2, file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV3_2, file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV4_2, file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV5_2, file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        "';
        my $status_cv_files = system($data_cv_cmd);

        my $stats_out_cv1_predict_tempfile_basename = basename($stats_out_cv1_predict_tempfile);
        my $stats_out_cv2_predict_tempfile_basename = basename($stats_out_cv2_predict_tempfile);
        my $stats_out_cv3_predict_tempfile_basename = basename($stats_out_cv3_predict_tempfile);
        my $stats_out_cv4_predict_tempfile_basename = basename($stats_out_cv4_predict_tempfile);
        my $stats_out_cv5_predict_tempfile_basename = basename($stats_out_cv5_predict_tempfile);

        my $stats_out_cv1_2_predict_tempfile_basename = basename($stats_out_cv1_2_predict_tempfile);
        my $stats_out_cv2_2_predict_tempfile_basename = basename($stats_out_cv2_2_predict_tempfile);
        my $stats_out_cv3_2_predict_tempfile_basename = basename($stats_out_cv3_2_predict_tempfile);
        my $stats_out_cv4_2_predict_tempfile_basename = basename($stats_out_cv4_2_predict_tempfile);
        my $stats_out_cv5_2_predict_tempfile_basename = basename($stats_out_cv5_2_predict_tempfile);

        @param_file_rows_2 = (
            '(CO)VARIANCES'
        );
        foreach (@pheno_var) {
            my $s = join ' ', @$_;
            push @param_file_rows_2, $s;
        }
        @param_file_rows_4 = (
            '(CO)VARIANCES'
        );
        foreach (@pheno_var) {
            my $s = join ' ', @$_;
            push @param_file_rows_4, $s;
        }

        open(my $Fp, ">", $parameter_tempfile) || die "Can't open file ".$parameter_tempfile;
            foreach ((@param_file_rows_data, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp "$_\n";
            }
        close($Fp);

        open(my $Fp_cv1, ">", $parameter_tempfile_cv1) || die "Can't open file ".$parameter_tempfile_cv1;
            foreach ((@param_file_rows_data_cv1, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv1 "$_\n";
            }
        close($Fp_cv1);

        open(my $Fp_cv2, ">", $parameter_tempfile_cv2) || die "Can't open file ".$parameter_tempfile_cv2;
            foreach ((@param_file_rows_data_cv2, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv2 "$_\n";
            }
        close($Fp_cv2);

        open(my $Fp_cv3, ">", $parameter_tempfile_cv3) || die "Can't open file ".$parameter_tempfile_cv3;
            foreach ((@param_file_rows_data_cv3, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv3 "$_\n";
            }
        close($Fp_cv3);

        open(my $Fp_cv4, ">", $parameter_tempfile_cv4) || die "Can't open file ".$parameter_tempfile_cv4;
            foreach ((@param_file_rows_data_cv4, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv4 "$_\n";
            }
        close($Fp_cv4);

        open(my $Fp_cv5, ">", $parameter_tempfile_cv5) || die "Can't open file ".$parameter_tempfile_cv5;
            foreach ((@param_file_rows_data_cv5, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv5 "$_\n";
            }
        close($Fp_cv5);

        my $command_name = '';
        if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'blupf90_grm_random_regression_dap_blups') {
            $command_name = 'blupf90';
        }
        elsif ($statistics_select eq 'airemlf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
            $command_name = 'airemlf90';
        }

        my $parameter_tempfile_basename = basename($parameter_tempfile);
        my $parameter_tempfile_cv1_basename = basename($parameter_tempfile_cv1);
        my $parameter_tempfile_cv2_basename = basename($parameter_tempfile_cv2);
        my $parameter_tempfile_cv3_basename = basename($parameter_tempfile_cv3);
        my $parameter_tempfile_cv4_basename = basename($parameter_tempfile_cv4);
        my $parameter_tempfile_cv5_basename = basename($parameter_tempfile_cv5);
        my $parameter_tempfile_cv1_2_basename = basename($parameter_tempfile_cv1_2);
        my $parameter_tempfile_cv2_2_basename = basename($parameter_tempfile_cv2_2);
        my $parameter_tempfile_cv3_2_basename = basename($parameter_tempfile_cv3_2);
        my $parameter_tempfile_cv4_2_basename = basename($parameter_tempfile_cv4_2);
        my $parameter_tempfile_cv5_2_basename = basename($parameter_tempfile_cv5_2);

        print STDERR Dumper $cmd_f90;
        my $status = system($cmd_f90);

        my @log_output_rows;
        open(my $fh_log, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
            print STDERR "Opened $stats_out_tempfile\n";
            while (my $row = <$fh_log>) {
                print STDERR $row;
                push @log_output_rows, $row;
            }
        close($fh_log);

        my $log_output = join '', @log_output_rows;
        my ($gen_var_string) = $log_output =~ /Genetic variance\(s\) for effect  2(.*?)correlations/gs;
        @rr_coeff_genetic_covariance_altered_env_3 = split ' ', $gen_var_string;
        print STDERR Dumper \@rr_coeff_genetic_covariance_altered_env_3;
        my ($env_var_string) = $log_output =~ /Genetic variance\(s\) for effect  $legendre_order_number_env_var_pos(.*?)correlations/gs;
        @rr_coeff_env_covariance_altered_env_3 = split ' ', $env_var_string;
        print STDERR Dumper \@rr_coeff_env_covariance_altered_env_3;
        my (@gen_cor_string) = $log_output =~ /correlations(.*?)eigenvectors/gs;
        @rr_coeff_genetic_correlation_altered_env_3 = split ' ', $gen_cor_string[0];
        print STDERR Dumper \@rr_coeff_genetic_correlation_altered_env_3;
        @rr_coeff_env_correlation_altered_env_3 = split ' ', $gen_cor_string[1];
        print STDERR Dumper \@rr_coeff_env_correlation_altered_env_3;
        my ($res_se_string) = $log_output =~ /SE for R(.*?)\* FINISHED \(AIREMLF90\)/gs;
        print STDERR Dumper $res_se_string;
        # $rr_residual_variance_altered_env_3 = ($res_se_string**2)*$number_plots;
        $rr_residual_variance_altered_env_3 = $res_se_string;
        print STDERR Dumper $rr_residual_variance_altered_env_3;

        @param_file_rows_6 = (
            '(CO)VARIANCES'
        );
        my $cov_gen_counter = 0;
        foreach my $i (0..$legendre_order_number) {
            my @cov_row;
            foreach my $j (0..$legendre_order_number) {
                push @cov_row, $rr_coeff_genetic_covariance_altered_env_3[$cov_gen_counter];
                $cov_gen_counter++;
            }
            my $s = join ' ', @cov_row;
            push @param_file_rows_6, $s;
        }

        @param_file_rows_7 = (
            '(CO)VARIANCES'
        );
        my $cov_env_counter = 0;
        foreach my $i (0..$legendre_order_number) {
            my @cov_row;
            foreach my $j (0..$legendre_order_number) {
                push @cov_row, $rr_coeff_env_covariance_altered_env_3[$cov_env_counter];
                $cov_env_counter++;
            }
            my $s = join ' ', @cov_row;
            push @param_file_rows_7, $s;
        }

        open(my $Fp_cv1_2, ">", $parameter_tempfile_cv1_2) || die "Can't open file ".$parameter_tempfile_cv1_2;
            foreach ((@param_file_rows_data_cv1, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv1_2 "$_\n";
            }
        close($Fp_cv1_2);

        open(my $Fp_cv2_2, ">", $parameter_tempfile_cv2_2) || die "Can't open file ".$parameter_tempfile_cv2_2;
            foreach ((@param_file_rows_data_cv2, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv2_2 "$_\n";
            }
        close($Fp_cv2_2);

        open(my $Fp_cv3_2, ">", $parameter_tempfile_cv3_2) || die "Can't open file ".$parameter_tempfile_cv3_2;
            foreach ((@param_file_rows_data_cv3, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv3_2 "$_\n";
            }
        close($Fp_cv3_2);

        open(my $Fp_cv4_2, ">", $parameter_tempfile_cv4_2) || die "Can't open file ".$parameter_tempfile_cv4_2;
            foreach ((@param_file_rows_data_cv4, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv4_2 "$_\n";
            }
        close($Fp_cv4_2);

        open(my $Fp_cv5_2, ">", $parameter_tempfile_cv5_2) || die "Can't open file ".$parameter_tempfile_cv5_2;
            foreach ((@param_file_rows_data_cv5, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv5_2 "$_\n";
            }
        close($Fp_cv5_2);

        my $q_time = "SELECT t.cvterm_id FROM cvterm as t JOIN cv ON(t.cv_id=cv.cv_id) WHERE t.name=? and cv.name=?;";
        my $h_time = $schema->storage->dbh()->prepare($q_time);

        $yhat_residual_tempfile = $tmp_stats_dir."/yhat_residual";
        open(my $fh_yhat_res, '<', $yhat_residual_tempfile) or die "Could not open file '$yhat_residual_tempfile' $!";
            print STDERR "Opened $yhat_residual_tempfile\n";

            my $pred_res_counter = 0;
            my $trait_counter = 0;
            while (my $row = <$fh_yhat_res>) {
                # print STDERR $row;
                my @vals = split ' ', $row;
                my $pred = $vals[0];
                my $residual = $vals[1];
                $model_sum_square_residual_altered_env_3 = $model_sum_square_residual_altered_env_3 + $residual*$residual;

                my $plot_name = $plot_id_count_map_reverse{$pred_res_counter};
                my $time = $time_count_map_reverse{$pred_res_counter};

                if (defined $residual && $residual ne '') {
                    $result_residual_data_altered_env_3->{$plot_name}->{$seen_times{$time}} = [$residual, $timestamp, $user_name, '', ''];
                    $residual_sum_altered_env_3 += abs($residual);
                    $residual_sum_square_altered_env_3 = $residual_sum_square_altered_env_3 + $residual*$residual;
                }
                if (defined $pred && $pred ne '') {
                    $result_fitted_data_altered_env_3->{$plot_name}->{$seen_times{$time}} = [$pred, $timestamp, $user_name, '', ''];
                }

                $pred_res_counter++;
            }
        close($fh_yhat_res);

        $blupf90_solutions_tempfile = $tmp_stats_dir."/solutions";
        open(my $fh_sol, '<', $blupf90_solutions_tempfile) or die "Could not open file '$blupf90_solutions_tempfile' $!";
            print STDERR "Opened $blupf90_solutions_tempfile\n";

            my $head = <$fh_sol>;
            print STDERR $head;

            my $solution_file_counter = 0;
            my $grm_sol_counter = 0;
            my $grm_sol_trait_counter = 0;
            my $pe_sol_counter = 0;
            my $pe_sol_trait_counter = 0;
            while (defined(my $row = <$fh_sol>)) {
                # print STDERR $row;
                my @vals = split ' ', $row;
                my $level = $vals[2];
                my $value = $vals[3];
                if ($solution_file_counter < $effect_1_levels) {
                    $fixed_effects_altered_env_3{$solution_file_counter}->{$level} = $value;
                }
                elsif ($solution_file_counter < $effect_1_levels + $effect_grm_levels*($legendre_order_number+1)) {
                    my $accession_name = $accession_id_factor_map_reverse{$level};
                    if ($grm_sol_counter < $effect_grm_levels-1) {
                        $grm_sol_counter++;
                    }
                    else {
                        $grm_sol_counter = 0;
                        $grm_sol_trait_counter++;
                    }
                    if (defined $value && $value ne '') {
                        push @{$rr_genetic_coefficients_altered_env_3{$accession_name}}, $value;
                    }
                }
                else {
                    my $plot_name = $plot_id_factor_map_reverse{$level};
                    if ($pe_sol_counter < $effect_pe_levels-1) {
                        $pe_sol_counter++;
                    }
                    else {
                        $pe_sol_counter = 0;
                        $pe_sol_trait_counter++;
                    }
                    if (defined $value && $value ne '') {
                        push @{$rr_temporal_coefficients_altered_env_3{$plot_name}}, $value;
                    }
                }
                $solution_file_counter++;
            }
        close($fh_sol);

        # print STDERR Dumper \%rr_genetic_coefficients_altered;
        # print STDERR Dumper \%rr_temporal_coefficients_altered;

        open(my $Fgc, ">", $coeff_genetic_tempfile) || die "Can't open file ".$coeff_genetic_tempfile;

        while ( my ($accession_name, $coeffs) = each %rr_genetic_coefficients_altered_env_3) {
            my @line = ($accession_name, @$coeffs);
            my $line_string = join ',', @line;
            print $Fgc "$line_string\n";

            foreach my $t_i (0..20) {
                my $time = $t_i*5/100;
                my $time_rescaled = sprintf("%.2f", $time*($time_max - $time_min) + $time_min);

                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                my $time_term_string = '';
                if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {
                    $time_term_string = "GDD $time_rescaled";
                }
                elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
                    $time_term_string = "day $time_rescaled"
                }
                $h_time->execute($time_term_string, 'cxgn_time_ontology');
                my ($time_cvterm_id) = $h_time->fetchrow_array();

                if (!$time_cvterm_id) {
                    my $new_time_term = $schema->resultset("Cv::Cvterm")->create_with({
                       name => $time_term_string,
                       cv => 'cxgn_time_ontology'
                    });
                    $time_cvterm_id = $new_time_term->cvterm_id();
                }
                my $time_term_string_blup = SGN::Model::Cvterm::get_trait_from_cvterm_id($schema, $time_cvterm_id, 'extended');

                $result_blup_data_altered_env_3->{$accession_name}->{$time_term_string_blup} = [$value, $timestamp, $user_name, '', ''];
            }
        }
        close($Fgc);

        while ( my ($accession_name, $coeffs) = each %rr_genetic_coefficients_altered_env_3) {
            foreach my $time_term (@sorted_trait_names) {
                my $time = ($time_term - $time_min)/($time_max - $time_min);
                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                $result_blup_data_delta_altered_env_3->{$accession_name}->{$time_term} = [$value, $timestamp, $user_name, '', ''];

                if ($value < $genetic_effect_min_altered_env_3) {
                    $genetic_effect_min_altered_env_3 = $value;
                }
                elsif ($value >= $genetic_effect_max_altered_env_3) {
                    $genetic_effect_max_altered_env_3 = $value;
                }

                $genetic_effect_sum_altered_env_3 += abs($value);
                $genetic_effect_sum_square_altered_env_3 = $genetic_effect_sum_square_altered_env_3 + $value*$value;
            }
        }

        open(my $Fpc, ">", $coeff_pe_tempfile) || die "Can't open file ".$coeff_pe_tempfile;

        while ( my ($plot_name, $coeffs) = each %rr_temporal_coefficients_altered_env_3) {
            my @line = ($plot_name, @$coeffs);
            my $line_string = join ',', @line;
            print $Fpc "$line_string\n";

            foreach my $t_i (0..20) {
                my $time = $t_i*5/100;
                my $time_rescaled = sprintf("%.2f", $time*($time_max - $time_min) + $time_min);

                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                my $time_term_string = '';
                if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {
                    $time_term_string = "GDD $time_rescaled";
                }
                elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
                    $time_term_string = "day $time_rescaled"
                }
                $h_time->execute($time_term_string, 'cxgn_time_ontology');
                my ($time_cvterm_id) = $h_time->fetchrow_array();

                if (!$time_cvterm_id) {
                    my $new_time_term = $schema->resultset("Cv::Cvterm")->create_with({
                       name => $time_term_string,
                       cv => 'cxgn_time_ontology'
                    });
                    $time_cvterm_id = $new_time_term->cvterm_id();
                }
                my $time_term_string_pe = SGN::Model::Cvterm::get_trait_from_cvterm_id($schema, $time_cvterm_id, 'extended');

                $result_blup_pe_data_altered_env_3->{$plot_name}->{$time_term_string_pe} = [$value, $timestamp, $user_name, '', ''];
            }
        }
        close($Fpc);

        while ( my ($plot_name, $coeffs) = each %rr_temporal_coefficients_altered_env_3) {
            foreach my $time_term (@sorted_trait_names) {
                my $time = ($time_term - $time_min)/($time_max - $time_min);
                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                $result_blup_pe_data_delta_altered_env_3->{$plot_name}->{$time_term} = [$value, $timestamp, $user_name, '', ''];

                if ($value < $env_effect_min_altered_env_3) {
                    $env_effect_min_altered_env_3 = $value;
                }
                elsif ($value >= $env_effect_max_altered_env_3) {
                    $env_effect_max_altered_env_3 = $value;
                }

                $env_effect_sum_altered_env_3 += abs($value);
                $env_effect_sum_square_altered_env_3 = $env_effect_sum_square_altered_env_3 + $value*$value;
            }
        }

        if ($perform_cv) {
            my $cmd_f90_cv1 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv1_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv1;
            my $status_cv1 = system($cmd_f90_cv1);

            open(my $fh_log_cv1, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv1>) {
                    print STDERR $row;
                }
            close($fh_log_cv1);

            my $yhat_residual_tempfile_cv1 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv1, '<', $yhat_residual_tempfile_cv1) or die "Could not open file '$yhat_residual_tempfile_cv1' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv1\n";

                while (my $row = <$fh_yhat_res_cv1>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv1_altered_env_3 = $model_sum_square_cv1_altered_env_3 + $residual*$residual;
                }
            close($fh_yhat_res_cv1);

            my $cmd_f90_cv2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv2_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv2;
            my $status_cv2 = system($cmd_f90_cv2);

            open(my $fh_log_cv2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv2>) {
                    print STDERR $row;
                }
            close($fh_log_cv2);

            my $yhat_residual_tempfile_cv2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv2, '<', $yhat_residual_tempfile_cv2) or die "Could not open file '$yhat_residual_tempfile_cv2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv2\n";

                while (my $row = <$fh_yhat_res_cv2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv2_altered_env_3 = $model_sum_square_cv2_altered_env_3 + $residual*$residual;
                }
            close($fh_yhat_res_cv2);

            my $cmd_f90_cv3 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv3_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv3;
            my $status_cv3 = system($cmd_f90_cv3);

            open(my $fh_log_cv3, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv3>) {
                    print STDERR $row;
                }
            close($fh_log_cv3);

            my $yhat_residual_tempfile_cv3 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv3, '<', $yhat_residual_tempfile_cv3) or die "Could not open file '$yhat_residual_tempfile_cv3' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv3\n";

                while (my $row = <$fh_yhat_res_cv3>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv3_altered_env_3 = $model_sum_square_cv3_altered_env_3 + $residual*$residual;
                }
            close($fh_yhat_res_cv3);

            my $cmd_f90_cv4 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv4_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv4;
            my $status_cv4 = system($cmd_f90_cv4);

            open(my $fh_log_cv4, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv4>) {
                    print STDERR $row;
                }
            close($fh_log_cv4);

            my $yhat_residual_tempfile_cv4 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv4, '<', $yhat_residual_tempfile_cv4) or die "Could not open file '$yhat_residual_tempfile_cv4' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv4\n";

                while (my $row = <$fh_yhat_res_cv4>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv4_altered_env_3 = $model_sum_square_cv4_altered_env_3 + $residual*$residual;
                }
            close($fh_yhat_res_cv4);

            my $cmd_f90_cv5 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv5_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv5;
            my $status_cv5 = system($cmd_f90_cv5);

            open(my $fh_log_cv5, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv5>) {
                    print STDERR $row;
                }
            close($fh_log_cv5);

            my $yhat_residual_tempfile_cv5 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv5, '<', $yhat_residual_tempfile_cv5) or die "Could not open file '$yhat_residual_tempfile_cv5' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv5\n";

                while (my $row = <$fh_yhat_res_cv5>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv5_altered_env_3 = $model_sum_square_cv5_altered_env_3 + $residual*$residual;
                }
            close($fh_yhat_res_cv5);

            my $cmd_f90_cv1_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv1_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv1_2;
            my $status_cv1_2 = system($cmd_f90_cv1_2);

            open(my $fh_log_cv1_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv1_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv1_2);

            my $yhat_residual_tempfile_cv1_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv1_2, '<', $yhat_residual_tempfile_cv1_2) or die "Could not open file '$yhat_residual_tempfile_cv1_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv1_2\n";

                while (my $row = <$fh_yhat_res_cv1_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv1_2_altered_env_3 = $model_sum_square_cv1_2_altered_env_3 + $residual*$residual;
                }
            close($fh_yhat_res_cv1_2);

            my $cmd_f90_cv2_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv2_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv2_2;
            my $status_cv2_2 = system($cmd_f90_cv2_2);

            open(my $fh_log_cv2_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv2_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv2_2);

            my $yhat_residual_tempfile_cv2_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv2_2, '<', $yhat_residual_tempfile_cv2_2) or die "Could not open file '$yhat_residual_tempfile_cv2_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv2_2\n";

                while (my $row = <$fh_yhat_res_cv2_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv2_2_altered_env_3 = $model_sum_square_cv2_2_altered_env_3 + $residual*$residual;
                }
            close($fh_yhat_res_cv2_2);

            my $cmd_f90_cv3_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv3_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv3_2;
            my $status_cv3_2 = system($cmd_f90_cv3_2);

            open(my $fh_log_cv3_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv3_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv3_2);

            my $yhat_residual_tempfile_cv3_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv3_2, '<', $yhat_residual_tempfile_cv3_2) or die "Could not open file '$yhat_residual_tempfile_cv3_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv3_2\n";

                while (my $row = <$fh_yhat_res_cv3_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv3_2_altered_env_3 = $model_sum_square_cv3_2_altered_env_3 + $residual*$residual;
                }
            close($fh_yhat_res_cv3_2);

            my $cmd_f90_cv4_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv4_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv4_2;
            my $status_cv4_2 = system($cmd_f90_cv4_2);

            open(my $fh_log_cv4_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv4_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv4_2);

            my $yhat_residual_tempfile_cv4_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv4_2, '<', $yhat_residual_tempfile_cv4_2) or die "Could not open file '$yhat_residual_tempfile_cv4_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv4_2\n";

                while (my $row = <$fh_yhat_res_cv4_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv4_2_altered_env_3 = $model_sum_square_cv4_2_altered_env_3 + $residual*$residual;
                }
            close($fh_yhat_res_cv4_2);

            my $cmd_f90_cv5_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv5_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv5_2;
            my $status_cv5_2 = system($cmd_f90_cv5_2);

            open(my $fh_log_cv5_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv5_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv5_2);

            my $yhat_residual_tempfile_cv5_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv5_2, '<', $yhat_residual_tempfile_cv5_2) or die "Could not open file '$yhat_residual_tempfile_cv5_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv5_2\n";

                while (my $row = <$fh_yhat_res_cv5_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv5_2_altered_env_3 = $model_sum_square_cv5_2_altered_env_3 + $residual*$residual;
                }
            close($fh_yhat_res_cv5_2);
        }
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_spatial_genetic_blups') {
        foreach my $t (@sorted_trait_names) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;
                my @row_col_ordered_plots_names;

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        push @row_col_ordered_plots_names, $stock_name;
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_3->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_3 += abs($residual);
                            $residual_sum_square_altered_env_3 = $residual_sum_square_altered_env_3 + $residual*$residual;}
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_3->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_3 = $model_sum_square_residual_altered_env_3 + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;

                    my $solution_file_counter = 0;
                    while (defined(my $row = <$fh>)) {
                        # print STDERR $row;
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $level = $columns[0];
                        my $value = $columns[1];
                        my $std = $columns[2];
                        my $z_ratio = $columns[3];
                        if (defined $value && $value ne '') {
                            if ($solution_file_counter < $row_number_span) {
                                # print STDERR "$level $value \n";
                            }
                            elsif ($solution_file_counter < $row_number_span + $number_accessions) {
                                my $stock_name = $accession_id_factor_map_reverse{$solution_file_counter - $row_number_span + 1};
                                $result_blup_data_altered_env_3->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $genetic_effect_min_altered_env_3) {
                                    $genetic_effect_min_altered_env_3 = $value;
                                }
                                elsif ($value >= $genetic_effect_max_altered_env_3) {
                                    $genetic_effect_max_altered_env_3 = $value;
                                }

                                $genetic_effect_sum_altered_env_3 += abs($value);
                                $genetic_effect_sum_square_altered_env_3 = $genetic_effect_sum_square_altered_env_3 + $value*$value;

                                $current_gen_row_count++;
                            }
                            elsif ($solution_file_counter < $col_number_span + $row_number_span + $number_accessions) {
                                # print STDERR "$level $value \n";
                            }
                            else {
                                my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                                $result_blup_spatial_data_altered_env_3->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $env_effect_min_altered_env_3) {
                                    $env_effect_min_altered_env_3 = $value;
                                }
                                elsif ($value >= $env_effect_max_altered_env_3) {
                                    $env_effect_max_altered_env_3 = $value;
                                }

                                $env_effect_sum_altered_env_3 += abs($value);
                                $env_effect_sum_square_altered_env_3 = $env_effect_sum_square_altered_env_3 + $value*$value;

                                $current_env_row_count++;
                            }
                        }
                        $solution_file_counter++;
                    }
                close($fh);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_3 = $model_sum_square_cv1_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_3 = $model_sum_square_cv2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_3 = $model_sum_square_cv3_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_3 = $model_sum_square_cv4_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_3 = $model_sum_square_cv5_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_3 = $model_sum_square_cv1_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_3 = $model_sum_square_cv2_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_3 = $model_sum_square_cv3_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_3 = $model_sum_square_cv4_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_3 = $model_sum_square_cv5_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        $columns[0] = "trait:".$columns[0]."!trait_t".$t.":t".$t;
                        push @varcomp_altered_env_3, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_pure_spatial_genetic_blups') {
        $analysis_model_language = "R";

        $statistical_ontology_term = "Univariate linear mixed model 2D spline genetic BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000038"; #In the JS this is set to either Univariate linear mixed model 2D spline spatial BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000039

        $analysis_model_training_data_file_type = "nicksmixedmodelsanalytics_v1.01_asreml_grm_univariate_spatial_genetic_blups_phenotype_file";

        my @grm_old;
        open(my $fh_grm_old, '<', $grm_file) or die "Could not open file '$grm_file' $!";
            print STDERR "Opened $grm_file\n";

            while (my $row = <$fh_grm_old>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @grm_old, \@columns;
            }
        close($fh_grm_old);

        my %grm_hash_ordered;
        foreach (@grm_old) {
            my $l1 = $accession_id_factor_map{$_->[0]};
            my $l2 = $accession_id_factor_map{$_->[1]};
            my $val = sprintf("%.8f", $_->[2]);
            if ($l1 > $l2) {
                $grm_hash_ordered{$l1}->{$l2} = $val;
            }
            else {
                $grm_hash_ordered{$l2}->{$l1} = $val;
            }
        }

        open(my $fh_grm_new, '>', $grm_rename_tempfile) or die "Could not open file '$grm_rename_tempfile' $!";
            print STDERR "Opened $grm_rename_tempfile\n";

            foreach my $i (sort {$a <=> $b} keys %grm_hash_ordered) {
                my $v = $grm_hash_ordered{$i};
                foreach my $j (sort {$a <=> $b} keys %$v) {
                    my $val = $v->{$j};
                    print $fh_grm_new "$i $j $val\n";
                }
            }
        close($fh_grm_new);

        my @encoded_traits = values %trait_name_encoder;
        $number_traits = scalar(@sorted_trait_names);
        $number_accessions = scalar(@unique_accession_names);
        foreach my $t (@sorted_trait_names) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;
                my @row_col_ordered_plots_names;

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        push @row_col_ordered_plots_names, $stock_name;
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_3->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_3 += abs($residual);
                            $residual_sum_square_altered_env_3 = $residual_sum_square_altered_env_3 + $residual*$residual;}
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_3->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_3 = $model_sum_square_residual_altered_env_3 + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;

                    my $solution_file_counter = 0;
                    while (defined(my $row = <$fh>)) {
                        # print STDERR $row;
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $level = $columns[0];
                        my $value = $columns[1];
                        my $std = $columns[2];
                        my $z_ratio = $columns[3];
                        if (defined $value && $value ne '') {
                            if ($solution_file_counter < $number_accessions) {
                                my $stock_name = $accession_id_factor_map_reverse{$solution_file_counter + 1};
                                $result_blup_data_altered_env_3->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $genetic_effect_min_altered_env_3) {
                                    $genetic_effect_min_altered_env_3 = $value;
                                }
                                elsif ($value >= $genetic_effect_max_altered_env_3) {
                                    $genetic_effect_max_altered_env_3 = $value;
                                }

                                $genetic_effect_sum_altered_env_3 += abs($value);
                                $genetic_effect_sum_square_altered_env_3 = $genetic_effect_sum_square_altered_env_3 + $value*$value;

                                $current_gen_row_count++;
                            }
                            else {
                                my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                                $result_blup_spatial_data_altered_env_3->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $env_effect_min_altered_env_3) {
                                    $env_effect_min_altered_env_3 = $value;
                                }
                                elsif ($value >= $env_effect_max_altered_env_3) {
                                    $env_effect_max_altered_env_3 = $value;
                                }

                                $env_effect_sum_altered_env_3 += abs($value);
                                $env_effect_sum_square_altered_env_3 = $env_effect_sum_square_altered_env_3 + $value*$value;

                                $current_env_row_count++;
                            }
                        }
                        $solution_file_counter++;
                    }
                close($fh);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_3 = $model_sum_square_cv1_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_3 = $model_sum_square_cv2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_3 = $model_sum_square_cv3_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_3 = $model_sum_square_cv4_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_3 = $model_sum_square_cv5_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_3 = $model_sum_square_cv1_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_3 = $model_sum_square_cv2_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_3 = $model_sum_square_cv3_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_3 = $model_sum_square_cv4_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_3 = $model_sum_square_cv5_2_altered_env_3 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        $columns[0] = "trait:".$columns[0]."!trait_t".$t.":t".$t;
                        push @varcomp_altered_env_3, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'asreml_grm_multivariate_spatial_genetic_blups') {
        # print STDERR Dumper $prepare_file_cv_cmd;
        # print STDERR Dumper $statistics_cmd;
        eval {
            my $status_prepare_file_cv2 = system($prepare_file_cv2_cmd);
            my $status_prepare_file_cv = system($prepare_file_cv_cmd);
            my $status = system($statistics_cmd);
            if ($perform_cv) {
                my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
            }
        };

        my $run_stats_fault = 0;
        if ($@) {
            print STDERR "R ERROR\n";
            print STDERR Dumper $@;
            $run_stats_fault = 1;
        }
        else {
            my $current_gen_row_count = 0;
            my $current_env_row_count = 0;
            my @row_col_ordered_plots_names;

            open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                print STDERR "Opened $stats_out_tempfile_residual\n";
                my $header_residual = <$fh_residual>;
                my @header_cols_residual;
                if ($csv->parse($header_residual)) {
                    @header_cols_residual = $csv->fields();
                }
                my $residual_file_counter_index = 0;
                my $residual_file_counter = 1;
                while (my $row = <$fh_residual>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    my $residual = $columns[1];
                    my $fitted = $columns[2];
                    my $stock_name = $plot_id_map{$stock_id};
                    push @row_col_ordered_plots_names, $stock_name;
                    my $t = $sorted_trait_names[$residual_file_counter_index];
                    if ($residual_file_counter == scalar(@unique_plot_names)) {
                        $residual_file_counter = 0;
                        $residual_file_counter_index++;
                    }
                    if (defined $residual && $residual ne '') {
                        $result_residual_data_altered_env_3->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                        $residual_sum_altered_env_3 += abs($residual);
                        $residual_sum_square_altered_env_3 = $residual_sum_square_altered_env_3 + $residual*$residual;
                    }
                    if (defined $fitted && $fitted ne '') {
                        $result_fitted_data_altered_env_3->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                    }
                    $model_sum_square_residual_altered_env_3 = $model_sum_square_residual_altered_env_3 + $residual*$residual;

                    $residual_file_counter++;
                }
            close($fh_residual);

            open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                my $header = <$fh>;
                my @header_cols;
                if ($csv->parse($header)) {
                    @header_cols = $csv->fields();
                }

                my $solution_file_counter = 0;
                my $solution_file_g_counter = 1;
                my $solution_file_p_counter = 1;
                my $solution_file_counter_g_index = 0;
                my $solution_file_counter_p_index = 0;
                while (defined(my $row = <$fh>)) {
                    # print STDERR $row;
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $level = $columns[0];
                    my $value = $columns[1];
                    my $std = $columns[2];
                    my $z_ratio = $columns[3];
                    if (defined $value && $value ne '') {
                        if ($solution_file_counter < $number_accessions*$number_traits) {
                            my $t = $sorted_trait_names[$solution_file_counter_g_index];
                            if ($solution_file_g_counter == $number_accessions) {
                                $solution_file_g_counter = 0;
                                $solution_file_counter_g_index++;
                            }

                            my $stock_name = $accession_id_factor_map_reverse{$solution_file_g_counter+1};
                            $result_blup_data_altered_env_3->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $genetic_effect_min_altered_env_3) {
                                $genetic_effect_min_altered_env_3 = $value;
                            }
                            elsif ($value >= $genetic_effect_max_altered_env_3) {
                                $genetic_effect_max_altered_env_3 = $value;
                            }

                            $genetic_effect_sum_altered_env_3 += abs($value);
                            $genetic_effect_sum_square_altered_env_3 = $genetic_effect_sum_square_altered_env_3 + $value*$value;

                            $solution_file_g_counter++;
                            $current_gen_row_count++;
                        }
                        else {
                            my $t = $sorted_trait_names[$solution_file_counter_p_index];
                            if ($solution_file_p_counter == scalar(@unique_plot_names)) {
                                $solution_file_p_counter = 0;
                                $solution_file_counter_p_index++;
                            }

                            my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                            $result_blup_spatial_data_altered_env_3->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $env_effect_min_altered_env_3) {
                                $env_effect_min_altered_env_3 = $value;
                            }
                            elsif ($value >= $env_effect_max_altered_env_3) {
                                $env_effect_max_altered_env_3 = $value;
                            }

                            $env_effect_sum_altered_env_3 += abs($value);
                            $env_effect_sum_square_altered_env_3 = $env_effect_sum_square_altered_env_3 + $value*$value;

                            $solution_file_p_counter++;
                            $current_env_row_count++;
                        }
                    }
                    $solution_file_counter++;
                }
            close($fh);

            open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                my $header_cv1 = <$fh_cv1>;
                my @header_cols_cv1;
                if ($csv->parse($header_cv1)) {
                    @header_cols_cv1 = $csv->fields();
                }
                while (my $row = <$fh_cv1>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv1_altered_env_3 = $model_sum_square_cv1_altered_env_3 + ($true_value-$fitted)**2;
                }
            close($fh_cv1);

            open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                my $header_cv2 = <$fh_cv2>;
                my @header_cols_cv2;
                if ($csv->parse($header_cv2)) {
                    @header_cols_cv2 = $csv->fields();
                }
                while (my $row = <$fh_cv2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv2_altered_env_3 = $model_sum_square_cv2_altered_env_3 + ($true_value-$fitted)**2;
                }
            close($fh_cv2);

            open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                my $header_cv3 = <$fh_cv3>;
                my @header_cols_cv3;
                if ($csv->parse($header_cv3)) {
                    @header_cols_cv3 = $csv->fields();
                }
                while (my $row = <$fh_cv3>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv3_altered_env_3 = $model_sum_square_cv3_altered_env_3 + ($true_value-$fitted)**2;
                }
            close($fh_cv3);

            open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                my $header_cv4 = <$fh_cv4>;
                my @header_cols_cv4;
                if ($csv->parse($header_cv4)) {
                    @header_cols_cv4 = $csv->fields();
                }
                while (my $row = <$fh_cv4>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv4_altered_env_3 = $model_sum_square_cv4_altered_env_3 + ($true_value-$fitted)**2;
                }
            close($fh_cv4);

            open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                my $header_cv5 = <$fh_cv5>;
                my @header_cols_cv5;
                if ($csv->parse($header_cv5)) {
                    @header_cols_cv5 = $csv->fields();
                }
                while (my $row = <$fh_cv5>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv5_altered_env_3 = $model_sum_square_cv5_altered_env_3 + ($true_value-$fitted)**2;
                }
            close($fh_cv5);

            open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                my $header_cv1_2 = <$fh_cv1_2>;
                my @header_cols_cv1_2;
                if ($csv->parse($header_cv1_2)) {
                    @header_cols_cv1_2 = $csv->fields();
                }
                while (my $row = <$fh_cv1_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv1_2_altered_env_3 = $model_sum_square_cv1_2_altered_env_3 + ($true_value-$fitted)**2;
                }
            close($fh_cv1_2);

            open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                my $header_cv2_2 = <$fh_cv2_2>;
                my @header_cols_cv2_2;
                if ($csv->parse($header_cv2_2)) {
                    @header_cols_cv2_2 = $csv->fields();
                }
                while (my $row = <$fh_cv2_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv2_2_altered_env_3 = $model_sum_square_cv2_2_altered_env_3 + ($true_value-$fitted)**2;
                }
            close($fh_cv2_2);

            open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                my $header_cv3_2 = <$fh_cv3_2>;
                my @header_cols_cv3_2;
                if ($csv->parse($header_cv3_2)) {
                    @header_cols_cv3_2 = $csv->fields();
                }
                while (my $row = <$fh_cv3_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv3_2_altered_env_3 = $model_sum_square_cv3_2_altered_env_3 + ($true_value-$fitted)**2;
                }
            close($fh_cv3_2);

            open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                my $header_cv4_2 = <$fh_cv4_2>;
                my @header_cols_cv4_2;
                if ($csv->parse($header_cv4_2)) {
                    @header_cols_cv4_2 = $csv->fields();
                }
                while (my $row = <$fh_cv4_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv4_2_altered_env_3 = $model_sum_square_cv4_2_altered_env_3 + ($true_value-$fitted)**2;
                }
            close($fh_cv4_2);

            open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                my $header_cv5_2 = <$fh_cv5_2>;
                my @header_cols_cv5_2;
                if ($csv->parse($header_cv5_2)) {
                    @header_cols_cv5_2 = $csv->fields();
                }
                while (my $row = <$fh_cv5_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv5_2_altered_env_3 = $model_sum_square_cv5_2_altered_env_3 + ($true_value-$fitted)**2;
                }
            close($fh_cv5_2);

            open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                print STDERR "Opened $stats_out_tempfile_varcomp\n";
                my $header_varcomp = <$fh_varcomp>;
                my @header_cols_varcomp;
                if ($csv->parse($header_varcomp)) {
                    @header_cols_varcomp = $csv->fields();
                }
                while (my $row = <$fh_varcomp>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    push @varcomp_altered_env_3, \@columns;
                }
            close($fh_varcomp);

            if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                $run_stats_fault = 1;
            }

            if ($run_stats_fault == 1) {
                print STDERR "ERROR IN R CMD\n";
                return {error=>'Error in R! Try a larger tolerance'};
            }
        }
    }
    print STDERR "ALTERED w/SIM_ENV 2dn $statistics_select GENETIC EFFECT SUM $genetic_effect_sum_altered_env_3\n";
    print STDERR "ALTERED w/SIM_ENV 2dn $statistics_select ENV EFFECT SUM $env_effect_sum_altered_env_3\n";
    print STDERR Dumper [$genetic_effect_min_altered_env_3, $genetic_effect_max_altered_env_3, $env_effect_min_altered_env_3, $env_effect_max_altered_env_3];

    my @model_sum_square_altered_env_3_cv_values = ($model_sum_square_cv1_altered_env_3, $model_sum_square_cv2_altered_env_3, $model_sum_square_cv3_altered_env_3, $model_sum_square_cv4_altered_env_3, $model_sum_square_cv5_altered_env_3);
    my @model_sum_square_altered_env_3_cv_2_values = ($model_sum_square_cv1_2_altered_env_3, $model_sum_square_cv2_2_altered_env_3, $model_sum_square_cv3_2_altered_env_3, $model_sum_square_cv4_2_altered_env_3, $model_sum_square_cv5_2_altered_env_3);
    print STDERR Dumper \@model_sum_square_altered_env_3_cv_values;
    print STDERR Dumper \@model_sum_square_altered_env_3_cv_2_values;
    my $model_sum_square_altered_env_3_cv_stat = Statistics::Descriptive::Full->new();
    $model_sum_square_altered_env_3_cv_stat->add_data(@model_sum_square_altered_env_3_cv_values);
    my $model_sum_square_altered_env_cv_result_3 = {
        values => \@model_sum_square_altered_env_3_cv_values,
        variance => $model_sum_square_altered_env_3_cv_stat->variance(),
        mean => $model_sum_square_altered_env_3_cv_stat->mean()
    };
    my $model_sum_square_altered_env_3_cv_2_stat = Statistics::Descriptive::Full->new();
    $model_sum_square_altered_env_3_cv_2_stat->add_data(@model_sum_square_altered_env_3_cv_2_values);
    my $model_sum_square_altered_env_cv_2_result_3 = {
        values => \@model_sum_square_altered_env_3_cv_2_values,
        variance => $model_sum_square_altered_env_3_cv_2_stat->variance(),
        mean => $model_sum_square_altered_env_3_cv_2_stat->mean()
    };

    $env_simulation = "random";

    my (%phenotype_data_altered_env_4, @data_matrix_altered_env_4, @data_matrix_phenotypes_altered_env_4);
    my $phenotype_min_altered_env_4 = 1000000000;
    my $phenotype_max_altered_env_4 = -1000000000;
    my $env_sim_min_4 = 10000000000000;
    my $env_sim_max_4 = -10000000000000;
    my %sim_data_4;
    my %sim_data_check_4_times;

    eval {
        my %sim_data_check_4_first;
        my @sim_data_env_first;
        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $sim_val = eval $env_sim_exec->{$env_simulation};
            $sim_data_check_4_first{$row_number}->{$col_number} = $sim_val;

            if ($sim_val < $env_sim_min_4) {
                $env_sim_min_4 = $sim_val;
            }
            elsif ($sim_val >= $env_sim_max_4) {
                $env_sim_max_4 = $sim_val;
            }

            push @sim_data_env_first, $sim_val;
        }

        if ($sim_env_change_over_time eq 'changing_gradual') {
            open(my $sim_change_f, ">", $sim_env_changing_mat_tempfile) || die "Can't open file ".$sim_env_changing_mat_tempfile;
                print STDERR "OPENING ENV SIM CHANGING GRADUAL $env_simulation CORR $sim_env_changing_mat_tempfile\n";
                foreach (@sim_data_env_first) {
                    print $sim_change_f $_."\n";
                }
            close($sim_change_f);

            my $sim_change_cmd = 'R -e "library(data.table);
            mat <- fread(\''.$sim_env_changing_mat_tempfile.'\', header=FALSE, sep=\'\t\');
            x1 <- mat\$V1;
            x234 <- scale(matrix( rnorm('.$number_plots.'* ('.$number_traits.'-1) ), ncol='.$number_traits.'-1 ));
            x1234 <- cbind(scale(x1),x234);
            c1 <- var(x1234);
            chol1 <- solve(chol(c1));
            newx <-  x1234 %*% chol1;
            zapsmall(cor(newx));
            all.equal( x1234[,1], newx[,1] );
            newc <- matrix(NA, ncol='.$number_traits.', nrow='.$number_traits.');
            diag(newc) <- rep(1,'.$number_traits.');
            newc[lower.tri(newc)] <- rep('.$correlation_between_times.',sum(seq(1,'.$number_traits.'-1)));
            newc[upper.tri(newc)] <- rep('.$correlation_between_times.',sum(seq(1,'.$number_traits.'-1)));
            eigen(newc);
            chol2 <- chol(newc);
            finalx <- newx %*% chol2 * sd(x1) + mean(x1);
            write.table(finalx, file=\''.$sim_env_changing_mat_full_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\'\t\');"';
            # print STDERR Dumper $sim_change_cmd;
            my $status_sim_change = system($sim_change_cmd);

            open(my $sim_change_res, '<', $sim_env_changing_mat_full_tempfile) or die "Could not open file '$sim_env_changing_mat_full_tempfile' $!";
                print STDERR "OPENING ENV SIM CHANGING GRADUAL VALUES $env_simulation CORR $sim_env_changing_mat_full_tempfile\n";
                my $sim_change_line_counter = 0;
                while (my $row = <$sim_change_res>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $p = $unique_plot_names[$sim_change_line_counter];
                    my $row_number = $stock_name_row_col{$p}->{row_number};
                    my $col_number = $stock_name_row_col{$p}->{col_number};

                    my $sim_change_trait_counter = 0;
                    foreach my $sim_val (@columns) {
                        my $t = $sorted_trait_names[$sim_change_trait_counter];
                        $sim_data_check_4_times{$t}->{$row_number}->{$col_number} = $sim_val;

                        if ($sim_val < $env_sim_min_4) {
                            $env_sim_min_4 = $sim_val;
                        }
                        elsif ($sim_val >= $env_sim_max_4) {
                            $env_sim_max_4 = $sim_val;
                        }

                        $sim_change_trait_counter++;
                    }
                    $sim_change_line_counter++;
                }
            close($sim_change_res);
        }
        else {
            foreach my $t (@sorted_trait_names) {
                $sim_data_check_4_times{$t} = \%sim_data_check_4_first;
            }
        }
    };

    if ($permanent_environment_structure eq 'env_corr_structure') {
        my @sim_data_diff_4;
        my $num_plots = scalar(@unique_plot_names);
        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $plot_id = $stock_name_row_col{$p}->{obsunit_stock_id};
            my @diffs = ($plot_id);
            foreach my $t (@sorted_trait_names) {
                my $sim_val = $sim_data_check_4_times{$t}->{$row_number}->{$col_number};
                foreach my $r (@seen_rows_ordered) {
                    foreach my $c (@seen_cols_ordered) {
                        my $v = $sim_data_check_4_times{$t}->{$r}->{$c};
                        push @diffs, $sim_val - $v;
                    }
                }
            }
            push @sim_data_diff_4, \@diffs;
        }

        open(my $pe_pheno_f, ">", $permanent_environment_structure_env_tempfile) || die "Can't open file ".$permanent_environment_structure_env_tempfile;
            print STDERR "OPENING PERMANENT ENVIRONMENT ENV $env_simulation CORR $permanent_environment_structure_env_tempfile\n";
            foreach (@sim_data_diff_4) {
                my $line = join "\t", @$_;
                print $pe_pheno_f $line."\n";
            }
        close($pe_pheno_f);

        my $pe_rel_cmd = 'R -e "library(lme4); library(data.table);
        mat_agg <- fread(\''.$permanent_environment_structure_env_tempfile.'\', header=FALSE, sep=\'\t\');
        mat_pheno <- mat_agg[,2:ncol(mat_agg)];
        a <- data.matrix(mat_pheno) - (matrix(rep(1,'.$num_plots.'*'.$num_plots.'), nrow='.$num_plots.') %*% data.matrix(mat_pheno))/'.$num_plots.';
        cor_mat <- a %*% t(a);
        rownames(cor_mat) <- data.matrix(mat_agg[,1]);
        colnames(cor_mat) <- data.matrix(mat_agg[,1]);
        range01 <- function(x){(x-min(x))/(max(x)-min(x))};
        cor_mat <- range01(cor_mat);
        write.table(cor_mat, file=\''.$permanent_environment_structure_env_tempfile2.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');"';
        # print STDERR Dumper $pe_rel_cmd;
        my $status_pe_rel = system($pe_rel_cmd);

        my %rel_pe_result_hash;
        open(my $pe_rel_res, '<', $permanent_environment_structure_env_tempfile2) or die "Could not open file '$permanent_environment_structure_env_tempfile2' $!";
            print STDERR "Opened PERMANENT ENV $env_simulation CORR FILE $permanent_environment_structure_env_tempfile2\n";
            my $header_row = <$pe_rel_res>;
            my @header;
            if ($csv->parse($header_row)) {
                @header = $csv->fields();
            }

            while (my $row = <$pe_rel_res>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                my $stock_id1 = $columns[0];
                my $counter = 1;
                foreach my $stock_id2 (@header) {
                    my $val = $columns[$counter];
                    $rel_pe_result_hash{$stock_id1}->{$stock_id2} = $val;
                    $counter++;
                }
            }
        close($pe_rel_res);

        my $data_rel_pe = '';
        my %result_hash_pe;
        foreach my $s (sort { $a <=> $b } @plot_ids_ordered) {
            foreach my $r (sort { $a <=> $b } @plot_ids_ordered) {
                my $s_factor = $stock_name_row_col{$plot_id_map{$s}}->{plot_id_factor};
                my $r_factor = $stock_name_row_col{$plot_id_map{$r}}->{plot_id_factor};
                if (!exists($result_hash_pe{$s_factor}->{$r_factor}) && !exists($result_hash_pe{$r_factor}->{$s_factor})) {
                    $result_hash_pe{$s_factor}->{$r_factor} = $rel_pe_result_hash{$s}->{$r};
                }
            }
        }
        foreach my $r (sort { $a <=> $b } keys %result_hash_pe) {
            foreach my $s (sort { $a <=> $b } keys %{$result_hash_pe{$r}}) {
                my $val = $result_hash_pe{$r}->{$s};
                if (defined $val and length $val) {
                    $data_rel_pe .= "$r\t$s\t$val\n";
                }
            }
        }

        open(my $pe_rel_out, ">", $permanent_environment_structure_env_tempfile_mat) || die "Can't open file ".$permanent_environment_structure_env_tempfile_mat;
            print STDERR "Opened PERMANENT ENV $env_simulation CORR FILE 3col $permanent_environment_structure_env_tempfile_mat\n";
            print $pe_rel_out $data_rel_pe;
        close($pe_rel_out);
    }

    print STDERR "ADD SIMULATED ENV TO ALTERED PHENO random\n";
    print STDERR Dumper [$env_sim_min_4, $env_sim_max_4];
    if ($statistics_select eq 'sommer_grm_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_genetic_blups' || $statistics_select eq 'sommer_grm_spatial_pure_2dspl_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_pure_2dspl_genetic_blups') {

        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};
            my @row = ($replicate, $block, "S".$germplasm_stock_id, $obsunit_stock_id, $row_number, $col_number, $row_number, $col_number);

            foreach my $t (@sorted_trait_names) {
                if (defined($phenotype_data_altered{$p}->{$t})) {
                    my $new_val = $phenotype_data_altered{$p}->{$t} + 0;
                    my $sim_val = $sim_data_check_4_times{$t}->{$row_number}->{$col_number};
                    $sim_val = (($sim_val - $env_sim_min_4)/($env_sim_max_4 - $env_sim_min_4))*$env_variance_percent;
                    $new_val += $sim_val;

                    if ($new_val < $phenotype_min_altered_env_4) {
                        $phenotype_min_altered_env_4 = $new_val;
                    }
                    elsif ($new_val >= $phenotype_max_altered_env_4) {
                        $phenotype_max_altered_env_4 = $new_val;
                    }

                    $sim_data_4{$p}->{$t} = $sim_val;
                    $phenotype_data_altered_env_4{$p}->{$t} = $new_val;
                    push @row, $new_val;
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, 'NA';
                }
            }
            push @data_matrix_altered_env_4, \@row;
        }

        open(my $F, ">", $stats_tempfile) || die "Can't open file ".$stats_tempfile;
            print $F $header_string."\n";
            foreach (@data_matrix_altered_env_4) {
                my $line = join ',', @$_;
                print $F "$line\n";
            }
        close($F);
    }
    elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {

        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};

            my @data_matrix_phenotypes_row;
            my $current_trait_index = 0;
            foreach my $t (@sorted_trait_names) {
                my @row = (
                    $accession_id_factor_map{$germplasm_stock_id},
                    $obsunit_stock_id,
                    $replicate,
                    $t,
                    $plot_rep_time_factor_map{$obsunit_stock_id}->{$replicate}->{$t},
                    $stock_row_col{$obsunit_stock_id}->{plot_id_factor}
                );

                my $polys = $polynomial_map{$t};
                push @row, @$polys;

                if (defined($phenotype_data_altered{$p}->{$t})) {
                    if ($use_area_under_curve) {
                        my $val = 0;
                        foreach my $counter (0..$current_trait_index) {
                            if ($counter == 0) {
                                $val = $val + $phenotype_data_altered{$p}->{$sorted_trait_names[$counter]} + 0;
                            }
                            else {
                                my $t1 = $sorted_trait_names[$counter-1];
                                my $t2 = $sorted_trait_names[$counter];
                                my $p1 = $phenotype_data_altered{$p}->{$t1} + 0;
                                my $p2 = $phenotype_data_altered{$p}->{$t2} + 0;
                                my $neg = 1;
                                my $min_val = $p1;
                                if ($p2 < $p1) {
                                    $neg = -1;
                                    $min_val = $p2;
                                }
                                $val = $val + (($neg*($p2-$p1)*($t2-$t1))/2)+($t2-$t1)*$min_val;
                            }
                        }

                        my $sim_val = $sim_data_check_4_times{$t}->{$row_number}->{$col_number};
                        $sim_val = (($sim_val - $env_sim_min_4)/($env_sim_max_4 - $env_sim_min_4))*$env_variance_percent;
                        $val += $sim_val;

                        if ($val < $phenotype_min_altered_env_4) {
                            $phenotype_min_altered_env_4 = $val;
                        }
                        elsif ($val >= $phenotype_max_altered_env_4) {
                            $phenotype_max_altered_env_4 = $val;
                        }

                        $sim_data_4{$p}->{$t} = $sim_val;
                        $phenotype_data_altered_env_4{$p}->{$t} = $val;
                        push @row, $val;
                        push @data_matrix_phenotypes_row, $val;
                    }
                    else {
                        my $val = $phenotype_data_altered{$p}->{$t} + 0;

                        my $sim_val = $sim_data_check_4_times{$t}->{$row_number}->{$col_number};
                        $sim_val = (($sim_val - $env_sim_min_4)/($env_sim_max_4 - $env_sim_min_4))*$env_variance_percent;
                        $val += $sim_val;

                        if ($val < $phenotype_min_altered_env_4) {
                            $phenotype_min_altered_env_4 = $val;
                        }
                        elsif ($val >= $phenotype_max_altered_env_4) {
                            $phenotype_max_altered_env_4 = $val;
                        }

                        $sim_data_4{$p}->{$t} = $sim_val;
                        $phenotype_data_altered_env_4{$p}->{$t} = $val;
                        push @row, $val;
                        push @data_matrix_phenotypes_row, $val;
                    }
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, '';
                    push @data_matrix_phenotypes_row, 'NA';
                }

                push @data_matrix_altered_env_4, \@row;
                push @data_matrix_phenotypes_altered_env_4, \@data_matrix_phenotypes_row;

                $current_trait_index++;
            }
        }

        open(my $F, ">", $stats_tempfile_2) || die "Can't open file ".$stats_tempfile_2;
            foreach (@data_matrix_altered_env_4) {
                my $line = join ' ', @$_;
                print $F "$line\n";
            }
        close($F);

        open(my $F2, ">", $stats_prep2_tempfile) || die "Can't open file ".$stats_prep2_tempfile;
            foreach (@data_matrix_phenotypes_altered_env_4) {
                my $line = join ',', @$_;
                print $F2 "$line\n";
            }
        close($F2);
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'asreml_grm_univariate_pure_spatial_genetic_blups' || $statistics_select eq 'asreml_grm_multivariate_spatial_genetic_blups') {
        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};

            my @row = (
                $germplasm_stock_id,
                $obsunit_stock_id,
                $replicate,
                $row_number,
                $col_number,
                $accession_id_factor_map{$germplasm_stock_id},
                $stock_row_col{$obsunit_stock_id}->{plot_id_factor}
            );

            foreach my $t (@sorted_trait_names) {
                if (defined($phenotype_data_altered{$p}->{$t})) {
                    my $new_val = $phenotype_data_altered{$p}->{$t} + 0;
                    my $sim_val = $sim_data_check_4_times{$t}->{$row_number}->{$col_number};
                    $sim_val = (($sim_val - $env_sim_min_4)/($env_sim_max_4 - $env_sim_min_4))*$env_variance_percent;
                    $new_val += $sim_val;

                    if ($new_val < $phenotype_min_altered_env_4) {
                        $phenotype_min_altered_env_4 = $new_val;
                    }
                    elsif ($new_val >= $phenotype_max_altered_env_4) {
                        $phenotype_max_altered_env_4 = $new_val;
                    }

                    $sim_data_4{$p}->{$t} = $sim_val;
                    $phenotype_data_altered_env_4{$p}->{$t} = $new_val;
                    push @row, $new_val;
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, '';
                }
            }
            push @data_matrix_altered_env_4, \@row;
        }

        open(my $F, ">", $stats_tempfile_2) || die "Can't open file ".$stats_tempfile_2;
            print $F $header_string."\n";
            foreach (@data_matrix_altered_env_4) {
                my $line = join ',', @$_;
                print $F "$line\n";
            }
        close($F);
    }

    print STDERR Dumper [$phenotype_min_altered_env_4, $phenotype_max_altered_env_4];

    my ($result_blup_data_altered_env_4, $result_blup_data_delta_altered_env_4, $result_blup_spatial_data_altered_env_4, $result_blup_pe_data_altered_env_4, $result_blup_pe_data_delta_altered_env_4, $result_residual_data_altered_env_4, $result_fitted_data_altered_env_4, %fixed_effects_altered_env_4, %rr_genetic_coefficients_altered_env_4, %rr_temporal_coefficients_altered_env_4);
    my (@rr_coeff_genetic_covariance_altered_env_4, @rr_coeff_env_covariance_altered_env_4, @rr_coeff_genetic_correlation_altered_env_4, @rr_coeff_env_correlation_altered_env_4, $rr_residual_variance_altered_env_4);
    my (@varcomp_altered_env_4);
    my $model_sum_square_residual_altered_env_4 = 0;
    my $model_sum_square_cv1_altered_env_4 = 0;
    my $model_sum_square_cv2_altered_env_4 = 0;
    my $model_sum_square_cv3_altered_env_4 = 0;
    my $model_sum_square_cv4_altered_env_4 = 0;
    my $model_sum_square_cv5_altered_env_4 = 0;
    my $model_sum_square_cv1_2_altered_env_4 = 0;
    my $model_sum_square_cv2_2_altered_env_4 = 0;
    my $model_sum_square_cv3_2_altered_env_4 = 0;
    my $model_sum_square_cv4_2_altered_env_4 = 0;
    my $model_sum_square_cv5_2_altered_env_4 = 0;
    my $genetic_effect_min_altered_env_4 = 1000000000;
    my $genetic_effect_max_altered_env_4 = -1000000000;
    my $env_effect_min_altered_env_4 = 1000000000;
    my $env_effect_max_altered_env_4 = -1000000000;
    my $genetic_effect_sum_square_altered_env_4 = 0;
    my $genetic_effect_sum_altered_env_4 = 0;
    my $env_effect_sum_square_altered_env_4 = 0;
    my $env_effect_sum_altered_env_4 = 0;
    my $residual_sum_square_altered_env_4 = 0;
    my $residual_sum_altered_env_4 = 0;

    print STDERR "RUN ENV ESTIMATE ON Altered Pheno With Sim Env random\n";
    if ($statistics_select eq 'sommer_grm_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_spatial_pure_2dspl_genetic_blups') {
        #print STDERR Dumper $prepare_file_cv_cmd;
        # print STDERR Dumper $statistics_cmd;
        eval {
            my $status_prepare_file_cv = system($prepare_file_cv_cmd);
            my $status_prepare_file_cv2 = system($prepare_file_cv2_cmd);
            my $status = system($statistics_cmd);
            if ($perform_cv) {
                my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
            }
        };
        my $run_stats_fault = 0;
        if ($@) {
            print STDERR "R ERROR\n";
            print STDERR Dumper $@;
            $run_stats_fault = 1;
        }
        else {
            my $current_gen_row_count = 0;
            my $current_env_row_count = 0;

            open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                my $header = <$fh>;
                my @header_cols;
                if ($csv->parse($header)) {
                    @header_cols = $csv->fields();
                }

                while (my $row = <$fh>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $col_counter = 0;
                    foreach my $encoded_trait (@header_cols) {
                        my $trait = $trait_name_encoder_rev{$encoded_trait};
                        my $stock_id = $columns[0];

                        my $stock_name = $stock_info{$stock_id}->{uniquename};
                        my $value = $columns[$col_counter+1];
                        if (defined $value && $value ne '') {
                            $result_blup_data_altered_env_4->{$stock_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $genetic_effect_min_altered_env_4) {
                                $genetic_effect_min_altered_env_4 = $value;
                            }
                            elsif ($value >= $genetic_effect_max_altered_env_4) {
                                $genetic_effect_max_altered_env_4 = $value;
                            }

                            $genetic_effect_sum_altered_env_4 += abs($value);
                            $genetic_effect_sum_square_altered_env_4 = $genetic_effect_sum_square_altered_env_4 + $value*$value;
                        }
                        $col_counter++;
                    }
                    $current_gen_row_count++;
                }
            close($fh);

            open(my $fh_2dspl, '<', $stats_out_tempfile_2dspl) or die "Could not open file '$stats_out_tempfile_2dspl' $!";
                print STDERR "Opened $stats_out_tempfile_2dspl\n";
                my $header_2dspl = <$fh_2dspl>;
                my @header_cols_2dspl;
                if ($csv->parse($header_2dspl)) {
                    @header_cols_2dspl = $csv->fields();
                }
                shift @header_cols_2dspl;
                while (my $row_2dspl = <$fh_2dspl>) {
                    my @columns;
                    if ($csv->parse($row_2dspl)) {
                        @columns = $csv->fields();
                    }
                    my $col_counter = 0;
                    foreach my $encoded_trait (@header_cols_2dspl) {
                        my $trait = $trait_name_encoder_rev{$encoded_trait};
                        my $plot_id = $columns[0];

                        my $plot_name = $plot_id_map{$plot_id};
                        my $value = $columns[$col_counter+1];
                        if (defined $value && $value ne '') {
                            $result_blup_spatial_data_altered_env_4->{$plot_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $env_effect_min_altered_env_4) {
                                $env_effect_min_altered_env_4 = $value;
                            }
                            elsif ($value >= $env_effect_max_altered_env_4) {
                                $env_effect_max_altered_env_4 = $value;
                            }

                            $env_effect_sum_altered_env_4 += abs($value);
                            $env_effect_sum_square_altered_env_4 = $env_effect_sum_square_altered_env_4 + $value*$value;
                        }
                        $col_counter++;
                    }
                    $current_env_row_count++;
                }
            close($fh_2dspl);

            open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                print STDERR "Opened $stats_out_tempfile_residual\n";
                my $header_residual = <$fh_residual>;
                my @header_cols_residual;
                if ($csv->parse($header_residual)) {
                    @header_cols_residual = $csv->fields();
                }
                while (my $row = <$fh_residual>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $residual = $columns[1 + $_];
                        my $fitted = $columns[1 + $number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_4->{$stock_name}->{$trait_name} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_4 += abs($residual);
                            $residual_sum_square_altered_env_4 = $residual_sum_square_altered_env_4 + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_4->{$stock_name}->{$trait_name} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_4 = $model_sum_square_residual_altered_env_4 + $residual*$residual;
                    }
                }
            close($fh_residual);

            open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                my $header_cv1 = <$fh_cv1>;
                my @header_cols_cv1;
                if ($csv->parse($header_cv1)) {
                    @header_cols_cv1 = $csv->fields();
                }
                while (my $row = <$fh_cv1>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_4 = $model_sum_square_cv1_altered_env_4 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv1);

            open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                my $header_cv2 = <$fh_cv2>;
                my @header_cols_cv2;
                if ($csv->parse($header_cv2)) {
                    @header_cols_cv2 = $csv->fields();
                }
                while (my $row = <$fh_cv2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_4 = $model_sum_square_cv2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv2);

            open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                my $header_cv3 = <$fh_cv3>;
                my @header_cols_cv3;
                if ($csv->parse($header_cv3)) {
                    @header_cols_cv3 = $csv->fields();
                }
                while (my $row = <$fh_cv3>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_4 = $model_sum_square_cv3_altered_env_4 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv3);

            open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                my $header_cv4 = <$fh_cv4>;
                my @header_cols_cv4;
                if ($csv->parse($header_cv4)) {
                    @header_cols_cv4 = $csv->fields();
                }
                while (my $row = <$fh_cv4>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_4 = $model_sum_square_cv4_altered_env_4 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv4);

            open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                my $header_cv5 = <$fh_cv5>;
                my @header_cols_cv5;
                if ($csv->parse($header_cv5)) {
                    @header_cols_cv5 = $csv->fields();
                }
                while (my $row = <$fh_cv5>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_4 = $model_sum_square_cv5_altered_env_4 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv5);

            open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                my $header_cv1_2 = <$fh_cv1_2>;
                my @header_cols_cv1_2;
                if ($csv->parse($header_cv1_2)) {
                    @header_cols_cv1_2 = $csv->fields();
                }
                while (my $row = <$fh_cv1_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_4 = $model_sum_square_cv1_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv1_2);

            open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                my $header_cv2_2 = <$fh_cv2_2>;
                my @header_cols_cv2_2;
                if ($csv->parse($header_cv2_2)) {
                    @header_cols_cv2_2 = $csv->fields();
                }
                while (my $row = <$fh_cv2_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_4 = $model_sum_square_cv2_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv2_2);

            open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                my $header_cv3_2 = <$fh_cv3_2>;
                my @header_cols_cv3_2;
                if ($csv->parse($header_cv3_2)) {
                    @header_cols_cv3_2 = $csv->fields();
                }
                while (my $row = <$fh_cv3_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_4 = $model_sum_square_cv3_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv3_2);

            open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                my $header_cv4_2 = <$fh_cv4_2>;
                my @header_cols_cv4_2;
                if ($csv->parse($header_cv4_2)) {
                    @header_cols_cv4_2 = $csv->fields();
                }
                while (my $row = <$fh_cv4_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_4 = $model_sum_square_cv4_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv4_2);

            open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                my $header_cv5_2 = <$fh_cv5_2>;
                my @header_cols_cv5_2;
                if ($csv->parse($header_cv5_2)) {
                    @header_cols_cv5_2 = $csv->fields();
                }
                while (my $row = <$fh_cv5_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_4 = $model_sum_square_cv5_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv5_2);

            open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                print STDERR "Opened $stats_out_tempfile_varcomp\n";
                my $header_varcomp = <$fh_varcomp>;
                my @header_cols_varcomp;
                if ($csv->parse($header_varcomp)) {
                    @header_cols_varcomp = $csv->fields();
                }
                while (my $row = <$fh_varcomp>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    push @varcomp_altered_env_4, \@columns;
                }
            close($fh_varcomp);

            if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                $run_stats_fault = 1;
            }
        }

        if ($run_stats_fault == 1) {
            print STDERR "ERROR IN R CMD\n";
            return {error=>'Error in R! Try a larger tolerance'};
        }
    }
    elsif ($statistics_select eq 'sommer_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_pure_2dspl_genetic_blups') {
        my @encoded_traits = values %trait_name_encoder;
        foreach my $t (@encoded_traits) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;
                    my @header_cols;
                    if ($csv->parse($header)) {
                        @header_cols = $csv->fields();
                    }

                    while (my $row = <$fh>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $col_counter = 0;
                        foreach my $encoded_trait (@header_cols) {
                            if ($encoded_trait eq $t) {
                                my $trait = $trait_name_encoder_rev{$encoded_trait};
                                my $stock_id = $columns[0];

                                my $stock_name = $stock_info{$stock_id}->{uniquename};
                                my $value = $columns[$col_counter+1];
                                if (defined $value && $value ne '') {
                                    $result_blup_data_altered_env_4->{$stock_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                                    if ($value < $genetic_effect_min_altered_env_4) {
                                        $genetic_effect_min_altered_env_4 = $value;
                                    }
                                    elsif ($value >= $genetic_effect_max_altered_env_4) {
                                        $genetic_effect_max_altered_env_4 = $value;
                                    }

                                    $genetic_effect_sum_altered_env_4 += abs($value);
                                    $genetic_effect_sum_square_altered_env_4 = $genetic_effect_sum_square_altered_env_4 + $value*$value;
                                }
                            }
                            $col_counter++;
                        }
                        $current_gen_row_count++;
                    }
                close($fh);

                open(my $fh_2dspl, '<', $stats_out_tempfile_2dspl) or die "Could not open file '$stats_out_tempfile_2dspl' $!";
                    print STDERR "Opened $stats_out_tempfile_2dspl\n";
                    my $header_2dspl = <$fh_2dspl>;
                    my @header_cols_2dspl;
                    if ($csv->parse($header_2dspl)) {
                        @header_cols_2dspl = $csv->fields();
                    }
                    shift @header_cols_2dspl;
                    while (my $row_2dspl = <$fh_2dspl>) {
                        my @columns;
                        if ($csv->parse($row_2dspl)) {
                            @columns = $csv->fields();
                        }
                        my $col_counter = 0;
                        foreach my $encoded_trait (@header_cols_2dspl) {
                            if ($encoded_trait eq $t) {
                                my $trait = $trait_name_encoder_rev{$encoded_trait};
                                my $plot_id = $columns[0];

                                my $plot_name = $plot_id_map{$plot_id};
                                my $value = $columns[$col_counter+1];
                                if (defined $value && $value ne '') {
                                    $result_blup_spatial_data_altered_env_4->{$plot_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                                    if ($value < $env_effect_min_altered_env_4) {
                                        $env_effect_min_altered_env_4 = $value;
                                    }
                                    elsif ($value >= $env_effect_max_altered_env_4) {
                                        $env_effect_max_altered_env_4 = $value;
                                    }

                                    $env_effect_sum_altered_env_4 += abs($value);
                                    $env_effect_sum_square_altered_env_4 = $env_effect_sum_square_altered_env_4 + $value*$value;
                                }
                            }
                            $col_counter++;
                        }
                        $current_env_row_count++;
                    }
                close($fh_2dspl);

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_4->{$stock_name}->{$trait_name} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_4 += abs($residual);
                            $residual_sum_square_altered_env_4 = $residual_sum_square_altered_env_4 + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_4->{$stock_name}->{$trait_name} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_4 = $model_sum_square_residual_altered_env_4 + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_4 = $model_sum_square_cv1_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_4 = $model_sum_square_cv2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_4 = $model_sum_square_cv3_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_4 = $model_sum_square_cv4_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_4 = $model_sum_square_cv5_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_4 = $model_sum_square_cv1_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_4 = $model_sum_square_cv2_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_4 = $model_sum_square_cv3_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_4 = $model_sum_square_cv4_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_4 = $model_sum_square_cv5_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        push @varcomp_altered_env_4, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {

        print STDERR Dumper $statistics_cmd;
        my $status_r = system($statistics_cmd);

        my @pheno_var;
        open(my $fh_r, '<', $stats_out_param_tempfile) or die "Could not open file '$stats_out_param_tempfile' $!";
            print STDERR "Opened $stats_out_param_tempfile\n";

            while (defined(my $row = <$fh_r>)) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @pheno_var, \@columns;
            }
        close($fh_r);
        # print STDERR Dumper \@pheno_var;

        my $stats_tempfile_2_basename = basename($stats_tempfile_2);
        my $grm_file_basename = basename($grm_rename_tempfile);
        my $permanent_environment_structure_file_basename = basename($permanent_environment_structure_tempfile);
        my $permanent_environment_structure_env_file_basename = basename($permanent_environment_structure_env_tempfile_mat);
        #my @phenotype_header = ("id", "plot_id", "replicate", "time", "replicate_time", "ind_replicate", @sorted_trait_names, "phenotype");

        my $effect_1_levels = scalar(@rep_time_factors);
        my $effect_grm_levels = scalar(@unique_accession_names);
        my $effect_pe_levels = scalar(@ind_rep_factors);

        print STDERR Dumper $stats_tempfile_2;
        my $data_cv_cmd = 'R -e "mat <- read.csv(\''.$stats_tempfile_2.'\', header=FALSE, sep=\' \');
        randomized_positions <- sample(length(mat[,1]));
        cv_step_size <- length(mat[,1]) %/% 5;
        cv_step_size_modulo <- length(mat[,1]) %% 5;
        mat_CV1 <- mat; mat_CV2 <- mat; mat_CV3 <- mat; mat_CV4 <- mat; mat_CV5 <- mat;
        mat_CV1[c(randomized_positions[1:cv_step_size]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV2[c(randomized_positions[(cv_step_size+1):(2*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV3[c(randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV4[c(randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV5[c(randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV1_2 <- mat; mat_CV2_2 <- mat; mat_CV3_2 <- mat; mat_CV4_2 <- mat; mat_CV5_2 <- mat;
        mat_CV1_2[c(randomized_positions[1:cv_step_size]),ncol(mat)] <- -999;
        mat_CV2_2[c(randomized_positions[(cv_step_size+1):(2*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV3_2[c(randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV4_2[c(randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV5_2[c(randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]),ncol(mat)] <- -999;
        write.table(mat, file=\''.$stats_tempfile_2.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV1, file=\''.$stats_out_cv1_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV2, file=\''.$stats_out_cv2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV3, file=\''.$stats_out_cv3_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV4, file=\''.$stats_out_cv4_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV5, file=\''.$stats_out_cv5_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV1_2, file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV2_2, file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV3_2, file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV4_2, file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV5_2, file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        "';
        my $status_cv_files = system($data_cv_cmd);

        my $stats_out_cv1_predict_tempfile_basename = basename($stats_out_cv1_predict_tempfile);
        my $stats_out_cv2_predict_tempfile_basename = basename($stats_out_cv2_predict_tempfile);
        my $stats_out_cv3_predict_tempfile_basename = basename($stats_out_cv3_predict_tempfile);
        my $stats_out_cv4_predict_tempfile_basename = basename($stats_out_cv4_predict_tempfile);
        my $stats_out_cv5_predict_tempfile_basename = basename($stats_out_cv5_predict_tempfile);

        my $stats_out_cv1_2_predict_tempfile_basename = basename($stats_out_cv1_2_predict_tempfile);
        my $stats_out_cv2_2_predict_tempfile_basename = basename($stats_out_cv2_2_predict_tempfile);
        my $stats_out_cv3_2_predict_tempfile_basename = basename($stats_out_cv3_2_predict_tempfile);
        my $stats_out_cv4_2_predict_tempfile_basename = basename($stats_out_cv4_2_predict_tempfile);
        my $stats_out_cv5_2_predict_tempfile_basename = basename($stats_out_cv5_2_predict_tempfile);

        @param_file_rows_2 = (
            '(CO)VARIANCES'
        );
        foreach (@pheno_var) {
            my $s = join ' ', @$_;
            push @param_file_rows_2, $s;
        }
        @param_file_rows_4 = (
            '(CO)VARIANCES'
        );
        foreach (@pheno_var) {
            my $s = join ' ', @$_;
            push @param_file_rows_4, $s;
        }

        open(my $Fp, ">", $parameter_tempfile) || die "Can't open file ".$parameter_tempfile;
            foreach ((@param_file_rows_data, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp "$_\n";
            }
        close($Fp);

        open(my $Fp_cv1, ">", $parameter_tempfile_cv1) || die "Can't open file ".$parameter_tempfile_cv1;
            foreach ((@param_file_rows_data_cv1, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv1 "$_\n";
            }
        close($Fp_cv1);

        open(my $Fp_cv2, ">", $parameter_tempfile_cv2) || die "Can't open file ".$parameter_tempfile_cv2;
            foreach ((@param_file_rows_data_cv2, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv2 "$_\n";
            }
        close($Fp_cv2);

        open(my $Fp_cv3, ">", $parameter_tempfile_cv3) || die "Can't open file ".$parameter_tempfile_cv3;
            foreach ((@param_file_rows_data_cv3, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv3 "$_\n";
            }
        close($Fp_cv3);

        open(my $Fp_cv4, ">", $parameter_tempfile_cv4) || die "Can't open file ".$parameter_tempfile_cv4;
            foreach ((@param_file_rows_data_cv4, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv4 "$_\n";
            }
        close($Fp_cv4);

        open(my $Fp_cv5, ">", $parameter_tempfile_cv5) || die "Can't open file ".$parameter_tempfile_cv5;
            foreach ((@param_file_rows_data_cv5, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv5 "$_\n";
            }
        close($Fp_cv5);

        my $command_name = '';
        if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'blupf90_grm_random_regression_dap_blups') {
            $command_name = 'blupf90';
        }
        elsif ($statistics_select eq 'airemlf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
            $command_name = 'airemlf90';
        }

        my $parameter_tempfile_basename = basename($parameter_tempfile);
        my $parameter_tempfile_cv1_basename = basename($parameter_tempfile_cv1);
        my $parameter_tempfile_cv2_basename = basename($parameter_tempfile_cv2);
        my $parameter_tempfile_cv3_basename = basename($parameter_tempfile_cv3);
        my $parameter_tempfile_cv4_basename = basename($parameter_tempfile_cv4);
        my $parameter_tempfile_cv5_basename = basename($parameter_tempfile_cv5);
        my $parameter_tempfile_cv1_2_basename = basename($parameter_tempfile_cv1_2);
        my $parameter_tempfile_cv2_2_basename = basename($parameter_tempfile_cv2_2);
        my $parameter_tempfile_cv3_2_basename = basename($parameter_tempfile_cv3_2);
        my $parameter_tempfile_cv4_2_basename = basename($parameter_tempfile_cv4_2);
        my $parameter_tempfile_cv5_2_basename = basename($parameter_tempfile_cv5_2);

        print STDERR Dumper $cmd_f90;
        my $status = system($cmd_f90);

        my @log_output_rows;
        open(my $fh_log, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
            print STDERR "Opened $stats_out_tempfile\n";
            while (my $row = <$fh_log>) {
                print STDERR $row;
                push @log_output_rows, $row;
            }
        close($fh_log);

        my $log_output = join '', @log_output_rows;
        my ($gen_var_string) = $log_output =~ /Genetic variance\(s\) for effect  2(.*?)correlations/gs;
        @rr_coeff_genetic_covariance_altered_env_4 = split ' ', $gen_var_string;
        print STDERR Dumper \@rr_coeff_genetic_covariance_altered_env_4;
        my ($env_var_string) = $log_output =~ /Genetic variance\(s\) for effect  $legendre_order_number_env_var_pos(.*?)correlations/gs;
        @rr_coeff_env_covariance_altered_env_4 = split ' ', $env_var_string;
        print STDERR Dumper \@rr_coeff_env_covariance_altered_env_4;
        my (@gen_cor_string) = $log_output =~ /correlations(.*?)eigenvectors/gs;
        @rr_coeff_genetic_correlation_altered_env_4 = split ' ', $gen_cor_string[0];
        print STDERR Dumper \@rr_coeff_genetic_correlation_altered_env_4;
        @rr_coeff_env_correlation_altered_env_4 = split ' ', $gen_cor_string[1];
        print STDERR Dumper \@rr_coeff_env_correlation_altered_env_4;
        my ($res_se_string) = $log_output =~ /SE for R(.*?)\* FINISHED \(AIREMLF90\)/gs;
        print STDERR Dumper $res_se_string;
        # $rr_residual_variance_altered_env_4 = ($res_se_string**2)*$number_plots;
        $rr_residual_variance_altered_env_4 = $res_se_string;
        print STDERR Dumper $rr_residual_variance_altered_env_4;

        @param_file_rows_6 = (
            '(CO)VARIANCES'
        );
        my $cov_gen_counter = 0;
        foreach my $i (0..$legendre_order_number) {
            my @cov_row;
            foreach my $j (0..$legendre_order_number) {
                push @cov_row, $rr_coeff_genetic_covariance_altered_env_4[$cov_gen_counter];
                $cov_gen_counter++;
            }
            my $s = join ' ', @cov_row;
            push @param_file_rows_6, $s;
        }

        @param_file_rows_7 = (
            '(CO)VARIANCES'
        );
        my $cov_env_counter = 0;
        foreach my $i (0..$legendre_order_number) {
            my @cov_row;
            foreach my $j (0..$legendre_order_number) {
                push @cov_row, $rr_coeff_env_covariance_altered_env_4[$cov_env_counter];
                $cov_env_counter++;
            }
            my $s = join ' ', @cov_row;
            push @param_file_rows_7, $s;
        }

        open(my $Fp_cv1_2, ">", $parameter_tempfile_cv1_2) || die "Can't open file ".$parameter_tempfile_cv1_2;
            foreach ((@param_file_rows_data_cv1, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv1_2 "$_\n";
            }
        close($Fp_cv1_2);

        open(my $Fp_cv2_2, ">", $parameter_tempfile_cv2_2) || die "Can't open file ".$parameter_tempfile_cv2_2;
            foreach ((@param_file_rows_data_cv2, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv2_2 "$_\n";
            }
        close($Fp_cv2_2);

        open(my $Fp_cv3_2, ">", $parameter_tempfile_cv3_2) || die "Can't open file ".$parameter_tempfile_cv3_2;
            foreach ((@param_file_rows_data_cv3, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv3_2 "$_\n";
            }
        close($Fp_cv3_2);

        open(my $Fp_cv4_2, ">", $parameter_tempfile_cv4_2) || die "Can't open file ".$parameter_tempfile_cv4_2;
            foreach ((@param_file_rows_data_cv4, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv4_2 "$_\n";
            }
        close($Fp_cv4_2);

        open(my $Fp_cv5_2, ">", $parameter_tempfile_cv5_2) || die "Can't open file ".$parameter_tempfile_cv5_2;
            foreach ((@param_file_rows_data_cv5, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv5_2 "$_\n";
            }
        close($Fp_cv5_2);

        my $q_time = "SELECT t.cvterm_id FROM cvterm as t JOIN cv ON(t.cv_id=cv.cv_id) WHERE t.name=? and cv.name=?;";
        my $h_time = $schema->storage->dbh()->prepare($q_time);

        $yhat_residual_tempfile = $tmp_stats_dir."/yhat_residual";
        open(my $fh_yhat_res, '<', $yhat_residual_tempfile) or die "Could not open file '$yhat_residual_tempfile' $!";
            print STDERR "Opened $yhat_residual_tempfile\n";

            my $pred_res_counter = 0;
            my $trait_counter = 0;
            while (my $row = <$fh_yhat_res>) {
                # print STDERR $row;
                my @vals = split ' ', $row;
                my $pred = $vals[0];
                my $residual = $vals[1];
                $model_sum_square_residual_altered_env_4 = $model_sum_square_residual_altered_env_4 + $residual*$residual;

                my $plot_name = $plot_id_count_map_reverse{$pred_res_counter};
                my $time = $time_count_map_reverse{$pred_res_counter};

                if (defined $residual && $residual ne '') {
                    $result_residual_data_altered_env_4->{$plot_name}->{$seen_times{$time}} = [$residual, $timestamp, $user_name, '', ''];
                    $residual_sum_altered_env_4 += abs($residual);
                    $residual_sum_square_altered_env_4 = $residual_sum_square_altered_env_4 + $residual*$residual;
                }
                if (defined $pred && $pred ne '') {
                    $result_fitted_data_altered_env_4->{$plot_name}->{$seen_times{$time}} = [$pred, $timestamp, $user_name, '', ''];
                }

                $pred_res_counter++;
            }
        close($fh_yhat_res);

        $blupf90_solutions_tempfile = $tmp_stats_dir."/solutions";
        open(my $fh_sol, '<', $blupf90_solutions_tempfile) or die "Could not open file '$blupf90_solutions_tempfile' $!";
            print STDERR "Opened $blupf90_solutions_tempfile\n";

            my $head = <$fh_sol>;
            print STDERR $head;

            my $solution_file_counter = 0;
            my $grm_sol_counter = 0;
            my $grm_sol_trait_counter = 0;
            my $pe_sol_counter = 0;
            my $pe_sol_trait_counter = 0;
            while (defined(my $row = <$fh_sol>)) {
                # print STDERR $row;
                my @vals = split ' ', $row;
                my $level = $vals[2];
                my $value = $vals[3];
                if ($solution_file_counter < $effect_1_levels) {
                    $fixed_effects_altered_env_4{$solution_file_counter}->{$level} = $value;
                }
                elsif ($solution_file_counter < $effect_1_levels + $effect_grm_levels*($legendre_order_number+1)) {
                    my $accession_name = $accession_id_factor_map_reverse{$level};
                    if ($grm_sol_counter < $effect_grm_levels-1) {
                        $grm_sol_counter++;
                    }
                    else {
                        $grm_sol_counter = 0;
                        $grm_sol_trait_counter++;
                    }
                    if (defined $value && $value ne '') {
                        push @{$rr_genetic_coefficients_altered_env_4{$accession_name}}, $value;
                    }
                }
                else {
                    my $plot_name = $plot_id_factor_map_reverse{$level};
                    if ($pe_sol_counter < $effect_pe_levels-1) {
                        $pe_sol_counter++;
                    }
                    else {
                        $pe_sol_counter = 0;
                        $pe_sol_trait_counter++;
                    }
                    if (defined $value && $value ne '') {
                        push @{$rr_temporal_coefficients_altered_env_4{$plot_name}}, $value;
                    }
                }
                $solution_file_counter++;
            }
        close($fh_sol);

        # print STDERR Dumper \%rr_genetic_coefficients_altered;
        # print STDERR Dumper \%rr_temporal_coefficients_altered;

        open(my $Fgc, ">", $coeff_genetic_tempfile) || die "Can't open file ".$coeff_genetic_tempfile;

        while ( my ($accession_name, $coeffs) = each %rr_genetic_coefficients_altered_env_4) {
            my @line = ($accession_name, @$coeffs);
            my $line_string = join ',', @line;
            print $Fgc "$line_string\n";

            foreach my $t_i (0..20) {
                my $time = $t_i*5/100;
                my $time_rescaled = sprintf("%.2f", $time*($time_max - $time_min) + $time_min);

                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                my $time_term_string = '';
                if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {
                    $time_term_string = "GDD $time_rescaled";
                }
                elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
                    $time_term_string = "day $time_rescaled"
                }
                $h_time->execute($time_term_string, 'cxgn_time_ontology');
                my ($time_cvterm_id) = $h_time->fetchrow_array();

                if (!$time_cvterm_id) {
                    my $new_time_term = $schema->resultset("Cv::Cvterm")->create_with({
                       name => $time_term_string,
                       cv => 'cxgn_time_ontology'
                    });
                    $time_cvterm_id = $new_time_term->cvterm_id();
                }
                my $time_term_string_blup = SGN::Model::Cvterm::get_trait_from_cvterm_id($schema, $time_cvterm_id, 'extended');

                $result_blup_data_altered_env_4->{$accession_name}->{$time_term_string_blup} = [$value, $timestamp, $user_name, '', ''];
            }
        }
        close($Fgc);

        while ( my ($accession_name, $coeffs) = each %rr_genetic_coefficients_altered_env_4) {
            foreach my $time_term (@sorted_trait_names) {
                my $time = ($time_term - $time_min)/($time_max - $time_min);
                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                $result_blup_data_delta_altered_env_4->{$accession_name}->{$time_term} = [$value, $timestamp, $user_name, '', ''];

                if ($value < $genetic_effect_min_altered_env_4) {
                    $genetic_effect_min_altered_env_4 = $value;
                }
                elsif ($value >= $genetic_effect_max_altered_env_4) {
                    $genetic_effect_max_altered_env_4 = $value;
                }

                $genetic_effect_sum_altered_env_4 += abs($value);
                $genetic_effect_sum_square_altered_env_4 = $genetic_effect_sum_square_altered_env_4 + $value*$value;
            }
        }

        open(my $Fpc, ">", $coeff_pe_tempfile) || die "Can't open file ".$coeff_pe_tempfile;

        while ( my ($plot_name, $coeffs) = each %rr_temporal_coefficients_altered_env_4) {
            my @line = ($plot_name, @$coeffs);
            my $line_string = join ',', @line;
            print $Fpc "$line_string\n";

            foreach my $t_i (0..20) {
                my $time = $t_i*5/100;
                my $time_rescaled = sprintf("%.2f", $time*($time_max - $time_min) + $time_min);

                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                my $time_term_string = '';
                if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {
                    $time_term_string = "GDD $time_rescaled";
                }
                elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
                    $time_term_string = "day $time_rescaled"
                }
                $h_time->execute($time_term_string, 'cxgn_time_ontology');
                my ($time_cvterm_id) = $h_time->fetchrow_array();

                if (!$time_cvterm_id) {
                    my $new_time_term = $schema->resultset("Cv::Cvterm")->create_with({
                       name => $time_term_string,
                       cv => 'cxgn_time_ontology'
                    });
                    $time_cvterm_id = $new_time_term->cvterm_id();
                }
                my $time_term_string_pe = SGN::Model::Cvterm::get_trait_from_cvterm_id($schema, $time_cvterm_id, 'extended');

                $result_blup_pe_data_altered_env_4->{$plot_name}->{$time_term_string_pe} = [$value, $timestamp, $user_name, '', ''];
            }
        }
        close($Fpc);

        while ( my ($plot_name, $coeffs) = each %rr_temporal_coefficients_altered_env_4) {
            foreach my $time_term (@sorted_trait_names) {
                my $time = ($time_term - $time_min)/($time_max - $time_min);
                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                $result_blup_pe_data_delta_altered_env_4->{$plot_name}->{$time_term} = [$value, $timestamp, $user_name, '', ''];

                if ($value < $env_effect_min_altered_env_4) {
                    $env_effect_min_altered_env_4 = $value;
                }
                elsif ($value >= $env_effect_max_altered_env_4) {
                    $env_effect_max_altered_env_4 = $value;
                }

                $env_effect_sum_altered_env_4 += abs($value);
                $env_effect_sum_square_altered_env_4 = $env_effect_sum_square_altered_env_4 + $value*$value;
            }
        }

        if ($perform_cv) {
            my $cmd_f90_cv1 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv1_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv1;
            my $status_cv1 = system($cmd_f90_cv1);

            open(my $fh_log_cv1, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv1>) {
                    print STDERR $row;
                }
            close($fh_log_cv1);

            my $yhat_residual_tempfile_cv1 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv1, '<', $yhat_residual_tempfile_cv1) or die "Could not open file '$yhat_residual_tempfile_cv1' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv1\n";

                while (my $row = <$fh_yhat_res_cv1>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv1_altered_env_4 = $model_sum_square_cv1_altered_env_4 + $residual*$residual;
                }
            close($fh_yhat_res_cv1);

            my $cmd_f90_cv2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv2_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv2;
            my $status_cv2 = system($cmd_f90_cv2);

            open(my $fh_log_cv2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv2>) {
                    print STDERR $row;
                }
            close($fh_log_cv2);

            my $yhat_residual_tempfile_cv2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv2, '<', $yhat_residual_tempfile_cv2) or die "Could not open file '$yhat_residual_tempfile_cv2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv2\n";

                while (my $row = <$fh_yhat_res_cv2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv2_altered_env_4 = $model_sum_square_cv2_altered_env_4 + $residual*$residual;
                }
            close($fh_yhat_res_cv2);

            my $cmd_f90_cv3 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv3_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv3;
            my $status_cv3 = system($cmd_f90_cv3);

            open(my $fh_log_cv3, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv3>) {
                    print STDERR $row;
                }
            close($fh_log_cv3);

            my $yhat_residual_tempfile_cv3 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv3, '<', $yhat_residual_tempfile_cv3) or die "Could not open file '$yhat_residual_tempfile_cv3' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv3\n";

                while (my $row = <$fh_yhat_res_cv3>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv3_altered_env_4 = $model_sum_square_cv3_altered_env_4 + $residual*$residual;
                }
            close($fh_yhat_res_cv3);

            my $cmd_f90_cv4 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv4_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv4;
            my $status_cv4 = system($cmd_f90_cv4);

            open(my $fh_log_cv4, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv4>) {
                    print STDERR $row;
                }
            close($fh_log_cv4);

            my $yhat_residual_tempfile_cv4 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv4, '<', $yhat_residual_tempfile_cv4) or die "Could not open file '$yhat_residual_tempfile_cv4' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv4\n";

                while (my $row = <$fh_yhat_res_cv4>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv4_altered_env_4 = $model_sum_square_cv4_altered_env_4 + $residual*$residual;
                }
            close($fh_yhat_res_cv4);

            my $cmd_f90_cv5 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv5_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv5;
            my $status_cv5 = system($cmd_f90_cv5);

            open(my $fh_log_cv5, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv5>) {
                    print STDERR $row;
                }
            close($fh_log_cv5);

            my $yhat_residual_tempfile_cv5 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv5, '<', $yhat_residual_tempfile_cv5) or die "Could not open file '$yhat_residual_tempfile_cv5' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv5\n";

                while (my $row = <$fh_yhat_res_cv5>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv5_altered_env_4 = $model_sum_square_cv5_altered_env_4 + $residual*$residual;
                }
            close($fh_yhat_res_cv5);

            my $cmd_f90_cv1_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv1_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv1_2;
            my $status_cv1_2 = system($cmd_f90_cv1_2);

            open(my $fh_log_cv1_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv1_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv1_2);

            my $yhat_residual_tempfile_cv1_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv1_2, '<', $yhat_residual_tempfile_cv1_2) or die "Could not open file '$yhat_residual_tempfile_cv1_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv1_2\n";

                while (my $row = <$fh_yhat_res_cv1_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv1_2_altered_env_4 = $model_sum_square_cv1_2_altered_env_4 + $residual*$residual;
                }
            close($fh_yhat_res_cv1_2);

            my $cmd_f90_cv2_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv2_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv2_2;
            my $status_cv2_2 = system($cmd_f90_cv2_2);

            open(my $fh_log_cv2_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv2_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv2_2);

            my $yhat_residual_tempfile_cv2_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv2_2, '<', $yhat_residual_tempfile_cv2_2) or die "Could not open file '$yhat_residual_tempfile_cv2_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv2_2\n";

                while (my $row = <$fh_yhat_res_cv2_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv2_2_altered_env_4 = $model_sum_square_cv2_2_altered_env_4 + $residual*$residual;
                }
            close($fh_yhat_res_cv2_2);

            my $cmd_f90_cv3_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv3_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv3_2;
            my $status_cv3_2 = system($cmd_f90_cv3_2);

            open(my $fh_log_cv3_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv3_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv3_2);

            my $yhat_residual_tempfile_cv3_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv3_2, '<', $yhat_residual_tempfile_cv3_2) or die "Could not open file '$yhat_residual_tempfile_cv3_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv3_2\n";

                while (my $row = <$fh_yhat_res_cv3_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv3_2_altered_env_4 = $model_sum_square_cv3_2_altered_env_4 + $residual*$residual;
                }
            close($fh_yhat_res_cv3_2);

            my $cmd_f90_cv4_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv4_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv4_2;
            my $status_cv4_2 = system($cmd_f90_cv4_2);

            open(my $fh_log_cv4_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv4_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv4_2);

            my $yhat_residual_tempfile_cv4_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv4_2, '<', $yhat_residual_tempfile_cv4_2) or die "Could not open file '$yhat_residual_tempfile_cv4_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv4_2\n";

                while (my $row = <$fh_yhat_res_cv4_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv4_2_altered_env_4 = $model_sum_square_cv4_2_altered_env_4 + $residual*$residual;
                }
            close($fh_yhat_res_cv4_2);

            my $cmd_f90_cv5_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv5_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv5_2;
            my $status_cv5_2 = system($cmd_f90_cv5_2);

            open(my $fh_log_cv5_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv5_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv5_2);

            my $yhat_residual_tempfile_cv5_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv5_2, '<', $yhat_residual_tempfile_cv5_2) or die "Could not open file '$yhat_residual_tempfile_cv5_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv5_2\n";

                while (my $row = <$fh_yhat_res_cv5_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv5_2_altered_env_4 = $model_sum_square_cv5_2_altered_env_4 + $residual*$residual;
                }
            close($fh_yhat_res_cv5_2);
        }
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_spatial_genetic_blups') {
        foreach my $t (@sorted_trait_names) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;
                my @row_col_ordered_plots_names;

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        push @row_col_ordered_plots_names, $stock_name;
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_4->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_4 += abs($residual);
                            $residual_sum_square_altered_env_4 = $residual_sum_square_altered_env_4 + $residual*$residual;}
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_4->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_4 = $model_sum_square_residual_altered_env_4 + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;

                    my $solution_file_counter = 0;
                    while (defined(my $row = <$fh>)) {
                        # print STDERR $row;
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $level = $columns[0];
                        my $value = $columns[1];
                        my $std = $columns[2];
                        my $z_ratio = $columns[3];
                        if (defined $value && $value ne '') {
                            if ($solution_file_counter < $row_number_span) {
                                # print STDERR "$level $value \n";
                            }
                            elsif ($solution_file_counter < $row_number_span + $number_accessions) {
                                my $stock_name = $accession_id_factor_map_reverse{$solution_file_counter - $row_number_span + 1};
                                $result_blup_data_altered_env_4->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $genetic_effect_min_altered_env_4) {
                                    $genetic_effect_min_altered_env_4 = $value;
                                }
                                elsif ($value >= $genetic_effect_max_altered_env_4) {
                                    $genetic_effect_max_altered_env_4 = $value;
                                }

                                $genetic_effect_sum_altered_env_4 += abs($value);
                                $genetic_effect_sum_square_altered_env_4 = $genetic_effect_sum_square_altered_env_4 + $value*$value;

                                $current_gen_row_count++;
                            }
                            elsif ($solution_file_counter < $col_number_span + $row_number_span + $number_accessions) {
                                # print STDERR "$level $value \n";
                            }
                            else {
                                my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                                $result_blup_spatial_data_altered_env_4->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $env_effect_min_altered_env_4) {
                                    $env_effect_min_altered_env_4 = $value;
                                }
                                elsif ($value >= $env_effect_max_altered_env_4) {
                                    $env_effect_max_altered_env_4 = $value;
                                }

                                $env_effect_sum_altered_env_4 += abs($value);
                                $env_effect_sum_square_altered_env_4 = $env_effect_sum_square_altered_env_4 + $value*$value;

                                $current_env_row_count++;
                            }
                        }
                        $solution_file_counter++;
                    }
                close($fh);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_4 = $model_sum_square_cv1_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_4 = $model_sum_square_cv2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_4 = $model_sum_square_cv3_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_4 = $model_sum_square_cv4_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_4 = $model_sum_square_cv5_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_4 = $model_sum_square_cv1_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_4 = $model_sum_square_cv2_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_4 = $model_sum_square_cv3_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_4 = $model_sum_square_cv4_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_4 = $model_sum_square_cv5_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        $columns[0] = "trait:".$columns[0]."!trait_t".$t.":t".$t;
                        push @varcomp_altered_env_4, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_pure_spatial_genetic_blups') {
        $analysis_model_language = "R";

        $statistical_ontology_term = "Univariate linear mixed model 2D spline genetic BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000038"; #In the JS this is set to either Univariate linear mixed model 2D spline spatial BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000039

        $analysis_model_training_data_file_type = "nicksmixedmodelsanalytics_v1.01_asreml_grm_univariate_spatial_genetic_blups_phenotype_file";

        my @grm_old;
        open(my $fh_grm_old, '<', $grm_file) or die "Could not open file '$grm_file' $!";
            print STDERR "Opened $grm_file\n";

            while (my $row = <$fh_grm_old>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @grm_old, \@columns;
            }
        close($fh_grm_old);

        my %grm_hash_ordered;
        foreach (@grm_old) {
            my $l1 = $accession_id_factor_map{$_->[0]};
            my $l2 = $accession_id_factor_map{$_->[1]};
            my $val = sprintf("%.8f", $_->[2]);
            if ($l1 > $l2) {
                $grm_hash_ordered{$l1}->{$l2} = $val;
            }
            else {
                $grm_hash_ordered{$l2}->{$l1} = $val;
            }
        }

        open(my $fh_grm_new, '>', $grm_rename_tempfile) or die "Could not open file '$grm_rename_tempfile' $!";
            print STDERR "Opened $grm_rename_tempfile\n";

            foreach my $i (sort {$a <=> $b} keys %grm_hash_ordered) {
                my $v = $grm_hash_ordered{$i};
                foreach my $j (sort {$a <=> $b} keys %$v) {
                    my $val = $v->{$j};
                    print $fh_grm_new "$i $j $val\n";
                }
            }
        close($fh_grm_new);

        my @encoded_traits = values %trait_name_encoder;
        $number_traits = scalar(@sorted_trait_names);
        $number_accessions = scalar(@unique_accession_names);
        foreach my $t (@sorted_trait_names) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;
                my @row_col_ordered_plots_names;

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        push @row_col_ordered_plots_names, $stock_name;
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_4->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_4 += abs($residual);
                            $residual_sum_square_altered_env_4 = $residual_sum_square_altered_env_4 + $residual*$residual;}
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_4->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_4 = $model_sum_square_residual_altered_env_4 + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;

                    my $solution_file_counter = 0;
                    while (defined(my $row = <$fh>)) {
                        # print STDERR $row;
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $level = $columns[0];
                        my $value = $columns[1];
                        my $std = $columns[2];
                        my $z_ratio = $columns[3];
                        if (defined $value && $value ne '') {
                            if ($solution_file_counter < $number_accessions) {
                                my $stock_name = $accession_id_factor_map_reverse{$solution_file_counter + 1};
                                $result_blup_data_altered_env_4->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $genetic_effect_min_altered_env_4) {
                                    $genetic_effect_min_altered_env_4 = $value;
                                }
                                elsif ($value >= $genetic_effect_max_altered_env_4) {
                                    $genetic_effect_max_altered_env_4 = $value;
                                }

                                $genetic_effect_sum_altered_env_4 += abs($value);
                                $genetic_effect_sum_square_altered_env_4 = $genetic_effect_sum_square_altered_env_4 + $value*$value;

                                $current_gen_row_count++;
                            }
                            else {
                                my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                                $result_blup_spatial_data_altered_env_4->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $env_effect_min_altered_env_4) {
                                    $env_effect_min_altered_env_4 = $value;
                                }
                                elsif ($value >= $env_effect_max_altered_env_4) {
                                    $env_effect_max_altered_env_4 = $value;
                                }

                                $env_effect_sum_altered_env_4 += abs($value);
                                $env_effect_sum_square_altered_env_4 = $env_effect_sum_square_altered_env_4 + $value*$value;

                                $current_env_row_count++;
                            }
                        }
                        $solution_file_counter++;
                    }
                close($fh);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_4 = $model_sum_square_cv1_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_4 = $model_sum_square_cv2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_4 = $model_sum_square_cv3_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_4 = $model_sum_square_cv4_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_4 = $model_sum_square_cv5_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_4 = $model_sum_square_cv1_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_4 = $model_sum_square_cv2_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_4 = $model_sum_square_cv3_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_4 = $model_sum_square_cv4_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_4 = $model_sum_square_cv5_2_altered_env_4 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        $columns[0] = "trait:".$columns[0]."!trait_t".$t.":t".$t;
                        push @varcomp_altered_env_4, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'asreml_grm_multivariate_spatial_genetic_blups') {
        # print STDERR Dumper $prepare_file_cv_cmd;
        # print STDERR Dumper $statistics_cmd;
        eval {
            my $status_prepare_file_cv2 = system($prepare_file_cv2_cmd);
            my $status_prepare_file_cv = system($prepare_file_cv_cmd);
            my $status = system($statistics_cmd);
            if ($perform_cv) {
                my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
            }
        };

        my $run_stats_fault = 0;
        if ($@) {
            print STDERR "R ERROR\n";
            print STDERR Dumper $@;
            $run_stats_fault = 1;
        }
        else {
            my $current_gen_row_count = 0;
            my $current_env_row_count = 0;
            my @row_col_ordered_plots_names;

            open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                print STDERR "Opened $stats_out_tempfile_residual\n";
                my $header_residual = <$fh_residual>;
                my @header_cols_residual;
                if ($csv->parse($header_residual)) {
                    @header_cols_residual = $csv->fields();
                }
                my $residual_file_counter_index = 0;
                my $residual_file_counter = 1;
                while (my $row = <$fh_residual>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    my $residual = $columns[1];
                    my $fitted = $columns[2];
                    my $stock_name = $plot_id_map{$stock_id};
                    push @row_col_ordered_plots_names, $stock_name;
                    my $t = $sorted_trait_names[$residual_file_counter_index];
                    if ($residual_file_counter == scalar(@unique_plot_names)) {
                        $residual_file_counter = 0;
                        $residual_file_counter_index++;
                    }
                    if (defined $residual && $residual ne '') {
                        $result_residual_data_altered_env_4->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                        $residual_sum_altered_env_4 += abs($residual);
                        $residual_sum_square_altered_env_4 = $residual_sum_square_altered_env_4 + $residual*$residual;
                    }
                    if (defined $fitted && $fitted ne '') {
                        $result_fitted_data_altered_env_4->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                    }
                    $model_sum_square_residual_altered_env_4 = $model_sum_square_residual_altered_env_4 + $residual*$residual;

                    $residual_file_counter++;
                }
            close($fh_residual);

            open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                my $header = <$fh>;
                my @header_cols;
                if ($csv->parse($header)) {
                    @header_cols = $csv->fields();
                }

                my $solution_file_counter = 0;
                my $solution_file_g_counter = 1;
                my $solution_file_p_counter = 1;
                my $solution_file_counter_g_index = 0;
                my $solution_file_counter_p_index = 0;
                while (defined(my $row = <$fh>)) {
                    # print STDERR $row;
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $level = $columns[0];
                    my $value = $columns[1];
                    my $std = $columns[2];
                    my $z_ratio = $columns[3];
                    if (defined $value && $value ne '') {
                        if ($solution_file_counter < $number_accessions*$number_traits) {
                            my $t = $sorted_trait_names[$solution_file_counter_g_index];
                            if ($solution_file_g_counter == $number_accessions) {
                                $solution_file_g_counter = 0;
                                $solution_file_counter_g_index++;
                            }

                            my $stock_name = $accession_id_factor_map_reverse{$solution_file_g_counter+1};
                            $result_blup_data_altered_env_4->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $genetic_effect_min_altered_env_4) {
                                $genetic_effect_min_altered_env_4 = $value;
                            }
                            elsif ($value >= $genetic_effect_max_altered_env_4) {
                                $genetic_effect_max_altered_env_4 = $value;
                            }

                            $genetic_effect_sum_altered_env_4 += abs($value);
                            $genetic_effect_sum_square_altered_env_4 = $genetic_effect_sum_square_altered_env_4 + $value*$value;

                            $solution_file_g_counter++;
                            $current_gen_row_count++;
                        }
                        else {
                            my $t = $sorted_trait_names[$solution_file_counter_p_index];
                            if ($solution_file_p_counter == scalar(@unique_plot_names)) {
                                $solution_file_p_counter = 0;
                                $solution_file_counter_p_index++;
                            }

                            my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                            $result_blup_spatial_data_altered_env_4->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $env_effect_min_altered_env_4) {
                                $env_effect_min_altered_env_4 = $value;
                            }
                            elsif ($value >= $env_effect_max_altered_env_4) {
                                $env_effect_max_altered_env_4 = $value;
                            }

                            $env_effect_sum_altered_env_4 += abs($value);
                            $env_effect_sum_square_altered_env_4 = $env_effect_sum_square_altered_env_4 + $value*$value;

                            $solution_file_p_counter++;
                            $current_env_row_count++;
                        }
                    }
                    $solution_file_counter++;
                }
            close($fh);

            open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                my $header_cv1 = <$fh_cv1>;
                my @header_cols_cv1;
                if ($csv->parse($header_cv1)) {
                    @header_cols_cv1 = $csv->fields();
                }
                while (my $row = <$fh_cv1>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv1_altered_env_4 = $model_sum_square_cv1_altered_env_4 + ($true_value-$fitted)**2;
                }
            close($fh_cv1);

            open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                my $header_cv2 = <$fh_cv2>;
                my @header_cols_cv2;
                if ($csv->parse($header_cv2)) {
                    @header_cols_cv2 = $csv->fields();
                }
                while (my $row = <$fh_cv2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv2_altered_env_4 = $model_sum_square_cv2_altered_env_4 + ($true_value-$fitted)**2;
                }
            close($fh_cv2);

            open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                my $header_cv3 = <$fh_cv3>;
                my @header_cols_cv3;
                if ($csv->parse($header_cv3)) {
                    @header_cols_cv3 = $csv->fields();
                }
                while (my $row = <$fh_cv3>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv3_altered_env_4 = $model_sum_square_cv3_altered_env_4 + ($true_value-$fitted)**2;
                }
            close($fh_cv3);

            open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                my $header_cv4 = <$fh_cv4>;
                my @header_cols_cv4;
                if ($csv->parse($header_cv4)) {
                    @header_cols_cv4 = $csv->fields();
                }
                while (my $row = <$fh_cv4>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv4_altered_env_4 = $model_sum_square_cv4_altered_env_4 + ($true_value-$fitted)**2;
                }
            close($fh_cv4);

            open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                my $header_cv5 = <$fh_cv5>;
                my @header_cols_cv5;
                if ($csv->parse($header_cv5)) {
                    @header_cols_cv5 = $csv->fields();
                }
                while (my $row = <$fh_cv5>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv5_altered_env_4 = $model_sum_square_cv5_altered_env_4 + ($true_value-$fitted)**2;
                }
            close($fh_cv5);

            open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                my $header_cv1_2 = <$fh_cv1_2>;
                my @header_cols_cv1_2;
                if ($csv->parse($header_cv1_2)) {
                    @header_cols_cv1_2 = $csv->fields();
                }
                while (my $row = <$fh_cv1_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv1_2_altered_env_4 = $model_sum_square_cv1_2_altered_env_4 + ($true_value-$fitted)**2;
                }
            close($fh_cv1_2);

            open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                my $header_cv2_2 = <$fh_cv2_2>;
                my @header_cols_cv2_2;
                if ($csv->parse($header_cv2_2)) {
                    @header_cols_cv2_2 = $csv->fields();
                }
                while (my $row = <$fh_cv2_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv2_2_altered_env_4 = $model_sum_square_cv2_2_altered_env_4 + ($true_value-$fitted)**2;
                }
            close($fh_cv2_2);

            open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                my $header_cv3_2 = <$fh_cv3_2>;
                my @header_cols_cv3_2;
                if ($csv->parse($header_cv3_2)) {
                    @header_cols_cv3_2 = $csv->fields();
                }
                while (my $row = <$fh_cv3_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv3_2_altered_env_4 = $model_sum_square_cv3_2_altered_env_4 + ($true_value-$fitted)**2;
                }
            close($fh_cv3_2);

            open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                my $header_cv4_2 = <$fh_cv4_2>;
                my @header_cols_cv4_2;
                if ($csv->parse($header_cv4_2)) {
                    @header_cols_cv4_2 = $csv->fields();
                }
                while (my $row = <$fh_cv4_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv4_2_altered_env_4 = $model_sum_square_cv4_2_altered_env_4 + ($true_value-$fitted)**2;
                }
            close($fh_cv4_2);

            open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                my $header_cv5_2 = <$fh_cv5_2>;
                my @header_cols_cv5_2;
                if ($csv->parse($header_cv5_2)) {
                    @header_cols_cv5_2 = $csv->fields();
                }
                while (my $row = <$fh_cv5_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv5_2_altered_env_4 = $model_sum_square_cv5_2_altered_env_4 + ($true_value-$fitted)**2;
                }
            close($fh_cv5_2);

            open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                print STDERR "Opened $stats_out_tempfile_varcomp\n";
                my $header_varcomp = <$fh_varcomp>;
                my @header_cols_varcomp;
                if ($csv->parse($header_varcomp)) {
                    @header_cols_varcomp = $csv->fields();
                }
                while (my $row = <$fh_varcomp>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    push @varcomp_altered_env_4, \@columns;
                }
            close($fh_varcomp);

            if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                $run_stats_fault = 1;
            }

            if ($run_stats_fault == 1) {
                print STDERR "ERROR IN R CMD\n";
                return {error=>'Error in R! Try a larger tolerance'};
            }
        }
    }
    print STDERR "ALTERED w/SIM_ENV random $statistics_select GENETIC EFFECT SUM $genetic_effect_sum_altered_env_4\n";
    print STDERR "ALTERED w/SIM_ENV random $statistics_select ENV EFFECT SUM $env_effect_sum_altered_env_4\n";
    print STDERR Dumper [$genetic_effect_min_altered_env_4, $genetic_effect_max_altered_env_4, $env_effect_min_altered_env_4, $env_effect_max_altered_env_4];

    my @model_sum_square_altered_env_4_cv_values = ($model_sum_square_cv1_altered_env_4, $model_sum_square_cv2_altered_env_4, $model_sum_square_cv3_altered_env_4, $model_sum_square_cv4_altered_env_4, $model_sum_square_cv5_altered_env_4);
    my @model_sum_square_altered_env_4_cv_2_values = ($model_sum_square_cv1_2_altered_env_4, $model_sum_square_cv2_2_altered_env_4, $model_sum_square_cv3_2_altered_env_4, $model_sum_square_cv4_2_altered_env_4, $model_sum_square_cv5_2_altered_env_4);
    print STDERR Dumper \@model_sum_square_altered_env_4_cv_values;
    print STDERR Dumper \@model_sum_square_altered_env_4_cv_2_values;
    my $model_sum_square_altered_env_4_cv_stat = Statistics::Descriptive::Full->new();
    $model_sum_square_altered_env_4_cv_stat->add_data(@model_sum_square_altered_env_4_cv_values);
    my $model_sum_square_altered_env_cv_result_4 = {
        values => \@model_sum_square_altered_env_4_cv_values,
        variance => $model_sum_square_altered_env_4_cv_stat->variance(),
        mean => $model_sum_square_altered_env_4_cv_stat->mean()
    };
    my $model_sum_square_altered_env_4_cv_2_stat = Statistics::Descriptive::Full->new();
    $model_sum_square_altered_env_4_cv_2_stat->add_data(@model_sum_square_altered_env_4_cv_2_values);
    my $model_sum_square_altered_env_cv_2_result_4 = {
        values => \@model_sum_square_altered_env_4_cv_2_values,
        variance => $model_sum_square_altered_env_4_cv_2_stat->variance(),
        mean => $model_sum_square_altered_env_4_cv_2_stat->mean()
    };

    $env_simulation = "ar1xar1";

    my (%phenotype_data_altered_env_5, @data_matrix_altered_env_5, @data_matrix_phenotypes_altered_env_5);
    my $phenotype_min_altered_env_5 = 1000000000;
    my $phenotype_max_altered_env_5 = -1000000000;
    my $env_sim_min_5 = 10000000000000;
    my $env_sim_max_5 = -10000000000000;
    my %sim_data_5;
    my %sim_data_check_5_times;

    my $col_ro_env = 1 - $row_ro_env;
    my @stock_row_col_id_ordered;
    my $var_e = $phenotype_variance_altered*$env_variance_percent;

    eval {
        foreach my $r ($min_row..$max_row) {
            foreach my $c ($min_col..$max_col) {
                push @stock_row_col_id_ordered, $stock_row_col_id{$r}->{$c};
            }
        }
        my $max_row_dim = $max_row - $min_row + 1;
        my $max_col_dim = $max_col - $min_col + 1;

        my $sim_env_change_over_time_num_traits = scalar(@sorted_trait_names);
        my $pe_rel_cmd = 'R -e "library(data.table); library(MASS);
        pr <- '.$row_ro_env.';
        pc <- '.$col_ro_env.';
        Rr <- matrix(0,'.$max_row_dim.','.$max_row_dim.');
        for(i in c(1:'.$max_row_dim.')){
            for(j in c(i:'.$max_row_dim.')){
                Rr[i,j]=pr**(j-i);
                Rr[j,i]=Rr[i,j];
            }
        }
        Rc <- matrix(0,'.$max_col_dim.','.$max_col_dim.');
        for(i in c(1:'.$max_col_dim.')){
            for(j in c(i:'.$max_col_dim.')){
                Rc[i,j]=pc**(j-i);
                Rc[j,i]=Rc[i,j];
            }
        }
        Rscr <- kronecker(Rc,Rr)*'.$var_e.';
        Rscr <- round(Rscr, 8);
        time_corr_matrix <- matrix(NA, ncol='.$sim_env_change_over_time_num_traits.', nrow='.$sim_env_change_over_time_num_traits.');
        diag(time_corr_matrix) <- rep(1,'.$sim_env_change_over_time_num_traits.');
        ';
        if ($sim_env_change_over_time eq 'changing_gradual') {
            $pe_rel_cmd .= 'time_corr_matrix[lower.tri(time_corr_matrix)] <- rep(0.9,sum(seq(1,'.$sim_env_change_over_time_num_traits.'-1)));
            time_corr_matrix[upper.tri(time_corr_matrix)] <- rep(0.9,sum(seq(1,'.$sim_env_change_over_time_num_traits.'-1)));
            ';
        } else {
            $pe_rel_cmd .= 'time_corr_matrix[lower.tri(time_corr_matrix)] <- rep(1,sum(seq(1,'.$sim_env_change_over_time_num_traits.'-1)));
            time_corr_matrix[upper.tri(time_corr_matrix)] <- rep(1,sum(seq(1,'.$sim_env_change_over_time_num_traits.'-1)));
            ';
        }
        $pe_rel_cmd .= 'Rscr <- kronecker(time_corr_matrix,Rscr);
        Resscr <- mvrnorm(1,rep(0,length(Rscr[1,])),Rscr);
        write.table(Rscr, file=\''.$permanent_environment_structure_env_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\'\t\');
        write.table(Resscr, file=\''.$permanent_environment_structure_env_tempfile2.'\', row.names=FALSE, col.names=FALSE, sep=\'\t\');"';
        print STDERR Dumper $pe_rel_cmd;
        my $status_pe_rel = system($pe_rel_cmd);

        my %rel_pe_result_hash;
        open(my $pe_rel_res, '<', $permanent_environment_structure_env_tempfile2) or die "Could not open file '$permanent_environment_structure_env_tempfile2' $!";
            print STDERR "Opened PERMANENT ENV $env_simulation VAL FILE $permanent_environment_structure_env_tempfile2\n";

            my $current_row_num = $min_row;
            my $current_col_num = $min_col;
            my $current_trait_index = 0;
            my $current_row_count = 0;
            while (my $sim_val = <$pe_rel_res>) {
                chomp $sim_val;

                my $t = $sorted_trait_names[$current_trait_index];
                $sim_data_check_5_times{$t}->{$current_row_num}->{$current_col_num} = $sim_val;

                if ($current_row_num < $max_row) {
                    $current_row_num++;
                }
                else {
                    $current_row_num = $min_row;
                    $current_col_num++;
                }

                if ($sim_val < $env_sim_min_5) {
                    $env_sim_min_5 = $sim_val;
                }
                elsif ($sim_val >= $env_sim_max_5) {
                    $env_sim_max_5 = $sim_val;
                }

                if ($current_row_count >= scalar(@unique_plot_names)-1) {
                    $current_trait_index++;
                    $current_row_count = 0;

                    $current_row_num = $min_row;
                    $current_col_num = $min_col;
                }
                else {
                    $current_row_count++;
                }
            }
        close($pe_rel_res);
    };

    if ($permanent_environment_structure eq 'env_corr_structure') {
        my %rel_pe_result_hash;
        open(my $pe_rel_res, '<', $permanent_environment_structure_env_tempfile) or die "Could not open file '$permanent_environment_structure_env_tempfile' $!";
            print STDERR "Opened PERMANENT ENV $env_simulation CORR FILE $permanent_environment_structure_env_tempfile\n";

            my $counter1 = 0;
            while (my $row = <$pe_rel_res>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                my $stock_id1 = $stock_row_col_id_ordered[$counter1];
                if ($stock_id1) {
                    my $counter2 = 0;
                    foreach my $stock_id2 (@stock_row_col_id_ordered) {
                        my $val = $columns[$counter2];
                        $rel_pe_result_hash{$stock_id1}->{$stock_id2} = $val;
                        $counter2++;
                    }
                }
                $counter1++;
            }
        close($pe_rel_res);

        my $data_rel_pe = '';
        my %result_hash_pe;
        foreach my $s (sort { $a <=> $b } @plot_ids_ordered) {
            foreach my $r (sort { $a <=> $b } @plot_ids_ordered) {
                my $s_factor = $stock_name_row_col{$plot_id_map{$s}}->{plot_id_factor};
                my $r_factor = $stock_name_row_col{$plot_id_map{$r}}->{plot_id_factor};
                if (!exists($result_hash_pe{$s_factor}->{$r_factor}) && !exists($result_hash_pe{$r_factor}->{$s_factor})) {
                    $result_hash_pe{$s_factor}->{$r_factor} = $rel_pe_result_hash{$s}->{$r};
                }
            }
        }
        foreach my $r (sort { $a <=> $b } keys %result_hash_pe) {
            foreach my $s (sort { $a <=> $b } keys %{$result_hash_pe{$r}}) {
                my $val = $result_hash_pe{$r}->{$s};
                if (defined $val and length $val) {
                    $data_rel_pe .= "$r\t$s\t$val\n";
                }
            }
        }

        open(my $pe_rel_out, ">", $permanent_environment_structure_env_tempfile_mat) || die "Can't open file ".$permanent_environment_structure_env_tempfile_mat;
            print STDERR "Opened PERMANENT ENV $env_simulation CORR FILE 3col $permanent_environment_structure_env_tempfile_mat\n";
            print $pe_rel_out $data_rel_pe;
        close($pe_rel_out);
    }

    print STDERR "ADD SIMULATED ENV TO ALTERED PHENO ar1xar1\n";
    print STDERR Dumper [$env_sim_min_5, $env_sim_max_5];
    if ($statistics_select eq 'sommer_grm_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_genetic_blups' || $statistics_select eq 'sommer_grm_spatial_pure_2dspl_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_pure_2dspl_genetic_blups') {

        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};
            my @row = ($replicate, $block, "S".$germplasm_stock_id, $obsunit_stock_id, $row_number, $col_number, $row_number, $col_number);

            foreach my $t (@sorted_trait_names) {
                if (defined($phenotype_data_altered{$p}->{$t})) {
                    my $new_val = $phenotype_data_altered{$p}->{$t} + 0;
                    my $sim_val = $sim_data_check_5_times{$t}->{$row_number}->{$col_number};
                    $sim_val = (($sim_val - $env_sim_min_5)/($env_sim_max_5 - $env_sim_min_5))*$env_variance_percent;
                    $new_val += $sim_val;

                    if ($new_val < $phenotype_min_altered_env_5) {
                        $phenotype_min_altered_env_5 = $new_val;
                    }
                    elsif ($new_val >= $phenotype_max_altered_env_5) {
                        $phenotype_max_altered_env_5 = $new_val;
                    }

                    $sim_data_5{$p}->{$t} = $sim_val;
                    $phenotype_data_altered_env_5{$p}->{$t} = $new_val;
                    push @row, $new_val;
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, 'NA';
                }
            }
            push @data_matrix_altered_env_5, \@row;
        }

        open(my $F, ">", $stats_tempfile) || die "Can't open file ".$stats_tempfile;
            print $F $header_string."\n";
            foreach (@data_matrix_altered_env_5) {
                my $line = join ',', @$_;
                print $F "$line\n";
            }
        close($F);
    }
    elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {

        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};

            my @data_matrix_phenotypes_row;
            my $current_trait_index = 0;
            foreach my $t (@sorted_trait_names) {
                my @row = (
                    $accession_id_factor_map{$germplasm_stock_id},
                    $obsunit_stock_id,
                    $replicate,
                    $t,
                    $plot_rep_time_factor_map{$obsunit_stock_id}->{$replicate}->{$t},
                    $stock_row_col{$obsunit_stock_id}->{plot_id_factor}
                );

                my $polys = $polynomial_map{$t};
                push @row, @$polys;

                if (defined($phenotype_data_altered{$p}->{$t})) {
                    if ($use_area_under_curve) {
                        my $val = 0;
                        foreach my $counter (0..$current_trait_index) {
                            if ($counter == 0) {
                                $val = $val + $phenotype_data_altered{$p}->{$sorted_trait_names[$counter]} + 0;
                            }
                            else {
                                my $t1 = $sorted_trait_names[$counter-1];
                                my $t2 = $sorted_trait_names[$counter];
                                my $p1 = $phenotype_data_altered{$p}->{$t1} + 0;
                                my $p2 = $phenotype_data_altered{$p}->{$t2} + 0;
                                my $neg = 1;
                                my $min_val = $p1;
                                if ($p2 < $p1) {
                                    $neg = -1;
                                    $min_val = $p2;
                                }
                                $val = $val + (($neg*($p2-$p1)*($t2-$t1))/2)+($t2-$t1)*$min_val;
                            }
                        }

                        my $sim_val = $sim_data_check_5_times{$t}->{$row_number}->{$col_number};
                        $sim_val = (($sim_val - $env_sim_min_5)/($env_sim_max_5 - $env_sim_min_5))*$env_variance_percent;
                        $val += $sim_val;

                        if ($val < $phenotype_min_altered_env_5) {
                            $phenotype_min_altered_env_5 = $val;
                        }
                        elsif ($val >= $phenotype_max_altered_env_5) {
                            $phenotype_max_altered_env_5 = $val;
                        }

                        $sim_data_5{$p}->{$t} = $sim_val;
                        $phenotype_data_altered_env_5{$p}->{$t} = $val;
                        push @row, $val;
                        push @data_matrix_phenotypes_row, $val;
                    }
                    else {
                        my $val = $phenotype_data_altered{$p}->{$t} + 0;
                        my $sim_val = $sim_data_check_5_times{$t}->{$row_number}->{$col_number};
                        $sim_val = (($sim_val - $env_sim_min_5)/($env_sim_max_5 - $env_sim_min_5))*$env_variance_percent;
                        $val += $sim_val;

                        if ($val < $phenotype_min_altered_env_5) {
                            $phenotype_min_altered_env_5 = $val;
                        }
                        elsif ($val >= $phenotype_max_altered_env_5) {
                            $phenotype_max_altered_env_5 = $val;
                        }

                        $sim_data_5{$p}->{$t} = $sim_val;
                        $phenotype_data_altered_env_5{$p}->{$t} = $val;
                        push @row, $val;
                        push @data_matrix_phenotypes_row, $val;
                    }
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, '';
                    push @data_matrix_phenotypes_row, 'NA';
                }

                push @data_matrix_altered_env_5, \@row;
                push @data_matrix_phenotypes_altered_env_5, \@data_matrix_phenotypes_row;

                $current_trait_index++;
            }
        }

        open(my $F, ">", $stats_tempfile_2) || die "Can't open file ".$stats_tempfile_2;
            foreach (@data_matrix_altered_env_5) {
                my $line = join ' ', @$_;
                print $F "$line\n";
            }
        close($F);

        open(my $F2, ">", $stats_prep2_tempfile) || die "Can't open file ".$stats_prep2_tempfile;
            foreach (@data_matrix_phenotypes_altered_env_5) {
                my $line = join ',', @$_;
                print $F2 "$line\n";
            }
        close($F2);
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'asreml_grm_univariate_pure_spatial_genetic_blups' || $statistics_select eq 'asreml_grm_multivariate_spatial_genetic_blups') {
        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};

            my @row = (
                $germplasm_stock_id,
                $obsunit_stock_id,
                $replicate,
                $row_number,
                $col_number,
                $accession_id_factor_map{$germplasm_stock_id},
                $stock_row_col{$obsunit_stock_id}->{plot_id_factor}
            );

            foreach my $t (@sorted_trait_names) {
                if (defined($phenotype_data_altered{$p}->{$t})) {
                    my $new_val = $phenotype_data_altered{$p}->{$t} + 0;
                    my $sim_val = $sim_data_check_5_times{$t}->{$row_number}->{$col_number};
                    $sim_val = (($sim_val - $env_sim_min_5)/($env_sim_max_5 - $env_sim_min_5))*$env_variance_percent;
                    $new_val += $sim_val;

                    if ($new_val < $phenotype_min_altered_env_5) {
                        $phenotype_min_altered_env_5 = $new_val;
                    }
                    elsif ($new_val >= $phenotype_max_altered_env_5) {
                        $phenotype_max_altered_env_5 = $new_val;
                    }

                    $sim_data_5{$p}->{$t} = $sim_val;
                    $phenotype_data_altered_env_5{$p}->{$t} = $new_val;
                    push @row, $new_val;
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, '';
                }
            }
            push @data_matrix_altered_env_5, \@row;
        }

        open(my $F, ">", $stats_tempfile_2) || die "Can't open file ".$stats_tempfile_2;
            print $F $header_string."\n";
            foreach (@data_matrix_altered_env_5) {
                my $line = join ',', @$_;
                print $F "$line\n";
            }
        close($F);
    }
    print STDERR Dumper [$phenotype_min_altered_env_5, $phenotype_max_altered_env_5];

    my ($result_blup_data_altered_env_5, $result_blup_data_delta_altered_env_5, $result_blup_spatial_data_altered_env_5, $result_blup_pe_data_altered_env_5, $result_blup_pe_data_delta_altered_env_5, $result_residual_data_altered_env_5, $result_fitted_data_altered_env_5, %fixed_effects_altered_env_5, %rr_genetic_coefficients_altered_env_5, %rr_temporal_coefficients_altered_env_5);
    my (@rr_coeff_genetic_covariance_altered_env_5, @rr_coeff_env_covariance_altered_env_5, @rr_coeff_genetic_correlation_altered_env_5, @rr_coeff_env_correlation_altered_env_5, $rr_residual_variance_altered_env_5);
    my (@varcomp_altered_env_5);
    my $model_sum_square_residual_altered_env_5 = 0;
    my $model_sum_square_cv1_altered_env_5 = 0;
    my $model_sum_square_cv2_altered_env_5 = 0;
    my $model_sum_square_cv3_altered_env_5 = 0;
    my $model_sum_square_cv4_altered_env_5 = 0;
    my $model_sum_square_cv5_altered_env_5 = 0;
    my $model_sum_square_cv1_2_altered_env_5 = 0;
    my $model_sum_square_cv2_2_altered_env_5 = 0;
    my $model_sum_square_cv3_2_altered_env_5 = 0;
    my $model_sum_square_cv4_2_altered_env_5 = 0;
    my $model_sum_square_cv5_2_altered_env_5 = 0;
    my $genetic_effect_min_altered_env_5 = 1000000000;
    my $genetic_effect_max_altered_env_5 = -1000000000;
    my $env_effect_min_altered_env_5 = 1000000000;
    my $env_effect_max_altered_env_5 = -1000000000;
    my $genetic_effect_sum_square_altered_env_5 = 0;
    my $genetic_effect_sum_altered_env_5 = 0;
    my $env_effect_sum_square_altered_env_5 = 0;
    my $env_effect_sum_altered_env_5 = 0;
    my $residual_sum_square_altered_env_5 = 0;
    my $residual_sum_altered_env_5 = 0;

    print STDERR "RUN ENV ESTIMATE ON Altered Pheno With Sim Env ar1xar1\n";
    if ($statistics_select eq 'sommer_grm_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_spatial_pure_2dspl_genetic_blups') {
        #print STDERR Dumper $prepare_file_cv_cmd;
        # print STDERR Dumper $statistics_cmd;
        eval {
            my $status_prepare_file_cv = system($prepare_file_cv_cmd);
            my $status_prepare_file_cv2 = system($prepare_file_cv2_cmd);
            my $status = system($statistics_cmd);
            if ($perform_cv) {
                my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
            }
        };
        my $run_stats_fault = 0;
        if ($@) {
            print STDERR "R ERROR\n";
            print STDERR Dumper $@;
            $run_stats_fault = 1;
        }
        else {
            my $current_gen_row_count = 0;
            my $current_env_row_count = 0;

            open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                my $header = <$fh>;
                my @header_cols;
                if ($csv->parse($header)) {
                    @header_cols = $csv->fields();
                }

                while (my $row = <$fh>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $col_counter = 0;
                    foreach my $encoded_trait (@header_cols) {
                        my $trait = $trait_name_encoder_rev{$encoded_trait};
                        my $stock_id = $columns[0];

                        my $stock_name = $stock_info{$stock_id}->{uniquename};
                        my $value = $columns[$col_counter+1];
                        if (defined $value && $value ne '') {
                            $result_blup_data_altered_env_5->{$stock_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $genetic_effect_min_altered_env_5) {
                                $genetic_effect_min_altered_env_5 = $value;
                            }
                            elsif ($value >= $genetic_effect_max_altered_env_5) {
                                $genetic_effect_max_altered_env_5 = $value;
                            }

                            $genetic_effect_sum_altered_env_5 += abs($value);
                            $genetic_effect_sum_square_altered_env_5 = $genetic_effect_sum_square_altered_env_5 + $value*$value;
                        }
                        $col_counter++;
                    }
                    $current_gen_row_count++;
                }
            close($fh);

            open(my $fh_2dspl, '<', $stats_out_tempfile_2dspl) or die "Could not open file '$stats_out_tempfile_2dspl' $!";
                print STDERR "Opened $stats_out_tempfile_2dspl\n";

                my $header_2dspl = <$fh_2dspl>;
                my @header_cols_2dspl;
                if ($csv->parse($header_2dspl)) {
                    @header_cols_2dspl = $csv->fields();
                }
                shift @header_cols_2dspl;
                while (my $row_2dspl = <$fh_2dspl>) {
                    my @columns;
                    if ($csv->parse($row_2dspl)) {
                        @columns = $csv->fields();
                    }
                    my $col_counter = 0;
                    foreach my $encoded_trait (@header_cols_2dspl) {
                        my $trait = $trait_name_encoder_rev{$encoded_trait};
                        my $plot_id = $columns[0];

                        my $plot_name = $plot_id_map{$plot_id};
                        my $value = $columns[$col_counter+1];
                        if (defined $value && $value ne '') {
                            $result_blup_spatial_data_altered_env_5->{$plot_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $env_effect_min_altered_env_5) {
                                $env_effect_min_altered_env_5 = $value;
                            }
                            elsif ($value >= $env_effect_max_altered_env_5) {
                                $env_effect_max_altered_env_5 = $value;
                            }

                            $env_effect_sum_altered_env_5 += abs($value);
                            $env_effect_sum_square_altered_env_5 = $env_effect_sum_square_altered_env_5 + $value*$value;
                        }
                        $col_counter++;
                    }
                    $current_env_row_count++;
                }
            close($fh_2dspl);

            open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                print STDERR "Opened $stats_out_tempfile_residual\n";

                my $header_residual = <$fh_residual>;
                my @header_cols_residual;
                if ($csv->parse($header_residual)) {
                    @header_cols_residual = $csv->fields();
                }
                while (my $row = <$fh_residual>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $residual = $columns[1 + $_];
                        my $fitted = $columns[1 + $number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_5->{$stock_name}->{$trait_name} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_5 += abs($residual);
                            $residual_sum_square_altered_env_5 = $residual_sum_square_altered_env_5 + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_5->{$stock_name}->{$trait_name} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_5 = $model_sum_square_residual_altered_env_5 + $residual*$residual;
                    }
                }
            close($fh_residual);

            open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                my $header_cv1 = <$fh_cv1>;
                my @header_cols_cv1;
                if ($csv->parse($header_cv1)) {
                    @header_cols_cv1 = $csv->fields();
                }
                while (my $row = <$fh_cv1>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_5 = $model_sum_square_cv1_altered_env_5 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv1);

            open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                my $header_cv2 = <$fh_cv2>;
                my @header_cols_cv2;
                if ($csv->parse($header_cv2)) {
                    @header_cols_cv2 = $csv->fields();
                }
                while (my $row = <$fh_cv2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_5 = $model_sum_square_cv2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv2);

            open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                my $header_cv3 = <$fh_cv3>;
                my @header_cols_cv3;
                if ($csv->parse($header_cv3)) {
                    @header_cols_cv3 = $csv->fields();
                }
                while (my $row = <$fh_cv3>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_5 = $model_sum_square_cv3_altered_env_5 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv3);

            open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                my $header_cv4 = <$fh_cv4>;
                my @header_cols_cv4;
                if ($csv->parse($header_cv4)) {
                    @header_cols_cv4 = $csv->fields();
                }
                while (my $row = <$fh_cv4>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_5 = $model_sum_square_cv4_altered_env_5 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv4);

            open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                my $header_cv5 = <$fh_cv5>;
                my @header_cols_cv5;
                if ($csv->parse($header_cv5)) {
                    @header_cols_cv5 = $csv->fields();
                }
                while (my $row = <$fh_cv5>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_5 = $model_sum_square_cv5_altered_env_5 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv5);

            open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                my $header_cv1_2 = <$fh_cv1_2>;
                my @header_cols_cv1_2;
                if ($csv->parse($header_cv1_2)) {
                    @header_cols_cv1_2 = $csv->fields();
                }
                while (my $row = <$fh_cv1_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_5 = $model_sum_square_cv1_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv1_2);

            open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                my $header_cv2_2 = <$fh_cv2_2>;
                my @header_cols_cv2_2;
                if ($csv->parse($header_cv2_2)) {
                    @header_cols_cv2_2 = $csv->fields();
                }
                while (my $row = <$fh_cv2_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_5 = $model_sum_square_cv2_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv2_2);

            open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                my $header_cv3_2 = <$fh_cv3_2>;
                my @header_cols_cv3_2;
                if ($csv->parse($header_cv3_2)) {
                    @header_cols_cv3_2 = $csv->fields();
                }
                while (my $row = <$fh_cv3_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_5 = $model_sum_square_cv3_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv3_2);

            open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                my $header_cv4_2 = <$fh_cv4_2>;
                my @header_cols_cv4_2;
                if ($csv->parse($header_cv4_2)) {
                    @header_cols_cv4_2 = $csv->fields();
                }
                while (my $row = <$fh_cv4_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_5 = $model_sum_square_cv4_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv4_2);

            open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                my $header_cv5_2 = <$fh_cv5_2>;
                my @header_cols_cv5_2;
                if ($csv->parse($header_cv5_2)) {
                    @header_cols_cv5_2 = $csv->fields();
                }
                while (my $row = <$fh_cv5_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_5 = $model_sum_square_cv5_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv5_2);

            open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                print STDERR "Opened $stats_out_tempfile_varcomp\n";
                my $header_varcomp = <$fh_varcomp>;
                my @header_cols_varcomp;
                if ($csv->parse($header_varcomp)) {
                    @header_cols_varcomp = $csv->fields();
                }
                while (my $row = <$fh_varcomp>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    push @varcomp_altered_env_5, \@columns;
                }
            close($fh_varcomp);

            if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                $run_stats_fault = 1;
            }
        }

        if ($run_stats_fault == 1) {
            print STDERR "ERROR IN R CMD\n";
            return {error=>'Error in R! Try a larger tolerance'};
        }
    }
    elsif ($statistics_select eq 'sommer_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_pure_2dspl_genetic_blups') {
        my @encoded_traits = values %trait_name_encoder;
        foreach my $t (@encoded_traits) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;
                    my @header_cols;
                    if ($csv->parse($header)) {
                        @header_cols = $csv->fields();
                    }

                    while (my $row = <$fh>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $col_counter = 0;
                        foreach my $encoded_trait (@header_cols) {
                            if ($encoded_trait eq $t) {
                                my $trait = $trait_name_encoder_rev{$encoded_trait};
                                my $stock_id = $columns[0];

                                my $stock_name = $stock_info{$stock_id}->{uniquename};
                                my $value = $columns[$col_counter+1];
                                if (defined $value && $value ne '') {
                                    $result_blup_data_altered_env_5->{$stock_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                                    if ($value < $genetic_effect_min_altered_env_5) {
                                        $genetic_effect_min_altered_env_5 = $value;
                                    }
                                    elsif ($value >= $genetic_effect_max_altered_env_5) {
                                        $genetic_effect_max_altered_env_5 = $value;
                                    }

                                    $genetic_effect_sum_altered_env_5 += abs($value);
                                    $genetic_effect_sum_square_altered_env_5 = $genetic_effect_sum_square_altered_env_5 + $value*$value;
                                }
                            }
                            $col_counter++;
                        }
                        $current_gen_row_count++;
                    }
                close($fh);

                open(my $fh_2dspl, '<', $stats_out_tempfile_2dspl) or die "Could not open file '$stats_out_tempfile_2dspl' $!";
                    print STDERR "Opened $stats_out_tempfile_2dspl\n";

                    my $header_2dspl = <$fh_2dspl>;
                    my @header_cols_2dspl;
                    if ($csv->parse($header_2dspl)) {
                        @header_cols_2dspl = $csv->fields();
                    }
                    shift @header_cols_2dspl;
                    while (my $row_2dspl = <$fh_2dspl>) {
                        my @columns;
                        if ($csv->parse($row_2dspl)) {
                            @columns = $csv->fields();
                        }
                        my $col_counter = 0;
                        foreach my $encoded_trait (@header_cols_2dspl) {
                            if ($encoded_trait eq $t) {
                                my $trait = $trait_name_encoder_rev{$encoded_trait};
                                my $plot_id = $columns[0];

                                my $plot_name = $plot_id_map{$plot_id};
                                my $value = $columns[$col_counter+1];
                                if (defined $value && $value ne '') {
                                    $result_blup_spatial_data_altered_env_5->{$plot_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                                    if ($value < $env_effect_min_altered_env_5) {
                                        $env_effect_min_altered_env_5 = $value;
                                    }
                                    elsif ($value >= $env_effect_max_altered_env_5) {
                                        $env_effect_max_altered_env_5 = $value;
                                    }

                                    $env_effect_sum_altered_env_5 += abs($value);
                                    $env_effect_sum_square_altered_env_5 = $env_effect_sum_square_altered_env_5 + $value*$value;
                                }
                            }
                            $col_counter++;
                        }
                        $current_env_row_count++;
                    }
                close($fh_2dspl);

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";

                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_5->{$stock_name}->{$trait_name} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_5 += abs($residual);
                            $residual_sum_square_altered_env_5 = $residual_sum_square_altered_env_5 + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_5->{$stock_name}->{$trait_name} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_5 = $model_sum_square_residual_altered_env_5 + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_5 = $model_sum_square_cv1_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_5 = $model_sum_square_cv2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_5 = $model_sum_square_cv3_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_5 = $model_sum_square_cv4_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_5 = $model_sum_square_cv5_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_5 = $model_sum_square_cv1_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_5 = $model_sum_square_cv2_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_5 = $model_sum_square_cv3_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_5 = $model_sum_square_cv4_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_5 = $model_sum_square_cv5_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        push @varcomp_altered_env_5, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {

        print STDERR Dumper $statistics_cmd;
        my $status_r = system($statistics_cmd);

        my @pheno_var;
        open(my $fh_r, '<', $stats_out_param_tempfile) or die "Could not open file '$stats_out_param_tempfile' $!";
            print STDERR "Opened $stats_out_param_tempfile\n";

            while (defined(my $row = <$fh_r>)) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @pheno_var, \@columns;
            }
        close($fh_r);
        # print STDERR Dumper \@pheno_var;

        my $stats_tempfile_2_basename = basename($stats_tempfile_2);
        my $grm_file_basename = basename($grm_rename_tempfile);
        my $permanent_environment_structure_file_basename = basename($permanent_environment_structure_tempfile);
        my $permanent_environment_structure_env_file_basename = basename($permanent_environment_structure_env_tempfile_mat);
        #my @phenotype_header = ("id", "plot_id", "replicate", "time", "replicate_time", "ind_replicate", @sorted_trait_names, "phenotype");

        my $effect_1_levels = scalar(@rep_time_factors);
        my $effect_grm_levels = scalar(@unique_accession_names);
        my $effect_pe_levels = scalar(@ind_rep_factors);

        print STDERR Dumper $stats_tempfile_2;
        my $data_cv_cmd = 'R -e "mat <- read.csv(\''.$stats_tempfile_2.'\', header=FALSE, sep=\' \');
        randomized_positions <- sample(length(mat[,1]));
        cv_step_size <- length(mat[,1]) %/% 5;
        cv_step_size_modulo <- length(mat[,1]) %% 5;
        mat_CV1 <- mat; mat_CV2 <- mat; mat_CV3 <- mat; mat_CV4 <- mat; mat_CV5 <- mat;
        mat_CV1[c(randomized_positions[1:cv_step_size]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV2[c(randomized_positions[(cv_step_size+1):(2*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV3[c(randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV4[c(randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV5[c(randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV1_2 <- mat; mat_CV2_2 <- mat; mat_CV3_2 <- mat; mat_CV4_2 <- mat; mat_CV5_2 <- mat;
        mat_CV1_2[c(randomized_positions[1:cv_step_size]),ncol(mat)] <- -999;
        mat_CV2_2[c(randomized_positions[(cv_step_size+1):(2*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV3_2[c(randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV4_2[c(randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV5_2[c(randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]),ncol(mat)] <- -999;
        write.table(mat, file=\''.$stats_tempfile_2.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV1, file=\''.$stats_out_cv1_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV2, file=\''.$stats_out_cv2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV3, file=\''.$stats_out_cv3_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV4, file=\''.$stats_out_cv4_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV5, file=\''.$stats_out_cv5_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV1_2, file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV2_2, file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV3_2, file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV4_2, file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV5_2, file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        "';
        my $status_cv_files = system($data_cv_cmd);

        my $stats_out_cv1_predict_tempfile_basename = basename($stats_out_cv1_predict_tempfile);
        my $stats_out_cv2_predict_tempfile_basename = basename($stats_out_cv2_predict_tempfile);
        my $stats_out_cv3_predict_tempfile_basename = basename($stats_out_cv3_predict_tempfile);
        my $stats_out_cv4_predict_tempfile_basename = basename($stats_out_cv4_predict_tempfile);
        my $stats_out_cv5_predict_tempfile_basename = basename($stats_out_cv5_predict_tempfile);

        my $stats_out_cv1_2_predict_tempfile_basename = basename($stats_out_cv1_2_predict_tempfile);
        my $stats_out_cv2_2_predict_tempfile_basename = basename($stats_out_cv2_2_predict_tempfile);
        my $stats_out_cv3_2_predict_tempfile_basename = basename($stats_out_cv3_2_predict_tempfile);
        my $stats_out_cv4_2_predict_tempfile_basename = basename($stats_out_cv4_2_predict_tempfile);
        my $stats_out_cv5_2_predict_tempfile_basename = basename($stats_out_cv5_2_predict_tempfile);

        @param_file_rows_2 = (
            '(CO)VARIANCES'
        );
        foreach (@pheno_var) {
            my $s = join ' ', @$_;
            push @param_file_rows_2, $s;
        }
        @param_file_rows_4 = (
            '(CO)VARIANCES'
        );
        foreach (@pheno_var) {
            my $s = join ' ', @$_;
            push @param_file_rows_4, $s;
        }

        open(my $Fp, ">", $parameter_tempfile) || die "Can't open file ".$parameter_tempfile;
            foreach ((@param_file_rows_data, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp "$_\n";
            }
        close($Fp);

        open(my $Fp_cv1, ">", $parameter_tempfile_cv1) || die "Can't open file ".$parameter_tempfile_cv1;
            foreach ((@param_file_rows_data_cv1, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv1 "$_\n";
            }
        close($Fp_cv1);

        open(my $Fp_cv2, ">", $parameter_tempfile_cv2) || die "Can't open file ".$parameter_tempfile_cv2;
            foreach ((@param_file_rows_data_cv2, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv2 "$_\n";
            }
        close($Fp_cv2);

        open(my $Fp_cv3, ">", $parameter_tempfile_cv3) || die "Can't open file ".$parameter_tempfile_cv3;
            foreach ((@param_file_rows_data_cv3, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv3 "$_\n";
            }
        close($Fp_cv3);

        open(my $Fp_cv4, ">", $parameter_tempfile_cv4) || die "Can't open file ".$parameter_tempfile_cv4;
            foreach ((@param_file_rows_data_cv4, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv4 "$_\n";
            }
        close($Fp_cv4);

        open(my $Fp_cv5, ">", $parameter_tempfile_cv5) || die "Can't open file ".$parameter_tempfile_cv5;
            foreach ((@param_file_rows_data_cv5, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv5 "$_\n";
            }
        close($Fp_cv5);

        my $command_name = '';
        if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'blupf90_grm_random_regression_dap_blups') {
            $command_name = 'blupf90';
        }
        elsif ($statistics_select eq 'airemlf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
            $command_name = 'airemlf90';
        }

        my $parameter_tempfile_basename = basename($parameter_tempfile);
        my $parameter_tempfile_cv1_basename = basename($parameter_tempfile_cv1);
        my $parameter_tempfile_cv2_basename = basename($parameter_tempfile_cv2);
        my $parameter_tempfile_cv3_basename = basename($parameter_tempfile_cv3);
        my $parameter_tempfile_cv4_basename = basename($parameter_tempfile_cv4);
        my $parameter_tempfile_cv5_basename = basename($parameter_tempfile_cv5);
        my $parameter_tempfile_cv1_2_basename = basename($parameter_tempfile_cv1_2);
        my $parameter_tempfile_cv2_2_basename = basename($parameter_tempfile_cv2_2);
        my $parameter_tempfile_cv3_2_basename = basename($parameter_tempfile_cv3_2);
        my $parameter_tempfile_cv4_2_basename = basename($parameter_tempfile_cv4_2);
        my $parameter_tempfile_cv5_2_basename = basename($parameter_tempfile_cv5_2);

        print STDERR Dumper $cmd_f90;
        my $status = system($cmd_f90);

        my @log_output_rows;
        open(my $fh_log, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
            print STDERR "Opened $stats_out_tempfile\n";
            while (my $row = <$fh_log>) {
                print STDERR $row;
                push @log_output_rows, $row;
            }
        close($fh_log);

        my $log_output = join '', @log_output_rows;
        my ($gen_var_string) = $log_output =~ /Genetic variance\(s\) for effect  2(.*?)correlations/gs;
        @rr_coeff_genetic_covariance_altered_env_5 = split ' ', $gen_var_string;
        print STDERR Dumper \@rr_coeff_genetic_covariance_altered_env_5;
        my ($env_var_string) = $log_output =~ /Genetic variance\(s\) for effect  $legendre_order_number_env_var_pos(.*?)correlations/gs;
        @rr_coeff_env_covariance_altered_env_5 = split ' ', $env_var_string;
        print STDERR Dumper \@rr_coeff_env_covariance_altered_env_5;
        my (@gen_cor_string) = $log_output =~ /correlations(.*?)eigenvectors/gs;
        @rr_coeff_genetic_correlation_altered_env_5 = split ' ', $gen_cor_string[0];
        print STDERR Dumper \@rr_coeff_genetic_correlation_altered_env_5;
        @rr_coeff_env_correlation_altered_env_5 = split ' ', $gen_cor_string[1];
        print STDERR Dumper \@rr_coeff_env_correlation_altered_env_5;
        my ($res_se_string) = $log_output =~ /SE for R(.*?)\* FINISHED \(AIREMLF90\)/gs;
        print STDERR Dumper $res_se_string;
        # $rr_residual_variance_altered_env_5 = ($res_se_string**2)*$number_plots;
        $rr_residual_variance_altered_env_5 = $res_se_string;
        print STDERR Dumper $rr_residual_variance_altered_env_5;

        @param_file_rows_6 = (
            '(CO)VARIANCES'
        );
        my $cov_gen_counter = 0;
        foreach my $i (0..$legendre_order_number) {
            my @cov_row;
            foreach my $j (0..$legendre_order_number) {
                push @cov_row, $rr_coeff_genetic_covariance_altered_env_5[$cov_gen_counter];
                $cov_gen_counter++;
            }
            my $s = join ' ', @cov_row;
            push @param_file_rows_6, $s;
        }

        @param_file_rows_7 = (
            '(CO)VARIANCES'
        );
        my $cov_env_counter = 0;
        foreach my $i (0..$legendre_order_number) {
            my @cov_row;
            foreach my $j (0..$legendre_order_number) {
                push @cov_row, $rr_coeff_env_covariance_altered_env_5[$cov_env_counter];
                $cov_env_counter++;
            }
            my $s = join ' ', @cov_row;
            push @param_file_rows_7, $s;
        }

        open(my $Fp_cv1_2, ">", $parameter_tempfile_cv1_2) || die "Can't open file ".$parameter_tempfile_cv1_2;
            foreach ((@param_file_rows_data_cv1, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv1_2 "$_\n";
            }
        close($Fp_cv1_2);

        open(my $Fp_cv2_2, ">", $parameter_tempfile_cv2_2) || die "Can't open file ".$parameter_tempfile_cv2_2;
            foreach ((@param_file_rows_data_cv2, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv2_2 "$_\n";
            }
        close($Fp_cv2_2);

        open(my $Fp_cv3_2, ">", $parameter_tempfile_cv3_2) || die "Can't open file ".$parameter_tempfile_cv3_2;
            foreach ((@param_file_rows_data_cv3, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv3_2 "$_\n";
            }
        close($Fp_cv3_2);

        open(my $Fp_cv4_2, ">", $parameter_tempfile_cv4_2) || die "Can't open file ".$parameter_tempfile_cv4_2;
            foreach ((@param_file_rows_data_cv4, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv4_2 "$_\n";
            }
        close($Fp_cv4_2);

        open(my $Fp_cv5_2, ">", $parameter_tempfile_cv5_2) || die "Can't open file ".$parameter_tempfile_cv5_2;
            foreach ((@param_file_rows_data_cv5, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv5_2 "$_\n";
            }
        close($Fp_cv5_2);

        my $q_time = "SELECT t.cvterm_id FROM cvterm as t JOIN cv ON(t.cv_id=cv.cv_id) WHERE t.name=? and cv.name=?;";
        my $h_time = $schema->storage->dbh()->prepare($q_time);

        $yhat_residual_tempfile = $tmp_stats_dir."/yhat_residual";
        open(my $fh_yhat_res, '<', $yhat_residual_tempfile) or die "Could not open file '$yhat_residual_tempfile' $!";
            print STDERR "Opened $yhat_residual_tempfile\n";

            my $pred_res_counter = 0;
            my $trait_counter = 0;
            while (my $row = <$fh_yhat_res>) {
                # print STDERR $row;
                my @vals = split ' ', $row;
                my $pred = $vals[0];
                my $residual = $vals[1];
                $model_sum_square_residual_altered_env_5 = $model_sum_square_residual_altered_env_5 + $residual*$residual;

                my $plot_name = $plot_id_count_map_reverse{$pred_res_counter};
                my $time = $time_count_map_reverse{$pred_res_counter};

                if (defined $residual && $residual ne '') {
                    $result_residual_data_altered_env_5->{$plot_name}->{$seen_times{$time}} = [$residual, $timestamp, $user_name, '', ''];
                    $residual_sum_altered_env_5 += abs($residual);
                    $residual_sum_square_altered_env_5 = $residual_sum_square_altered_env_5 + $residual*$residual;
                }
                if (defined $pred && $pred ne '') {
                    $result_fitted_data_altered_env_5->{$plot_name}->{$seen_times{$time}} = [$pred, $timestamp, $user_name, '', ''];
                }

                $pred_res_counter++;
            }
        close($fh_yhat_res);

        $blupf90_solutions_tempfile = $tmp_stats_dir."/solutions";
        open(my $fh_sol, '<', $blupf90_solutions_tempfile) or die "Could not open file '$blupf90_solutions_tempfile' $!";
            print STDERR "Opened $blupf90_solutions_tempfile\n";

            my $head = <$fh_sol>;
            print STDERR $head;

            my $solution_file_counter = 0;
            my $grm_sol_counter = 0;
            my $grm_sol_trait_counter = 0;
            my $pe_sol_counter = 0;
            my $pe_sol_trait_counter = 0;
            while (defined(my $row = <$fh_sol>)) {
                # print STDERR $row;
                my @vals = split ' ', $row;
                my $level = $vals[2];
                my $value = $vals[3];
                if ($solution_file_counter < $effect_1_levels) {
                    $fixed_effects_altered_env_5{$solution_file_counter}->{$level} = $value;
                }
                elsif ($solution_file_counter < $effect_1_levels + $effect_grm_levels*($legendre_order_number+1)) {
                    my $accession_name = $accession_id_factor_map_reverse{$level};
                    if ($grm_sol_counter < $effect_grm_levels-1) {
                        $grm_sol_counter++;
                    }
                    else {
                        $grm_sol_counter = 0;
                        $grm_sol_trait_counter++;
                    }
                    if (defined $value && $value ne '') {
                        push @{$rr_genetic_coefficients_altered_env_5{$accession_name}}, $value;
                    }
                }
                else {
                    my $plot_name = $plot_id_factor_map_reverse{$level};
                    if ($pe_sol_counter < $effect_pe_levels-1) {
                        $pe_sol_counter++;
                    }
                    else {
                        $pe_sol_counter = 0;
                        $pe_sol_trait_counter++;
                    }
                    if (defined $value && $value ne '') {
                        push @{$rr_temporal_coefficients_altered_env_5{$plot_name}}, $value;
                    }
                }
                $solution_file_counter++;
            }
        close($fh_sol);

        # print STDERR Dumper \%rr_genetic_coefficients_altered;
        # print STDERR Dumper \%rr_temporal_coefficients_altered;

        open(my $Fgc, ">", $coeff_genetic_tempfile) || die "Can't open file ".$coeff_genetic_tempfile;

        while ( my ($accession_name, $coeffs) = each %rr_genetic_coefficients_altered_env_5) {
            my @line = ($accession_name, @$coeffs);
            my $line_string = join ',', @line;
            print $Fgc "$line_string\n";

            foreach my $t_i (0..20) {
                my $time = $t_i*5/100;
                my $time_rescaled = sprintf("%.2f", $time*($time_max - $time_min) + $time_min);

                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                my $time_term_string = '';
                if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {
                    $time_term_string = "GDD $time_rescaled";
                }
                elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
                    $time_term_string = "day $time_rescaled"
                }
                $h_time->execute($time_term_string, 'cxgn_time_ontology');
                my ($time_cvterm_id) = $h_time->fetchrow_array();

                if (!$time_cvterm_id) {
                    my $new_time_term = $schema->resultset("Cv::Cvterm")->create_with({
                       name => $time_term_string,
                       cv => 'cxgn_time_ontology'
                    });
                    $time_cvterm_id = $new_time_term->cvterm_id();
                }
                my $time_term_string_blup = SGN::Model::Cvterm::get_trait_from_cvterm_id($schema, $time_cvterm_id, 'extended');

                $result_blup_data_altered_env_5->{$accession_name}->{$time_term_string_blup} = [$value, $timestamp, $user_name, '', ''];
            }
        }
        close($Fgc);

        while ( my ($accession_name, $coeffs) = each %rr_genetic_coefficients_altered_env_5) {
            foreach my $time_term (@sorted_trait_names) {
                my $time = ($time_term - $time_min)/($time_max - $time_min);
                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                $result_blup_data_delta_altered_env_5->{$accession_name}->{$time_term} = [$value, $timestamp, $user_name, '', ''];

                if ($value < $genetic_effect_min_altered_env_5) {
                    $genetic_effect_min_altered_env_5 = $value;
                }
                elsif ($value >= $genetic_effect_max_altered_env_5) {
                    $genetic_effect_max_altered_env_5 = $value;
                }

                $genetic_effect_sum_altered_env_5 += abs($value);
                $genetic_effect_sum_square_altered_env_5 = $genetic_effect_sum_square_altered_env_5 + $value*$value;
            }
        }

        open(my $Fpc, ">", $coeff_pe_tempfile) || die "Can't open file ".$coeff_pe_tempfile;

        while ( my ($plot_name, $coeffs) = each %rr_temporal_coefficients_altered_env_5) {
            my @line = ($plot_name, @$coeffs);
            my $line_string = join ',', @line;
            print $Fpc "$line_string\n";

            foreach my $t_i (0..20) {
                my $time = $t_i*5/100;
                my $time_rescaled = sprintf("%.2f", $time*($time_max - $time_min) + $time_min);

                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                my $time_term_string = '';
                if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {
                    $time_term_string = "GDD $time_rescaled";
                }
                elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
                    $time_term_string = "day $time_rescaled"
                }
                $h_time->execute($time_term_string, 'cxgn_time_ontology');
                my ($time_cvterm_id) = $h_time->fetchrow_array();

                if (!$time_cvterm_id) {
                    my $new_time_term = $schema->resultset("Cv::Cvterm")->create_with({
                       name => $time_term_string,
                       cv => 'cxgn_time_ontology'
                    });
                    $time_cvterm_id = $new_time_term->cvterm_id();
                }
                my $time_term_string_pe = SGN::Model::Cvterm::get_trait_from_cvterm_id($schema, $time_cvterm_id, 'extended');

                $result_blup_pe_data_altered_env_5->{$plot_name}->{$time_term_string_pe} = [$value, $timestamp, $user_name, '', ''];
            }
        }
        close($Fpc);

        while ( my ($plot_name, $coeffs) = each %rr_temporal_coefficients_altered_env_5) {
            foreach my $time_term (@sorted_trait_names) {
                my $time = ($time_term - $time_min)/($time_max - $time_min);
                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                $result_blup_pe_data_delta_altered_env_5->{$plot_name}->{$time_term} = [$value, $timestamp, $user_name, '', ''];

                if ($value < $env_effect_min_altered_env_5) {
                    $env_effect_min_altered_env_5 = $value;
                }
                elsif ($value >= $env_effect_max_altered_env_5) {
                    $env_effect_max_altered_env_5 = $value;
                }

                $env_effect_sum_altered_env_5 += abs($value);
                $env_effect_sum_square_altered_env_5 = $env_effect_sum_square_altered_env_5 + $value*$value;
            }
        }

        if ($perform_cv) {
            my $cmd_f90_cv1 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv1_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv1;
            my $status_cv1 = system($cmd_f90_cv1);

            open(my $fh_log_cv1, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv1>) {
                    print STDERR $row;
                }
            close($fh_log_cv1);

            my $yhat_residual_tempfile_cv1 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv1, '<', $yhat_residual_tempfile_cv1) or die "Could not open file '$yhat_residual_tempfile_cv1' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv1\n";

                while (my $row = <$fh_yhat_res_cv1>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv1_altered_env_5 = $model_sum_square_cv1_altered_env_5 + $residual*$residual;
                }
            close($fh_yhat_res_cv1);

            my $cmd_f90_cv2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv2_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv2;
            my $status_cv2 = system($cmd_f90_cv2);

            open(my $fh_log_cv2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv2>) {
                    print STDERR $row;
                }
            close($fh_log_cv2);

            my $yhat_residual_tempfile_cv2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv2, '<', $yhat_residual_tempfile_cv2) or die "Could not open file '$yhat_residual_tempfile_cv2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv2\n";

                while (my $row = <$fh_yhat_res_cv2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv2_altered_env_5 = $model_sum_square_cv2_altered_env_5 + $residual*$residual;
                }
            close($fh_yhat_res_cv2);

            my $cmd_f90_cv3 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv3_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv3;
            my $status_cv3 = system($cmd_f90_cv3);

            open(my $fh_log_cv3, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv3>) {
                    print STDERR $row;
                }
            close($fh_log_cv3);

            my $yhat_residual_tempfile_cv3 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv3, '<', $yhat_residual_tempfile_cv3) or die "Could not open file '$yhat_residual_tempfile_cv3' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv3\n";

                while (my $row = <$fh_yhat_res_cv3>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv3_altered_env_5 = $model_sum_square_cv3_altered_env_5 + $residual*$residual;
                }
            close($fh_yhat_res_cv3);

            my $cmd_f90_cv4 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv4_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv4;
            my $status_cv4 = system($cmd_f90_cv4);

            open(my $fh_log_cv4, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv4>) {
                    print STDERR $row;
                }
            close($fh_log_cv4);

            my $yhat_residual_tempfile_cv4 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv4, '<', $yhat_residual_tempfile_cv4) or die "Could not open file '$yhat_residual_tempfile_cv4' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv4\n";

                while (my $row = <$fh_yhat_res_cv4>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv4_altered_env_5 = $model_sum_square_cv4_altered_env_5 + $residual*$residual;
                }
            close($fh_yhat_res_cv4);

            my $cmd_f90_cv5 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv5_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv5;
            my $status_cv5 = system($cmd_f90_cv5);

            open(my $fh_log_cv5, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv5>) {
                    print STDERR $row;
                }
            close($fh_log_cv5);

            my $yhat_residual_tempfile_cv5 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv5, '<', $yhat_residual_tempfile_cv5) or die "Could not open file '$yhat_residual_tempfile_cv5' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv5\n";

                while (my $row = <$fh_yhat_res_cv5>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv5_altered_env_5 = $model_sum_square_cv5_altered_env_5 + $residual*$residual;
                }
            close($fh_yhat_res_cv5);

            my $cmd_f90_cv1_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv1_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv1_2;
            my $status_cv1_2 = system($cmd_f90_cv1_2);

            open(my $fh_log_cv1_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv1_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv1_2);

            my $yhat_residual_tempfile_cv1_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv1_2, '<', $yhat_residual_tempfile_cv1_2) or die "Could not open file '$yhat_residual_tempfile_cv1_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv1_2\n";

                while (my $row = <$fh_yhat_res_cv1_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv1_2_altered_env_5 = $model_sum_square_cv1_2_altered_env_5 + $residual*$residual;
                }
            close($fh_yhat_res_cv1_2);

            my $cmd_f90_cv2_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv2_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv2_2;
            my $status_cv2_2 = system($cmd_f90_cv2_2);

            open(my $fh_log_cv2_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv2_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv2_2);

            my $yhat_residual_tempfile_cv2_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv2_2, '<', $yhat_residual_tempfile_cv2_2) or die "Could not open file '$yhat_residual_tempfile_cv2_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv2_2\n";

                while (my $row = <$fh_yhat_res_cv2_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv2_2_altered_env_5 = $model_sum_square_cv2_2_altered_env_5 + $residual*$residual;
                }
            close($fh_yhat_res_cv2_2);

            my $cmd_f90_cv3_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv3_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv3_2;
            my $status_cv3_2 = system($cmd_f90_cv3_2);

            open(my $fh_log_cv3_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv3_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv3_2);

            my $yhat_residual_tempfile_cv3_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv3_2, '<', $yhat_residual_tempfile_cv3_2) or die "Could not open file '$yhat_residual_tempfile_cv3_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv3_2\n";

                while (my $row = <$fh_yhat_res_cv3_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv3_2_altered_env_5 = $model_sum_square_cv3_2_altered_env_5 + $residual*$residual;
                }
            close($fh_yhat_res_cv3_2);

            my $cmd_f90_cv4_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv4_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv4_2;
            my $status_cv4_2 = system($cmd_f90_cv4_2);

            open(my $fh_log_cv4_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv4_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv4_2);

            my $yhat_residual_tempfile_cv4_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv4_2, '<', $yhat_residual_tempfile_cv4_2) or die "Could not open file '$yhat_residual_tempfile_cv4_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv4_2\n";

                while (my $row = <$fh_yhat_res_cv4_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv4_2_altered_env_5 = $model_sum_square_cv4_2_altered_env_5 + $residual*$residual;
                }
            close($fh_yhat_res_cv4_2);

            my $cmd_f90_cv5_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv5_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv5_2;
            my $status_cv5_2 = system($cmd_f90_cv5_2);

            open(my $fh_log_cv5_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv5_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv5_2);

            my $yhat_residual_tempfile_cv5_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv5_2, '<', $yhat_residual_tempfile_cv5_2) or die "Could not open file '$yhat_residual_tempfile_cv5_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv5_2\n";

                while (my $row = <$fh_yhat_res_cv5_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv5_2_altered_env_5 = $model_sum_square_cv5_2_altered_env_5 + $residual*$residual;
                }
            close($fh_yhat_res_cv5_2);
        }
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_spatial_genetic_blups') {
        foreach my $t (@sorted_trait_names) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;
                my @row_col_ordered_plots_names;

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        push @row_col_ordered_plots_names, $stock_name;
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_5->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_5 += abs($residual);
                            $residual_sum_square_altered_env_5 = $residual_sum_square_altered_env_5 + $residual*$residual;}
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_5->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_5 = $model_sum_square_residual_altered_env_5 + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;

                    my $solution_file_counter = 0;
                    while (defined(my $row = <$fh>)) {
                        # print STDERR $row;
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $level = $columns[0];
                        my $value = $columns[1];
                        my $std = $columns[2];
                        my $z_ratio = $columns[3];
                        if (defined $value && $value ne '') {
                            if ($solution_file_counter < $row_number_span) {
                                # print STDERR "$level $value \n";
                            }
                            elsif ($solution_file_counter < $row_number_span + $number_accessions) {
                                my $stock_name = $accession_id_factor_map_reverse{$solution_file_counter - $row_number_span + 1};
                                $result_blup_data_altered_env_5->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $genetic_effect_min_altered_env_5) {
                                    $genetic_effect_min_altered_env_5 = $value;
                                }
                                elsif ($value >= $genetic_effect_max_altered_env_5) {
                                    $genetic_effect_max_altered_env_5 = $value;
                                }

                                $genetic_effect_sum_altered_env_5 += abs($value);
                                $genetic_effect_sum_square_altered_env_5 = $genetic_effect_sum_square_altered_env_5 + $value*$value;

                                $current_gen_row_count++;
                            }
                            elsif ($solution_file_counter < $col_number_span + $row_number_span + $number_accessions) {
                                # print STDERR "$level $value \n";
                            }
                            else {
                                my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                                $result_blup_spatial_data_altered_env_5->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $env_effect_min_altered_env_5) {
                                    $env_effect_min_altered_env_5 = $value;
                                }
                                elsif ($value >= $env_effect_max_altered_env_5) {
                                    $env_effect_max_altered_env_5 = $value;
                                }

                                $env_effect_sum_altered_env_5 += abs($value);
                                $env_effect_sum_square_altered_env_5 = $env_effect_sum_square_altered_env_5 + $value*$value;

                                $current_env_row_count++;
                            }
                        }
                        $solution_file_counter++;
                    }
                close($fh);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_5 = $model_sum_square_cv1_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_5 = $model_sum_square_cv2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_5 = $model_sum_square_cv3_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_5 = $model_sum_square_cv4_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_5 = $model_sum_square_cv5_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_5 = $model_sum_square_cv1_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_5 = $model_sum_square_cv2_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_5 = $model_sum_square_cv3_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_5 = $model_sum_square_cv4_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_5 = $model_sum_square_cv5_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        $columns[0] = "trait:".$columns[0]."!trait_t".$t.":t".$t;
                        push @varcomp_altered_env_5, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_pure_spatial_genetic_blups') {
        $analysis_model_language = "R";

        $statistical_ontology_term = "Univariate linear mixed model 2D spline genetic BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000038"; #In the JS this is set to either Univariate linear mixed model 2D spline spatial BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000039

        $analysis_model_training_data_file_type = "nicksmixedmodelsanalytics_v1.01_asreml_grm_univariate_spatial_genetic_blups_phenotype_file";

        my @grm_old;
        open(my $fh_grm_old, '<', $grm_file) or die "Could not open file '$grm_file' $!";
            print STDERR "Opened $grm_file\n";

            while (my $row = <$fh_grm_old>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @grm_old, \@columns;
            }
        close($fh_grm_old);

        my %grm_hash_ordered;
        foreach (@grm_old) {
            my $l1 = $accession_id_factor_map{$_->[0]};
            my $l2 = $accession_id_factor_map{$_->[1]};
            my $val = sprintf("%.8f", $_->[2]);
            if ($l1 > $l2) {
                $grm_hash_ordered{$l1}->{$l2} = $val;
            }
            else {
                $grm_hash_ordered{$l2}->{$l1} = $val;
            }
        }

        open(my $fh_grm_new, '>', $grm_rename_tempfile) or die "Could not open file '$grm_rename_tempfile' $!";
            print STDERR "Opened $grm_rename_tempfile\n";

            foreach my $i (sort {$a <=> $b} keys %grm_hash_ordered) {
                my $v = $grm_hash_ordered{$i};
                foreach my $j (sort {$a <=> $b} keys %$v) {
                    my $val = $v->{$j};
                    print $fh_grm_new "$i $j $val\n";
                }
            }
        close($fh_grm_new);

        my @encoded_traits = values %trait_name_encoder;
        $number_traits = scalar(@sorted_trait_names);
        $number_accessions = scalar(@unique_accession_names);
        foreach my $t (@sorted_trait_names) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;
                my @row_col_ordered_plots_names;

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        push @row_col_ordered_plots_names, $stock_name;
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_5->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_5 += abs($residual);
                            $residual_sum_square_altered_env_5 = $residual_sum_square_altered_env_5 + $residual*$residual;}
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_5->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_5 = $model_sum_square_residual_altered_env_5 + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;

                    my $solution_file_counter = 0;
                    while (defined(my $row = <$fh>)) {
                        # print STDERR $row;
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $level = $columns[0];
                        my $value = $columns[1];
                        my $std = $columns[2];
                        my $z_ratio = $columns[3];
                        if (defined $value && $value ne '') {
                            if ($solution_file_counter < $number_accessions) {
                                my $stock_name = $accession_id_factor_map_reverse{$solution_file_counter + 1};
                                $result_blup_data_altered_env_5->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $genetic_effect_min_altered_env_5) {
                                    $genetic_effect_min_altered_env_5 = $value;
                                }
                                elsif ($value >= $genetic_effect_max_altered_env_5) {
                                    $genetic_effect_max_altered_env_5 = $value;
                                }

                                $genetic_effect_sum_altered_env_5 += abs($value);
                                $genetic_effect_sum_square_altered_env_5 = $genetic_effect_sum_square_altered_env_5 + $value*$value;

                                $current_gen_row_count++;
                            }
                            else {
                                my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                                $result_blup_spatial_data_altered_env_5->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $env_effect_min_altered_env_5) {
                                    $env_effect_min_altered_env_5 = $value;
                                }
                                elsif ($value >= $env_effect_max_altered_env_5) {
                                    $env_effect_max_altered_env_5 = $value;
                                }

                                $env_effect_sum_altered_env_5 += abs($value);
                                $env_effect_sum_square_altered_env_5 = $env_effect_sum_square_altered_env_5 + $value*$value;

                                $current_env_row_count++;
                            }
                        }
                        $solution_file_counter++;
                    }
                close($fh);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_5 = $model_sum_square_cv1_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_5 = $model_sum_square_cv2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_5 = $model_sum_square_cv3_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_5 = $model_sum_square_cv4_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_5 = $model_sum_square_cv5_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_5 = $model_sum_square_cv1_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_5 = $model_sum_square_cv2_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_5 = $model_sum_square_cv3_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_5 = $model_sum_square_cv4_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_5 = $model_sum_square_cv5_2_altered_env_5 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        $columns[0] = "trait:".$columns[0]."!trait_t".$t.":t".$t;
                        push @varcomp_altered_env_5, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'asreml_grm_multivariate_spatial_genetic_blups') {
        # print STDERR Dumper $prepare_file_cv_cmd;
        # print STDERR Dumper $statistics_cmd;
        eval {
            my $status_prepare_file_cv2 = system($prepare_file_cv2_cmd);
            my $status_prepare_file_cv = system($prepare_file_cv_cmd);
            my $status = system($statistics_cmd);
            if ($perform_cv) {
                my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
            }
        };

        my $run_stats_fault = 0;
        if ($@) {
            print STDERR "R ERROR\n";
            print STDERR Dumper $@;
            $run_stats_fault = 1;
        }
        else {
            my $current_gen_row_count = 0;
            my $current_env_row_count = 0;
            my @row_col_ordered_plots_names;

            open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                print STDERR "Opened $stats_out_tempfile_residual\n";
                my $header_residual = <$fh_residual>;
                my @header_cols_residual;
                if ($csv->parse($header_residual)) {
                    @header_cols_residual = $csv->fields();
                }
                my $residual_file_counter_index = 0;
                my $residual_file_counter = 1;
                while (my $row = <$fh_residual>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    my $residual = $columns[1];
                    my $fitted = $columns[2];
                    my $stock_name = $plot_id_map{$stock_id};
                    push @row_col_ordered_plots_names, $stock_name;
                    my $t = $sorted_trait_names[$residual_file_counter_index];
                    if ($residual_file_counter == scalar(@unique_plot_names)) {
                        $residual_file_counter = 0;
                        $residual_file_counter_index++;
                    }
                    if (defined $residual && $residual ne '') {
                        $result_residual_data_altered_env_5->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                        $residual_sum_altered_env_5 += abs($residual);
                        $residual_sum_square_altered_env_5 = $residual_sum_square_altered_env_5 + $residual*$residual;
                    }
                    if (defined $fitted && $fitted ne '') {
                        $result_fitted_data_altered_env_5->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                    }
                    $model_sum_square_residual_altered_env_5 = $model_sum_square_residual_altered_env_5 + $residual*$residual;

                    $residual_file_counter++;
                }
            close($fh_residual);

            open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                my $header = <$fh>;
                my @header_cols;
                if ($csv->parse($header)) {
                    @header_cols = $csv->fields();
                }

                my $solution_file_counter = 0;
                my $solution_file_g_counter = 1;
                my $solution_file_p_counter = 1;
                my $solution_file_counter_g_index = 0;
                my $solution_file_counter_p_index = 0;
                while (defined(my $row = <$fh>)) {
                    # print STDERR $row;
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $level = $columns[0];
                    my $value = $columns[1];
                    my $std = $columns[2];
                    my $z_ratio = $columns[3];
                    if (defined $value && $value ne '') {
                        if ($solution_file_counter < $number_accessions*$number_traits) {
                            my $t = $sorted_trait_names[$solution_file_counter_g_index];
                            if ($solution_file_g_counter == $number_accessions) {
                                $solution_file_g_counter = 0;
                                $solution_file_counter_g_index++;
                            }

                            my $stock_name = $accession_id_factor_map_reverse{$solution_file_g_counter+1};
                            $result_blup_data_altered_env_5->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $genetic_effect_min_altered_env_5) {
                                $genetic_effect_min_altered_env_5 = $value;
                            }
                            elsif ($value >= $genetic_effect_max_altered_env_5) {
                                $genetic_effect_max_altered_env_5 = $value;
                            }

                            $genetic_effect_sum_altered_env_5 += abs($value);
                            $genetic_effect_sum_square_altered_env_5 = $genetic_effect_sum_square_altered_env_5 + $value*$value;

                            $solution_file_g_counter++;
                            $current_gen_row_count++;
                        }
                        else {
                            my $t = $sorted_trait_names[$solution_file_counter_p_index];
                            if ($solution_file_p_counter == scalar(@unique_plot_names)) {
                                $solution_file_p_counter = 0;
                                $solution_file_counter_p_index++;
                            }

                            my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                            $result_blup_spatial_data_altered_env_5->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $env_effect_min_altered_env_5) {
                                $env_effect_min_altered_env_5 = $value;
                            }
                            elsif ($value >= $env_effect_max_altered_env_5) {
                                $env_effect_max_altered_env_5 = $value;
                            }

                            $env_effect_sum_altered_env_5 += abs($value);
                            $env_effect_sum_square_altered_env_5 = $env_effect_sum_square_altered_env_5 + $value*$value;

                            $solution_file_p_counter++;
                            $current_env_row_count++;
                        }
                    }
                    $solution_file_counter++;
                }
            close($fh);

            open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                my $header_cv1 = <$fh_cv1>;
                my @header_cols_cv1;
                if ($csv->parse($header_cv1)) {
                    @header_cols_cv1 = $csv->fields();
                }
                while (my $row = <$fh_cv1>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv1_altered_env_5 = $model_sum_square_cv1_altered_env_5 + ($true_value-$fitted)**2;
                }
            close($fh_cv1);

            open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                my $header_cv2 = <$fh_cv2>;
                my @header_cols_cv2;
                if ($csv->parse($header_cv2)) {
                    @header_cols_cv2 = $csv->fields();
                }
                while (my $row = <$fh_cv2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv2_altered_env_5 = $model_sum_square_cv2_altered_env_5 + ($true_value-$fitted)**2;
                }
            close($fh_cv2);

            open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                my $header_cv3 = <$fh_cv3>;
                my @header_cols_cv3;
                if ($csv->parse($header_cv3)) {
                    @header_cols_cv3 = $csv->fields();
                }
                while (my $row = <$fh_cv3>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv3_altered_env_5 = $model_sum_square_cv3_altered_env_5 + ($true_value-$fitted)**2;
                }
            close($fh_cv3);

            open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                my $header_cv4 = <$fh_cv4>;
                my @header_cols_cv4;
                if ($csv->parse($header_cv4)) {
                    @header_cols_cv4 = $csv->fields();
                }
                while (my $row = <$fh_cv4>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv4_altered_env_5 = $model_sum_square_cv4_altered_env_5 + ($true_value-$fitted)**2;
                }
            close($fh_cv4);

            open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                my $header_cv5 = <$fh_cv5>;
                my @header_cols_cv5;
                if ($csv->parse($header_cv5)) {
                    @header_cols_cv5 = $csv->fields();
                }
                while (my $row = <$fh_cv5>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv5_altered_env_5 = $model_sum_square_cv5_altered_env_5 + ($true_value-$fitted)**2;
                }
            close($fh_cv5);

            open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                my $header_cv1_2 = <$fh_cv1_2>;
                my @header_cols_cv1_2;
                if ($csv->parse($header_cv1_2)) {
                    @header_cols_cv1_2 = $csv->fields();
                }
                while (my $row = <$fh_cv1_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv1_2_altered_env_5 = $model_sum_square_cv1_2_altered_env_5 + ($true_value-$fitted)**2;
                }
            close($fh_cv1_2);

            open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                my $header_cv2_2 = <$fh_cv2_2>;
                my @header_cols_cv2_2;
                if ($csv->parse($header_cv2_2)) {
                    @header_cols_cv2_2 = $csv->fields();
                }
                while (my $row = <$fh_cv2_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv2_2_altered_env_5 = $model_sum_square_cv2_2_altered_env_5 + ($true_value-$fitted)**2;
                }
            close($fh_cv2_2);

            open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                my $header_cv3_2 = <$fh_cv3_2>;
                my @header_cols_cv3_2;
                if ($csv->parse($header_cv3_2)) {
                    @header_cols_cv3_2 = $csv->fields();
                }
                while (my $row = <$fh_cv3_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv3_2_altered_env_5 = $model_sum_square_cv3_2_altered_env_5 + ($true_value-$fitted)**2;
                }
            close($fh_cv3_2);

            open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                my $header_cv4_2 = <$fh_cv4_2>;
                my @header_cols_cv4_2;
                if ($csv->parse($header_cv4_2)) {
                    @header_cols_cv4_2 = $csv->fields();
                }
                while (my $row = <$fh_cv4_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv4_2_altered_env_5 = $model_sum_square_cv4_2_altered_env_5 + ($true_value-$fitted)**2;
                }
            close($fh_cv4_2);

            open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                my $header_cv5_2 = <$fh_cv5_2>;
                my @header_cols_cv5_2;
                if ($csv->parse($header_cv5_2)) {
                    @header_cols_cv5_2 = $csv->fields();
                }
                while (my $row = <$fh_cv5_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv5_2_altered_env_5 = $model_sum_square_cv5_2_altered_env_5 + ($true_value-$fitted)**2;
                }
            close($fh_cv5_2);

            open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                print STDERR "Opened $stats_out_tempfile_varcomp\n";
                my $header_varcomp = <$fh_varcomp>;
                my @header_cols_varcomp;
                if ($csv->parse($header_varcomp)) {
                    @header_cols_varcomp = $csv->fields();
                }
                while (my $row = <$fh_varcomp>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    push @varcomp_altered_env_5, \@columns;
                }
            close($fh_varcomp);

            if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                $run_stats_fault = 1;
            }

            if ($run_stats_fault == 1) {
                print STDERR "ERROR IN R CMD\n";
                return {error=>'Error in R! Try a larger tolerance'};
            }
        }
    }
    print STDERR "ALTERED w/SIM_ENV ar1xar1 $statistics_select GENETIC EFFECT SUM $genetic_effect_sum_altered_env_5\n";
    print STDERR "ALTERED w/SIM_ENV ar1xar1 $statistics_select ENV EFFECT SUM $env_effect_sum_altered_env_5\n";
    print STDERR Dumper [$genetic_effect_min_altered_env_5, $genetic_effect_max_altered_env_5, $env_effect_min_altered_env_5, $env_effect_max_altered_env_5];

    my @model_sum_square_altered_env_5_cv_values = ($model_sum_square_cv1_altered_env_5, $model_sum_square_cv2_altered_env_5, $model_sum_square_cv3_altered_env_5, $model_sum_square_cv4_altered_env_5, $model_sum_square_cv5_altered_env_5);
    my @model_sum_square_altered_env_5_cv_2_values = ($model_sum_square_cv1_2_altered_env_5, $model_sum_square_cv2_2_altered_env_5, $model_sum_square_cv3_2_altered_env_5, $model_sum_square_cv4_2_altered_env_5, $model_sum_square_cv5_2_altered_env_5);
    print STDERR Dumper \@model_sum_square_altered_env_5_cv_values;
    print STDERR Dumper \@model_sum_square_altered_env_5_cv_2_values;
    my $model_sum_square_altered_env_5_cv_stat = Statistics::Descriptive::Full->new();
    $model_sum_square_altered_env_5_cv_stat->add_data(@model_sum_square_altered_env_5_cv_values);
    my $model_sum_square_altered_env_cv_result_5 = {
        values => \@model_sum_square_altered_env_5_cv_values,
        variance => $model_sum_square_altered_env_5_cv_stat->variance(),
        mean => $model_sum_square_altered_env_5_cv_stat->mean()
    };
    my $model_sum_square_altered_env_5_cv_2_stat = Statistics::Descriptive::Full->new();
    $model_sum_square_altered_env_5_cv_2_stat->add_data(@model_sum_square_altered_env_5_cv_2_values);
    my $model_sum_square_altered_env_cv_2_result_5 = {
        values => \@model_sum_square_altered_env_5_cv_2_values,
        variance => $model_sum_square_altered_env_5_cv_2_stat->variance(),
        mean => $model_sum_square_altered_env_5_cv_2_stat->mean()
    };

    $env_simulation = "selected_field_trial_real_data_env";

    my (%phenotype_data_altered_env_6, @data_matrix_altered_env_6, @data_matrix_phenotypes_altered_env_6);
    my $phenotype_min_altered_env_6 = 1000000000;
    my $phenotype_max_altered_env_6 = -1000000000;
    my $env_sim_min_6 = 10000000000000;
    my $env_sim_max_6 = -10000000000000;
    my %sim_data_6;
    my %sim_data_check_6_times;

    eval {
        my $phenotypes_search_selected_env = CXGN::Phenotypes::SearchFactory->instantiate(
            'MaterializedViewTable',
            {
                bcs_schema=>$schema,
                data_level=>'plot',
                trait_list=>[$simulated_environment_real_data_trait_id],
                trial_list=>$field_trial_id_list,
                include_timestamp=>0,
                exclude_phenotype_outlier=>0
            }
        );
        my ($data_phenotypes_search_selected_env, $unique_traits_phenotypes_search_selected_env) = $phenotypes_search_selected_env->search();

        if (scalar(@$data_phenotypes_search_selected_env) == 0) {
            return {error=>'There are no phenotypes for the trials and traits you have selected for the simulated environment from real data!'};
        }

        my $time_count = 0;
        my @sim_data_env_first;
        foreach my $t (@sorted_trait_names) {
            foreach my $obs_unit (@$data_phenotypes_search_selected_env){
                my $row_number = $obs_unit->{obsunit_row_number} || '';
                my $col_number = $obs_unit->{obsunit_col_number} || '';

                my $observations = $obs_unit->{observations};
                foreach (@$observations){
                    my $sim_val = $_->{value};

                    $sim_data_check_6_times{$t}->{$row_number}->{$col_number} = $sim_val;

                    if ($sim_val < $env_sim_min_6) {
                        $env_sim_min_6 = $sim_val;
                    }
                    elsif ($sim_val >= $env_sim_max_6) {
                        $env_sim_max_6 = $sim_val;
                    }

                    if ($time_count == 0) {
                        push @sim_data_env_first, $sim_val;
                    }
                }
            }
            $time_count++;
        }

        if ($sim_env_change_over_time eq 'changing_gradual') {
            open(my $sim_change_f, ">", $sim_env_changing_mat_tempfile) || die "Can't open file ".$sim_env_changing_mat_tempfile;
                print STDERR "OPENING ENV SIM CHANGING GRADUAL $env_simulation CORR $sim_env_changing_mat_tempfile\n";
                foreach (@sim_data_env_first) {
                    print $sim_change_f $_."\n";
                }
            close($sim_change_f);

            my $sim_change_cmd = 'R -e "library(data.table);
            mat <- fread(\''.$sim_env_changing_mat_tempfile.'\', header=FALSE, sep=\'\t\');
            x1 <- mat\$V1;
            x234 <- scale(matrix( rnorm('.$number_plots.'* ('.$number_traits.'-1) ), ncol='.$number_traits.'-1 ));
            x1234 <- cbind(scale(x1),x234);
            c1 <- var(x1234);
            chol1 <- solve(chol(c1));
            newx <-  x1234 %*% chol1;
            zapsmall(cor(newx));
            all.equal( x1234[,1], newx[,1] );
            newc <- matrix(NA, ncol='.$number_traits.', nrow='.$number_traits.');
            diag(newc) <- rep(1,'.$number_traits.');
            newc[lower.tri(newc)] <- rep('.$correlation_between_times.',sum(seq(1,'.$number_traits.'-1)));
            newc[upper.tri(newc)] <- rep('.$correlation_between_times.',sum(seq(1,'.$number_traits.'-1)));
            eigen(newc);
            chol2 <- chol(newc);
            finalx <- newx %*% chol2 * sd(x1) + mean(x1);
            write.table(finalx, file=\''.$sim_env_changing_mat_full_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\'\t\');"';
            # print STDERR Dumper $sim_change_cmd;
            my $status_sim_change = system($sim_change_cmd);

            open(my $sim_change_res, '<', $sim_env_changing_mat_full_tempfile) or die "Could not open file '$sim_env_changing_mat_full_tempfile' $!";
                print STDERR "OPENING ENV SIM CHANGING GRADUAL VALUES $env_simulation CORR $sim_env_changing_mat_full_tempfile\n";
                my $sim_change_line_counter = 0;
                while (my $row = <$sim_change_res>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $p = $unique_plot_names[$sim_change_line_counter];
                    my $row_number = $stock_name_row_col{$p}->{row_number};
                    my $col_number = $stock_name_row_col{$p}->{col_number};

                    my $sim_change_trait_counter = 0;
                    foreach my $sim_val (@columns) {
                        my $t = $sorted_trait_names[$sim_change_trait_counter];
                        $sim_data_check_6_times{$t}->{$row_number}->{$col_number} = $sim_val;

                        if ($sim_val < $env_sim_min_6) {
                            $env_sim_min_6 = $sim_val;
                        }
                        elsif ($sim_val >= $env_sim_max_6) {
                            $env_sim_max_6 = $sim_val;
                        }

                        $sim_change_trait_counter++;
                    }
                    $sim_change_line_counter++;
                }
            close($sim_change_res);
        }
    };

    if ($permanent_environment_structure eq 'env_corr_structure') {
        my @sim_data_diff_6;
        my $num_plots = scalar(@unique_plot_names);
        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $plot_id = $stock_name_row_col{$p}->{obsunit_stock_id};
            my @diffs = ($plot_id);
            foreach my $t (@sorted_trait_names) {
                my $sim_val = $sim_data_check_6_times{$t}->{$row_number}->{$col_number};
                foreach my $r (@seen_rows_ordered) {
                    foreach my $c (@seen_cols_ordered) {
                        my $v = $sim_data_check_6_times{$t}->{$r}->{$c};
                        push @diffs, $sim_val - $v;
                    }
                }
            }
            push @sim_data_diff_6, \@diffs;
        }

        open(my $pe_pheno_f, ">", $permanent_environment_structure_env_tempfile) || die "Can't open file ".$permanent_environment_structure_env_tempfile;
            print STDERR "OPENING PERMANENT ENVIRONMENT ENV $env_simulation CORR $permanent_environment_structure_env_tempfile\n";
            foreach (@sim_data_diff_6) {
                my $line = join "\t", @$_;
                print $pe_pheno_f $line."\n";
            }
        close($pe_pheno_f);

        my $pe_rel_cmd = 'R -e "library(lme4); library(data.table);
        mat_agg <- fread(\''.$permanent_environment_structure_env_tempfile.'\', header=FALSE, sep=\'\t\');
        mat_pheno <- mat_agg[,2:ncol(mat_agg)];
        a <- data.matrix(mat_pheno) - (matrix(rep(1,'.$num_plots.'*'.$num_plots.'), nrow='.$num_plots.') %*% data.matrix(mat_pheno))/'.$num_plots.';
        cor_mat <- a %*% t(a);
        rownames(cor_mat) <- data.matrix(mat_agg[,1]);
        colnames(cor_mat) <- data.matrix(mat_agg[,1]);
        range01 <- function(x){(x-min(x))/(max(x)-min(x))};
        cor_mat <- range01(cor_mat);
        write.table(cor_mat, file=\''.$permanent_environment_structure_env_tempfile2.'\', row.names=TRUE, col.names=TRUE, sep=\'\t\');"';
        # print STDERR Dumper $pe_rel_cmd;
        my $status_pe_rel = system($pe_rel_cmd);

        my %rel_pe_result_hash;
        open(my $pe_rel_res, '<', $permanent_environment_structure_env_tempfile2) or die "Could not open file '$permanent_environment_structure_env_tempfile2' $!";
            print STDERR "Opened PERMANENT ENV $env_simulation CORR FILE $permanent_environment_structure_env_tempfile2\n";
            my $header_row = <$pe_rel_res>;
            my @header;
            if ($csv->parse($header_row)) {
                @header = $csv->fields();
            }

            while (my $row = <$pe_rel_res>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                my $stock_id1 = $columns[0];
                my $counter = 1;
                foreach my $stock_id2 (@header) {
                    my $val = $columns[$counter];
                    $rel_pe_result_hash{$stock_id1}->{$stock_id2} = $val;
                    $counter++;
                }
            }
        close($pe_rel_res);

        my $data_rel_pe = '';
        my %result_hash_pe;
        foreach my $s (sort { $a <=> $b } @plot_ids_ordered) {
            foreach my $r (sort { $a <=> $b } @plot_ids_ordered) {
                my $s_factor = $stock_name_row_col{$plot_id_map{$s}}->{plot_id_factor};
                my $r_factor = $stock_name_row_col{$plot_id_map{$r}}->{plot_id_factor};
                if (!exists($result_hash_pe{$s_factor}->{$r_factor}) && !exists($result_hash_pe{$r_factor}->{$s_factor})) {
                    $result_hash_pe{$s_factor}->{$r_factor} = $rel_pe_result_hash{$s}->{$r};
                }
            }
        }
        foreach my $r (sort { $a <=> $b } keys %result_hash_pe) {
            foreach my $s (sort { $a <=> $b } keys %{$result_hash_pe{$r}}) {
                my $val = $result_hash_pe{$r}->{$s};
                if (defined $val and length $val) {
                    $data_rel_pe .= "$r\t$s\t$val\n";
                }
            }
        }

        open(my $pe_rel_out, ">", $permanent_environment_structure_env_tempfile_mat) || die "Can't open file ".$permanent_environment_structure_env_tempfile_mat;
            print STDERR "Opened PERMANENT ENV $env_simulation CORR FILE 3col $permanent_environment_structure_env_tempfile_mat\n";
            print $pe_rel_out $data_rel_pe;
        close($pe_rel_out);
    }

    print STDERR "ADD SIMULATED ENV TO ALTERED PHENO selected_field_trial_htp_env\n";
    print STDERR Dumper [$env_sim_min_6, $env_sim_max_6];
    if ($statistics_select eq 'sommer_grm_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_genetic_blups' || $statistics_select eq 'sommer_grm_spatial_pure_2dspl_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_pure_2dspl_genetic_blups') {

        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};
            my @row = ($replicate, $block, "S".$germplasm_stock_id, $obsunit_stock_id, $row_number, $col_number, $row_number, $col_number);

            foreach my $t (@sorted_trait_names) {
                if (defined($phenotype_data_altered{$p}->{$t})) {
                    my $new_val = $phenotype_data_altered{$p}->{$t} + 0;
                    my $sim_val = $sim_data_check_6_times{$t}->{$row_number}->{$col_number};
                    $sim_val = (($sim_val - $env_sim_min_6)/($env_sim_max_6 - $env_sim_min_6))*$env_variance_percent;
                    $new_val += $sim_val;

                    if ($new_val < $phenotype_min_altered_env_6) {
                        $phenotype_min_altered_env_6 = $new_val;
                    }
                    elsif ($new_val >= $phenotype_max_altered_env_6) {
                        $phenotype_max_altered_env_6 = $new_val;
                    }

                    $sim_data_6{$p}->{$t} = $sim_val;
                    $phenotype_data_altered_env_6{$p}->{$t} = $new_val;
                    push @row, $new_val;
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, 'NA';
                }
            }
            push @data_matrix_altered_env_6, \@row;
        }

        open(my $F, ">", $stats_tempfile) || die "Can't open file ".$stats_tempfile;
            print $F $header_string."\n";
            foreach (@data_matrix_altered_env_6) {
                my $line = join ',', @$_;
                print $F "$line\n";
            }
        close($F);
    }
    elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {

        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};

            my @data_matrix_phenotypes_row;
            my $current_trait_index = 0;
            foreach my $t (@sorted_trait_names) {
                my @row = (
                    $accession_id_factor_map{$germplasm_stock_id},
                    $obsunit_stock_id,
                    $replicate,
                    $t,
                    $plot_rep_time_factor_map{$obsunit_stock_id}->{$replicate}->{$t},
                    $stock_row_col{$obsunit_stock_id}->{plot_id_factor}
                );

                my $polys = $polynomial_map{$t};
                push @row, @$polys;

                if (defined($phenotype_data_altered{$p}->{$t})) {
                    if ($use_area_under_curve) {
                        my $val = 0;
                        foreach my $counter (0..$current_trait_index) {
                            if ($counter == 0) {
                                $val = $val + $phenotype_data_altered{$p}->{$sorted_trait_names[$counter]} + 0;
                            }
                            else {
                                my $t1 = $sorted_trait_names[$counter-1];
                                my $t2 = $sorted_trait_names[$counter];
                                my $p1 = $phenotype_data_altered{$p}->{$t1} + 0;
                                my $p2 = $phenotype_data_altered{$p}->{$t2} + 0;
                                my $neg = 1;
                                my $min_val = $p1;
                                if ($p2 < $p1) {
                                    $neg = -1;
                                    $min_val = $p2;
                                }
                                $val = $val + (($neg*($p2-$p1)*($t2-$t1))/2)+($t2-$t1)*$min_val;
                            }
                        }

                        my $sim_val = $sim_data_check_6_times{$t}->{$row_number}->{$col_number};
                        $sim_val = (($sim_val - $env_sim_min_6)/($env_sim_max_6 - $env_sim_min_6))*$env_variance_percent;
                        $val += $sim_val;

                        if ($val < $phenotype_min_altered_env_6) {
                            $phenotype_min_altered_env_6 = $val;
                        }
                        elsif ($val >= $phenotype_max_altered_env_6) {
                            $phenotype_max_altered_env_6 = $val;
                        }

                        $sim_data_6{$p}->{$t} = $sim_val;
                        $phenotype_data_altered_env_6{$p}->{$t} = $val;
                        push @row, $val;
                        push @data_matrix_phenotypes_row, $val;
                    }
                    else {
                        my $val = $phenotype_data_altered{$p}->{$t} + 0;
                        my $sim_val = $sim_data_check_6_times{$t}->{$row_number}->{$col_number};
                        $sim_val = (($sim_val - $env_sim_min_6)/($env_sim_max_6 - $env_sim_min_6))*$env_variance_percent;
                        $val += $sim_val;

                        if ($val < $phenotype_min_altered_env_6) {
                            $phenotype_min_altered_env_6 = $val;
                        }
                        elsif ($val >= $phenotype_max_altered_env_6) {
                            $phenotype_max_altered_env_6 = $val;
                        }

                        $sim_data_6{$p}->{$t} = $sim_val;
                        $phenotype_data_altered_env_6{$p}->{$t} = $val;
                        push @row, $val;
                        push @data_matrix_phenotypes_row, $val;
                    }
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, '';
                    push @data_matrix_phenotypes_row, 'NA';
                }

                push @data_matrix_altered_env_6, \@row;
                push @data_matrix_phenotypes_altered_env_6, \@data_matrix_phenotypes_row;

                $current_trait_index++;
            }
        }

        open(my $F, ">", $stats_tempfile_2) || die "Can't open file ".$stats_tempfile_2;
            foreach (@data_matrix_altered_env_6) {
                my $line = join ' ', @$_;
                print $F "$line\n";
            }
        close($F);

        open(my $F2, ">", $stats_prep2_tempfile) || die "Can't open file ".$stats_prep2_tempfile;
            foreach (@data_matrix_phenotypes_altered_env_6) {
                my $line = join ',', @$_;
                print $F2 "$line\n";
            }
        close($F2);
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'asreml_grm_univariate_pure_spatial_genetic_blups' || $statistics_select eq 'asreml_grm_multivariate_spatial_genetic_blups') {
        foreach my $p (@unique_plot_names) {
            my $row_number = $stock_name_row_col{$p}->{row_number};
            my $col_number = $stock_name_row_col{$p}->{col_number};
            my $replicate = $stock_name_row_col{$p}->{rep};
            my $block = $stock_name_row_col{$p}->{block};
            my $germplasm_stock_id = $stock_name_row_col{$p}->{germplasm_stock_id};
            my $germplasm_name = $stock_name_row_col{$p}->{germplasm_name};
            my $obsunit_stock_id = $stock_name_row_col{$p}->{obsunit_stock_id};

            my @row = (
                $germplasm_stock_id,
                $obsunit_stock_id,
                $replicate,
                $row_number,
                $col_number,
                $accession_id_factor_map{$germplasm_stock_id},
                $stock_row_col{$obsunit_stock_id}->{plot_id_factor}
            );

            foreach my $t (@sorted_trait_names) {
                if (defined($phenotype_data_altered{$p}->{$t})) {
                    my $new_val = $phenotype_data_altered{$p}->{$t} + 0;
                    my $sim_val = $sim_data_check_6_times{$t}->{$row_number}->{$col_number};
                    $sim_val = (($sim_val - $env_sim_min_6)/($env_sim_max_6 - $env_sim_min_6))*$env_variance_percent;
                    $new_val += $sim_val;

                    if ($new_val < $phenotype_min_altered_env_6) {
                        $phenotype_min_altered_env_6 = $new_val;
                    }
                    elsif ($new_val >= $phenotype_max_altered_env_6) {
                        $phenotype_max_altered_env_6 = $new_val;
                    }

                    $sim_data_6{$p}->{$t} = $sim_val;
                    $phenotype_data_altered_env_6{$p}->{$t} = $new_val;
                    push @row, $new_val;
                } else {
                    print STDERR $p." : $t : $germplasm_name : NA \n";
                    push @row, '';
                }
            }
            push @data_matrix_altered_env_6, \@row;
        }

        open(my $F, ">", $stats_tempfile_2) || die "Can't open file ".$stats_tempfile_2;
            print $F $header_string."\n";
            foreach (@data_matrix_altered_env_6) {
                my $line = join ',', @$_;
                print $F "$line\n";
            }
        close($F);
    }
    print STDERR Dumper [$phenotype_min_altered_env_6, $phenotype_max_altered_env_6];

    my ($result_blup_data_altered_env_6, $result_blup_data_delta_altered_env_6, $result_blup_spatial_data_altered_env_6, $result_blup_pe_data_altered_env_6, $result_blup_pe_data_delta_altered_env_6, $result_residual_data_altered_env_6, $result_fitted_data_altered_env_6, %fixed_effects_altered_env_6, %rr_genetic_coefficients_altered_env_6, %rr_temporal_coefficients_altered_env_6);
    my (@rr_coeff_genetic_covariance_altered_env_6, @rr_coeff_env_covariance_altered_env_6, @rr_coeff_genetic_correlation_altered_env_6, @rr_coeff_env_correlation_altered_env_6, $rr_residual_variance_altered_env_6);
    my (@varcomp_altered_env_6);
    my $model_sum_square_residual_altered_env_6 = 0;
    my $model_sum_square_cv1_altered_env_6 = 0;
    my $model_sum_square_cv2_altered_env_6 = 0;
    my $model_sum_square_cv3_altered_env_6 = 0;
    my $model_sum_square_cv4_altered_env_6 = 0;
    my $model_sum_square_cv5_altered_env_6 = 0;
    my $model_sum_square_cv1_2_altered_env_6 = 0;
    my $model_sum_square_cv2_2_altered_env_6 = 0;
    my $model_sum_square_cv3_2_altered_env_6 = 0;
    my $model_sum_square_cv4_2_altered_env_6 = 0;
    my $model_sum_square_cv5_2_altered_env_6 = 0;
    my $genetic_effect_min_altered_env_6 = 1000000000;
    my $genetic_effect_max_altered_env_6 = -1000000000;
    my $env_effect_min_altered_env_6 = 1000000000;
    my $env_effect_max_altered_env_6 = -1000000000;
    my $genetic_effect_sum_square_altered_env_6 = 0;
    my $genetic_effect_sum_altered_env_6 = 0;
    my $env_effect_sum_square_altered_env_6 = 0;
    my $env_effect_sum_altered_env_6 = 0;
    my $residual_sum_square_altered_env_6 = 0;
    my $residual_sum_altered_env_6 = 0;

    print STDERR "RUN ENV ESTIMATE ON Altered Pheno With Sim Env selected_field_trial_htp_env\n";
    if ($statistics_select eq 'sommer_grm_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_spatial_pure_2dspl_genetic_blups') {
        #print STDERR Dumper $prepare_file_cv_cmd;
        # print STDERR Dumper $statistics_cmd;
        eval {
            my $status_prepare_file_cv = system($prepare_file_cv_cmd);
            my $status_prepare_file_cv2 = system($prepare_file_cv2_cmd);
            my $status = system($statistics_cmd);
            if ($perform_cv) {
                my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
            }
        };
        my $run_stats_fault = 0;
        if ($@) {
            print STDERR "R ERROR\n";
            print STDERR Dumper $@;
            $run_stats_fault = 1;
        }
        else {
            my $current_gen_row_count = 0;
            my $current_env_row_count = 0;

            open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                my $header = <$fh>;
                my @header_cols;
                if ($csv->parse($header)) {
                    @header_cols = $csv->fields();
                }

                while (my $row = <$fh>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $col_counter = 0;
                    foreach my $encoded_trait (@header_cols) {
                        my $trait = $trait_name_encoder_rev{$encoded_trait};
                        my $stock_id = $columns[0];

                        my $stock_name = $stock_info{$stock_id}->{uniquename};
                        my $value = $columns[$col_counter+1];
                        if (defined $value && $value ne '') {
                            $result_blup_data_altered_env_6->{$stock_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $genetic_effect_min_altered_env_6) {
                                $genetic_effect_min_altered_env_6 = $value;
                            }
                            elsif ($value >= $genetic_effect_max_altered_env_6) {
                                $genetic_effect_max_altered_env_6 = $value;
                            }

                            $genetic_effect_sum_altered_env_6 += abs($value);
                            $genetic_effect_sum_square_altered_env_6 = $genetic_effect_sum_square_altered_env_6 + $value*$value;
                        }
                        $col_counter++;
                    }
                    $current_gen_row_count++;
                }
            close($fh);

            open(my $fh_2dspl, '<', $stats_out_tempfile_2dspl) or die "Could not open file '$stats_out_tempfile_2dspl' $!";
                print STDERR "Opened $stats_out_tempfile_2dspl\n";

                my $header_2dspl = <$fh_2dspl>;
                my @header_cols_2dspl;
                if ($csv->parse($header_2dspl)) {
                    @header_cols_2dspl = $csv->fields();
                }
                shift @header_cols_2dspl;
                while (my $row_2dspl = <$fh_2dspl>) {
                    my @columns;
                    if ($csv->parse($row_2dspl)) {
                        @columns = $csv->fields();
                    }
                    my $col_counter = 0;
                    foreach my $encoded_trait (@header_cols_2dspl) {
                        my $trait = $trait_name_encoder_rev{$encoded_trait};
                        my $plot_id = $columns[0];

                        my $plot_name = $plot_id_map{$plot_id};
                        my $value = $columns[$col_counter+1];
                        if (defined $value && $value ne '') {
                            $result_blup_spatial_data_altered_env_6->{$plot_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $env_effect_min_altered_env_6) {
                                $env_effect_min_altered_env_6 = $value;
                            }
                            elsif ($value >= $env_effect_max_altered_env_6) {
                                $env_effect_max_altered_env_6 = $value;
                            }

                            $env_effect_sum_altered_env_6 += abs($value);
                            $env_effect_sum_square_altered_env_6 = $env_effect_sum_square_altered_env_6 + $value*$value;
                        }
                        $col_counter++;
                    }
                    $current_env_row_count++;
                }
            close($fh_2dspl);

            open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                print STDERR "Opened $stats_out_tempfile_residual\n";

                my $header_residual = <$fh_residual>;
                my @header_cols_residual;
                if ($csv->parse($header_residual)) {
                    @header_cols_residual = $csv->fields();
                }
                while (my $row = <$fh_residual>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $residual = $columns[1 + $_];
                        my $fitted = $columns[1 + $number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_6->{$stock_name}->{$trait_name} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_6 += abs($residual);
                            $residual_sum_square_altered_env_6 = $residual_sum_square_altered_env_6 + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_6->{$stock_name}->{$trait_name} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_6 = $model_sum_square_residual_altered_env_6 + $residual*$residual;
                    }
                }
            close($fh_residual);

            open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                my $header_cv1 = <$fh_cv1>;
                my @header_cols_cv1;
                if ($csv->parse($header_cv1)) {
                    @header_cols_cv1 = $csv->fields();
                }
                while (my $row = <$fh_cv1>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_6 = $model_sum_square_cv1_altered_env_6 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv1);

            open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                my $header_cv2 = <$fh_cv2>;
                my @header_cols_cv2;
                if ($csv->parse($header_cv2)) {
                    @header_cols_cv2 = $csv->fields();
                }
                while (my $row = <$fh_cv2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_6 = $model_sum_square_cv2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv2);

            open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                my $header_cv3 = <$fh_cv3>;
                my @header_cols_cv3;
                if ($csv->parse($header_cv3)) {
                    @header_cols_cv3 = $csv->fields();
                }
                while (my $row = <$fh_cv3>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_6 = $model_sum_square_cv3_altered_env_6 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv3);

            open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                my $header_cv4 = <$fh_cv4>;
                my @header_cols_cv4;
                if ($csv->parse($header_cv4)) {
                    @header_cols_cv4 = $csv->fields();
                }
                while (my $row = <$fh_cv4>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_6 = $model_sum_square_cv4_altered_env_6 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv4);

            open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                my $header_cv5 = <$fh_cv5>;
                my @header_cols_cv5;
                if ($csv->parse($header_cv5)) {
                    @header_cols_cv5 = $csv->fields();
                }
                while (my $row = <$fh_cv5>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_6 = $model_sum_square_cv5_altered_env_6 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv5);

            open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                my $header_cv1_2 = <$fh_cv1_2>;
                my @header_cols_cv1_2;
                if ($csv->parse($header_cv1_2)) {
                    @header_cols_cv1_2 = $csv->fields();
                }
                while (my $row = <$fh_cv1_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_6 = $model_sum_square_cv1_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv1_2);

            open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                my $header_cv2_2 = <$fh_cv2_2>;
                my @header_cols_cv2_2;
                if ($csv->parse($header_cv2_2)) {
                    @header_cols_cv2_2 = $csv->fields();
                }
                while (my $row = <$fh_cv2_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_6 = $model_sum_square_cv2_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv2_2);

            open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                my $header_cv3_2 = <$fh_cv3_2>;
                my @header_cols_cv3_2;
                if ($csv->parse($header_cv3_2)) {
                    @header_cols_cv3_2 = $csv->fields();
                }
                while (my $row = <$fh_cv3_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_6 = $model_sum_square_cv3_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv3_2);

            open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                my $header_cv4_2 = <$fh_cv4_2>;
                my @header_cols_cv4_2;
                if ($csv->parse($header_cv4_2)) {
                    @header_cols_cv4_2 = $csv->fields();
                }
                while (my $row = <$fh_cv4_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_6 = $model_sum_square_cv4_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv4_2);

            open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                my $header_cv5_2 = <$fh_cv5_2>;
                my @header_cols_cv5_2;
                if ($csv->parse($header_cv5_2)) {
                    @header_cols_cv5_2 = $csv->fields();
                }
                while (my $row = <$fh_cv5_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    foreach (0..$number_traits-1) {
                        my $trait_name = $sorted_trait_names[$_];
                        my $true_value = $columns[1 + $_];
                        my $masked_value = $columns[1 + $number_traits + $_];
                        my $residual = $columns[1 + 2*$number_traits + $_];
                        my $fitted = $columns[1 + 3*$number_traits + $_];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_6 = $model_sum_square_cv5_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                }
            close($fh_cv5_2);

            open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                print STDERR "Opened $stats_out_tempfile_varcomp\n";
                my $header_varcomp = <$fh_varcomp>;
                my @header_cols_varcomp;
                if ($csv->parse($header_varcomp)) {
                    @header_cols_varcomp = $csv->fields();
                }
                while (my $row = <$fh_varcomp>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    push @varcomp_altered_env_6, \@columns;
                }
            close($fh_varcomp);

            if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                $run_stats_fault = 1;
            }
        }

        if ($run_stats_fault == 1) {
            print STDERR "ERROR IN R CMD\n";
            return {error=>'Error in R! Try a larger tolerance'};
        }
    }
    elsif ($statistics_select eq 'sommer_grm_univariate_spatial_genetic_blups' || $statistics_select eq 'sommer_grm_univariate_spatial_pure_2dspl_genetic_blups') {
        my @encoded_traits = values %trait_name_encoder;
        foreach my $t (@encoded_traits) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;
                    my @header_cols;
                    if ($csv->parse($header)) {
                        @header_cols = $csv->fields();
                    }

                    while (my $row = <$fh>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $col_counter = 0;
                        foreach my $encoded_trait (@header_cols) {
                            if ($encoded_trait eq $t) {
                                my $trait = $trait_name_encoder_rev{$encoded_trait};
                                my $stock_id = $columns[0];

                                my $stock_name = $stock_info{$stock_id}->{uniquename};
                                my $value = $columns[$col_counter+1];
                                if (defined $value && $value ne '') {
                                    $result_blup_data_altered_env_6->{$stock_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                                    if ($value < $genetic_effect_min_altered_env_6) {
                                        $genetic_effect_min_altered_env_6 = $value;
                                    }
                                    elsif ($value >= $genetic_effect_max_altered_env_6) {
                                        $genetic_effect_max_altered_env_6 = $value;
                                    }

                                    $genetic_effect_sum_altered_env_6 += abs($value);
                                    $genetic_effect_sum_square_altered_env_6 = $genetic_effect_sum_square_altered_env_6 + $value*$value;
                                }
                            }
                            $col_counter++;
                        }
                        $current_gen_row_count++;
                    }
                close($fh);

                open(my $fh_2dspl, '<', $stats_out_tempfile_2dspl) or die "Could not open file '$stats_out_tempfile_2dspl' $!";
                    print STDERR "Opened $stats_out_tempfile_2dspl\n";

                    my $header_2dspl = <$fh_2dspl>;
                    my @header_cols_2dspl;
                    if ($csv->parse($header_2dspl)) {
                        @header_cols_2dspl = $csv->fields();
                    }
                    shift @header_cols_2dspl;
                    while (my $row_2dspl = <$fh_2dspl>) {
                        my @columns;
                        if ($csv->parse($row_2dspl)) {
                            @columns = $csv->fields();
                        }
                        my $col_counter = 0;
                        foreach my $encoded_trait (@header_cols_2dspl) {
                            if ($encoded_trait eq $t) {
                                my $trait = $trait_name_encoder_rev{$encoded_trait};
                                my $plot_id = $columns[0];

                                my $plot_name = $plot_id_map{$plot_id};
                                my $value = $columns[$col_counter+1];
                                if (defined $value && $value ne '') {
                                    $result_blup_spatial_data_altered_env_6->{$plot_name}->{$trait} = [$value, $timestamp, $user_name, '', ''];

                                    if ($value < $env_effect_min_altered_env_6) {
                                        $env_effect_min_altered_env_6 = $value;
                                    }
                                    elsif ($value >= $env_effect_max_altered_env_6) {
                                        $env_effect_max_altered_env_6 = $value;
                                    }

                                    $env_effect_sum_altered_env_6 += abs($value);
                                    $env_effect_sum_square_altered_env_6 = $env_effect_sum_square_altered_env_6 + $value*$value;
                                }
                            }
                            $col_counter++;
                        }
                        $current_env_row_count++;
                    }
                close($fh_2dspl);

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";

                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_6->{$stock_name}->{$trait_name} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_6 += abs($residual);
                            $residual_sum_square_altered_env_6 = $residual_sum_square_altered_env_6 + $residual*$residual;
                        }
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_6->{$stock_name}->{$trait_name} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_6 = $model_sum_square_residual_altered_env_6 + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_6 = $model_sum_square_cv1_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_6 = $model_sum_square_cv2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_6 = $model_sum_square_cv3_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_6 = $model_sum_square_cv4_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_6 = $model_sum_square_cv5_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_6 = $model_sum_square_cv1_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_6 = $model_sum_square_cv2_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_6 = $model_sum_square_cv3_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_6 = $model_sum_square_cv4_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_6 = $model_sum_square_cv5_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        push @varcomp_altered_env_6, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {

        print STDERR Dumper $statistics_cmd;
        my $status_r = system($statistics_cmd);

        my @pheno_var;
        open(my $fh_r, '<', $stats_out_param_tempfile) or die "Could not open file '$stats_out_param_tempfile' $!";
            print STDERR "Opened $stats_out_param_tempfile\n";

            while (defined(my $row = <$fh_r>)) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @pheno_var, \@columns;
            }
        close($fh_r);
        # print STDERR Dumper \@pheno_var;

        my $stats_tempfile_2_basename = basename($stats_tempfile_2);
        my $grm_file_basename = basename($grm_rename_tempfile);
        my $permanent_environment_structure_file_basename = basename($permanent_environment_structure_tempfile);
        my $permanent_environment_structure_env_file_basename = basename($permanent_environment_structure_env_tempfile_mat);
        #my @phenotype_header = ("id", "plot_id", "replicate", "time", "replicate_time", "ind_replicate", @sorted_trait_names, "phenotype");

        my $effect_1_levels = scalar(@rep_time_factors);
        my $effect_grm_levels = scalar(@unique_accession_names);
        my $effect_pe_levels = scalar(@ind_rep_factors);

        print STDERR Dumper $stats_tempfile_2;
        my $data_cv_cmd = 'R -e "mat <- read.csv(\''.$stats_tempfile_2.'\', header=FALSE, sep=\' \');
        randomized_positions <- sample(length(mat[,1]));
        cv_step_size <- length(mat[,1]) %/% 5;
        cv_step_size_modulo <- length(mat[,1]) %% 5;
        mat_CV1 <- mat; mat_CV2 <- mat; mat_CV3 <- mat; mat_CV4 <- mat; mat_CV5 <- mat;
        mat_CV1[c(randomized_positions[1:cv_step_size]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV2[c(randomized_positions[(cv_step_size+1):(2*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV3[c(randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV4[c(randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV5[c(randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]),ncol(mat)] <- median(mat[,ncol(mat)]);
        mat_CV1_2 <- mat; mat_CV2_2 <- mat; mat_CV3_2 <- mat; mat_CV4_2 <- mat; mat_CV5_2 <- mat;
        mat_CV1_2[c(randomized_positions[1:cv_step_size]),ncol(mat)] <- -999;
        mat_CV2_2[c(randomized_positions[(cv_step_size+1):(2*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV3_2[c(randomized_positions[((2*cv_step_size)+1):(3*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV4_2[c(randomized_positions[((3*cv_step_size)+1):(4*cv_step_size)]),ncol(mat)] <- -999;
        mat_CV5_2[c(randomized_positions[((4*cv_step_size)+1):((5*cv_step_size)+cv_step_size_modulo)]),ncol(mat)] <- -999;
        write.table(mat, file=\''.$stats_tempfile_2.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV1, file=\''.$stats_out_cv1_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV2, file=\''.$stats_out_cv2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV3, file=\''.$stats_out_cv3_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV4, file=\''.$stats_out_cv4_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV5, file=\''.$stats_out_cv5_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV1_2, file=\''.$stats_out_cv1_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV2_2, file=\''.$stats_out_cv2_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV3_2, file=\''.$stats_out_cv3_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV4_2, file=\''.$stats_out_cv4_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        write.table(mat_CV5_2, file=\''.$stats_out_cv5_2_predict_tempfile.'\', row.names=FALSE, col.names=FALSE, sep=\' \');
        "';
        my $status_cv_files = system($data_cv_cmd);

        my $stats_out_cv1_predict_tempfile_basename = basename($stats_out_cv1_predict_tempfile);
        my $stats_out_cv2_predict_tempfile_basename = basename($stats_out_cv2_predict_tempfile);
        my $stats_out_cv3_predict_tempfile_basename = basename($stats_out_cv3_predict_tempfile);
        my $stats_out_cv4_predict_tempfile_basename = basename($stats_out_cv4_predict_tempfile);
        my $stats_out_cv5_predict_tempfile_basename = basename($stats_out_cv5_predict_tempfile);

        my $stats_out_cv1_2_predict_tempfile_basename = basename($stats_out_cv1_2_predict_tempfile);
        my $stats_out_cv2_2_predict_tempfile_basename = basename($stats_out_cv2_2_predict_tempfile);
        my $stats_out_cv3_2_predict_tempfile_basename = basename($stats_out_cv3_2_predict_tempfile);
        my $stats_out_cv4_2_predict_tempfile_basename = basename($stats_out_cv4_2_predict_tempfile);
        my $stats_out_cv5_2_predict_tempfile_basename = basename($stats_out_cv5_2_predict_tempfile);

        @param_file_rows_2 = (
            '(CO)VARIANCES'
        );
        foreach (@pheno_var) {
            my $s = join ' ', @$_;
            push @param_file_rows_2, $s;
        }
        @param_file_rows_4 = (
            '(CO)VARIANCES'
        );
        foreach (@pheno_var) {
            my $s = join ' ', @$_;
            push @param_file_rows_4, $s;
        }

        open(my $Fp, ">", $parameter_tempfile) || die "Can't open file ".$parameter_tempfile;
            foreach ((@param_file_rows_data, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp "$_\n";
            }
        close($Fp);

        open(my $Fp_cv1, ">", $parameter_tempfile_cv1) || die "Can't open file ".$parameter_tempfile_cv1;
            foreach ((@param_file_rows_data_cv1, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv1 "$_\n";
            }
        close($Fp_cv1);

        open(my $Fp_cv2, ">", $parameter_tempfile_cv2) || die "Can't open file ".$parameter_tempfile_cv2;
            foreach ((@param_file_rows_data_cv2, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv2 "$_\n";
            }
        close($Fp_cv2);

        open(my $Fp_cv3, ">", $parameter_tempfile_cv3) || die "Can't open file ".$parameter_tempfile_cv3;
            foreach ((@param_file_rows_data_cv3, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv3 "$_\n";
            }
        close($Fp_cv3);

        open(my $Fp_cv4, ">", $parameter_tempfile_cv4) || die "Can't open file ".$parameter_tempfile_cv4;
            foreach ((@param_file_rows_data_cv4, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv4 "$_\n";
            }
        close($Fp_cv4);

        open(my $Fp_cv5, ">", $parameter_tempfile_cv5) || die "Can't open file ".$parameter_tempfile_cv5;
            foreach ((@param_file_rows_data_cv5, @param_file_rows_1, @param_file_rows_2, @param_file_rows_3, @param_file_rows_4, @param_file_rows_5)) {
                print $Fp_cv5 "$_\n";
            }
        close($Fp_cv5);

        my $command_name = '';
        if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'blupf90_grm_random_regression_dap_blups') {
            $command_name = 'blupf90';
        }
        elsif ($statistics_select eq 'airemlf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
            $command_name = 'airemlf90';
        }

        my $parameter_tempfile_basename = basename($parameter_tempfile);
        my $parameter_tempfile_cv1_basename = basename($parameter_tempfile_cv1);
        my $parameter_tempfile_cv2_basename = basename($parameter_tempfile_cv2);
        my $parameter_tempfile_cv3_basename = basename($parameter_tempfile_cv3);
        my $parameter_tempfile_cv4_basename = basename($parameter_tempfile_cv4);
        my $parameter_tempfile_cv5_basename = basename($parameter_tempfile_cv5);
        my $parameter_tempfile_cv1_2_basename = basename($parameter_tempfile_cv1_2);
        my $parameter_tempfile_cv2_2_basename = basename($parameter_tempfile_cv2_2);
        my $parameter_tempfile_cv3_2_basename = basename($parameter_tempfile_cv3_2);
        my $parameter_tempfile_cv4_2_basename = basename($parameter_tempfile_cv4_2);
        my $parameter_tempfile_cv5_2_basename = basename($parameter_tempfile_cv5_2);

        print STDERR Dumper $cmd_f90;
        my $status = system($cmd_f90);

        my @log_output_rows;
        open(my $fh_log, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
            print STDERR "Opened $stats_out_tempfile\n";
            while (my $row = <$fh_log>) {
                print STDERR $row;
                push @log_output_rows, $row;
            }
        close($fh_log);

        my $log_output = join '', @log_output_rows;
        my ($gen_var_string) = $log_output =~ /Genetic variance\(s\) for effect  2(.*?)correlations/gs;
        @rr_coeff_genetic_covariance_altered_env_6 = split ' ', $gen_var_string;
        print STDERR Dumper \@rr_coeff_genetic_covariance_altered_env_6;
        my ($env_var_string) = $log_output =~ /Genetic variance\(s\) for effect  $legendre_order_number_env_var_pos(.*?)correlations/gs;
        @rr_coeff_env_covariance_altered_env_6 = split ' ', $env_var_string;
        print STDERR Dumper \@rr_coeff_env_covariance_altered_env_6;
        my (@gen_cor_string) = $log_output =~ /correlations(.*?)eigenvectors/gs;
        @rr_coeff_genetic_correlation_altered_env_6 = split ' ', $gen_cor_string[0];
        print STDERR Dumper \@rr_coeff_genetic_correlation_altered_env_6;
        @rr_coeff_env_correlation_altered_env_6 = split ' ', $gen_cor_string[1];
        print STDERR Dumper \@rr_coeff_env_correlation_altered_env_6;
        my ($res_se_string) = $log_output =~ /SE for R(.*?)\* FINISHED \(AIREMLF90\)/gs;
        print STDERR Dumper $res_se_string;
        # $rr_residual_variance_altered_env_6 = ($res_se_string**2)*$number_plots;
        $rr_residual_variance_altered_env_6 = $res_se_string;
        print STDERR Dumper $rr_residual_variance_altered_env_6;

        @param_file_rows_6 = (
            '(CO)VARIANCES'
        );
        my $cov_gen_counter = 0;
        foreach my $i (0..$legendre_order_number) {
            my @cov_row;
            foreach my $j (0..$legendre_order_number) {
                push @cov_row, $rr_coeff_genetic_covariance_altered_env_6[$cov_gen_counter];
                $cov_gen_counter++;
            }
            my $s = join ' ', @cov_row;
            push @param_file_rows_6, $s;
        }

        @param_file_rows_7 = (
            '(CO)VARIANCES'
        );
        my $cov_env_counter = 0;
        foreach my $i (0..$legendre_order_number) {
            my @cov_row;
            foreach my $j (0..$legendre_order_number) {
                push @cov_row, $rr_coeff_env_covariance_altered_env_6[$cov_env_counter];
                $cov_env_counter++;
            }
            my $s = join ' ', @cov_row;
            push @param_file_rows_7, $s;
        }

        open(my $Fp_cv1_2, ">", $parameter_tempfile_cv1_2) || die "Can't open file ".$parameter_tempfile_cv1_2;
            foreach ((@param_file_rows_data_cv1, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv1_2 "$_\n";
            }
        close($Fp_cv1_2);

        open(my $Fp_cv2_2, ">", $parameter_tempfile_cv2_2) || die "Can't open file ".$parameter_tempfile_cv2_2;
            foreach ((@param_file_rows_data_cv2, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv2_2 "$_\n";
            }
        close($Fp_cv2_2);

        open(my $Fp_cv3_2, ">", $parameter_tempfile_cv3_2) || die "Can't open file ".$parameter_tempfile_cv3_2;
            foreach ((@param_file_rows_data_cv3, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv3_2 "$_\n";
            }
        close($Fp_cv3_2);

        open(my $Fp_cv4_2, ">", $parameter_tempfile_cv4_2) || die "Can't open file ".$parameter_tempfile_cv4_2;
            foreach ((@param_file_rows_data_cv4, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv4_2 "$_\n";
            }
        close($Fp_cv4_2);

        open(my $Fp_cv5_2, ">", $parameter_tempfile_cv5_2) || die "Can't open file ".$parameter_tempfile_cv5_2;
            foreach ((@param_file_rows_data_cv5, @param_file_rows_1, @param_file_rows_6, @param_file_rows_3, @param_file_rows_7, @param_file_rows_5)) {
                print $Fp_cv5_2 "$_\n";
            }
        close($Fp_cv5_2);

        my $q_time = "SELECT t.cvterm_id FROM cvterm as t JOIN cv ON(t.cv_id=cv.cv_id) WHERE t.name=? and cv.name=?;";
        my $h_time = $schema->storage->dbh()->prepare($q_time);

        $yhat_residual_tempfile = $tmp_stats_dir."/yhat_residual";
        open(my $fh_yhat_res, '<', $yhat_residual_tempfile) or die "Could not open file '$yhat_residual_tempfile' $!";
            print STDERR "Opened $yhat_residual_tempfile\n";

            my $pred_res_counter = 0;
            my $trait_counter = 0;
            while (my $row = <$fh_yhat_res>) {
                # print STDERR $row;
                my @vals = split ' ', $row;
                my $pred = $vals[0];
                my $residual = $vals[1];
                $model_sum_square_residual_altered_env_6 = $model_sum_square_residual_altered_env_6 + $residual*$residual;

                my $plot_name = $plot_id_count_map_reverse{$pred_res_counter};
                my $time = $time_count_map_reverse{$pred_res_counter};

                if (defined $residual && $residual ne '') {
                    $result_residual_data_altered_env_6->{$plot_name}->{$seen_times{$time}} = [$residual, $timestamp, $user_name, '', ''];
                    $residual_sum_altered_env_6 += abs($residual);
                    $residual_sum_square_altered_env_6 = $residual_sum_square_altered_env_6 + $residual*$residual;
                }
                if (defined $pred && $pred ne '') {
                    $result_fitted_data_altered_env_6->{$plot_name}->{$seen_times{$time}} = [$pred, $timestamp, $user_name, '', ''];
                }

                $pred_res_counter++;
            }
        close($fh_yhat_res);

        $blupf90_solutions_tempfile = $tmp_stats_dir."/solutions";
        open(my $fh_sol, '<', $blupf90_solutions_tempfile) or die "Could not open file '$blupf90_solutions_tempfile' $!";
            print STDERR "Opened $blupf90_solutions_tempfile\n";

            my $head = <$fh_sol>;
            print STDERR $head;

            my $solution_file_counter = 0;
            my $grm_sol_counter = 0;
            my $grm_sol_trait_counter = 0;
            my $pe_sol_counter = 0;
            my $pe_sol_trait_counter = 0;
            while (defined(my $row = <$fh_sol>)) {
                # print STDERR $row;
                my @vals = split ' ', $row;
                my $level = $vals[2];
                my $value = $vals[3];
                if ($solution_file_counter < $effect_1_levels) {
                    $fixed_effects_altered_env_6{$solution_file_counter}->{$level} = $value;
                }
                elsif ($solution_file_counter < $effect_1_levels + $effect_grm_levels*($legendre_order_number+1)) {
                    my $accession_name = $accession_id_factor_map_reverse{$level};
                    if ($grm_sol_counter < $effect_grm_levels-1) {
                        $grm_sol_counter++;
                    }
                    else {
                        $grm_sol_counter = 0;
                        $grm_sol_trait_counter++;
                    }
                    if (defined $value && $value ne '') {
                        push @{$rr_genetic_coefficients_altered_env_6{$accession_name}}, $value;
                    }
                }
                else {
                    my $plot_name = $plot_id_factor_map_reverse{$level};
                    if ($pe_sol_counter < $effect_pe_levels-1) {
                        $pe_sol_counter++;
                    }
                    else {
                        $pe_sol_counter = 0;
                        $pe_sol_trait_counter++;
                    }
                    if (defined $value && $value ne '') {
                        push @{$rr_temporal_coefficients_altered_env_6{$plot_name}}, $value;
                    }
                }
                $solution_file_counter++;
            }
        close($fh_sol);

        # print STDERR Dumper \%rr_genetic_coefficients_altered_env_6;
        # print STDERR Dumper \%rr_temporal_coefficients_altered_env_6;

        open(my $Fgc, ">", $coeff_genetic_tempfile) || die "Can't open file ".$coeff_genetic_tempfile;

        while ( my ($accession_name, $coeffs) = each %rr_genetic_coefficients_altered_env_6) {
            my @line = ($accession_name, @$coeffs);
            my $line_string = join ',', @line;
            print $Fgc "$line_string\n";

            foreach my $t_i (0..20) {
                my $time = $t_i*5/100;
                my $time_rescaled = sprintf("%.2f", $time*($time_max - $time_min) + $time_min);

                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                my $time_term_string = '';
                if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {
                    $time_term_string = "GDD $time_rescaled";
                }
                elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
                    $time_term_string = "day $time_rescaled"
                }
                $h_time->execute($time_term_string, 'cxgn_time_ontology');
                my ($time_cvterm_id) = $h_time->fetchrow_array();

                if (!$time_cvterm_id) {
                    my $new_time_term = $schema->resultset("Cv::Cvterm")->create_with({
                       name => $time_term_string,
                       cv => 'cxgn_time_ontology'
                    });
                    $time_cvterm_id = $new_time_term->cvterm_id();
                }
                my $time_term_string_blup = SGN::Model::Cvterm::get_trait_from_cvterm_id($schema, $time_cvterm_id, 'extended');

                $result_blup_data_altered_env_6->{$accession_name}->{$time_term_string_blup} = [$value, $timestamp, $user_name, '', ''];
            }
        }
        close($Fgc);

        while ( my ($accession_name, $coeffs) = each %rr_genetic_coefficients_altered_env_6) {
            foreach my $time_term (@sorted_trait_names) {
                my $time = ($time_term - $time_min)/($time_max - $time_min);
                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                $result_blup_data_delta_altered_env_6->{$accession_name}->{$time_term} = [$value, $timestamp, $user_name, '', ''];

                if ($value < $genetic_effect_min_altered_env_6) {
                    $genetic_effect_min_altered_env_6 = $value;
                }
                elsif ($value >= $genetic_effect_max_altered_env_6) {
                    $genetic_effect_max_altered_env_6 = $value;
                }

                $genetic_effect_sum_altered_env_6 += abs($value);
                $genetic_effect_sum_square_altered_env_6 = $genetic_effect_sum_square_altered_env_6 + $value*$value;
            }
        }

        open(my $Fpc, ">", $coeff_pe_tempfile) || die "Can't open file ".$coeff_pe_tempfile;

        while ( my ($plot_name, $coeffs) = each %rr_temporal_coefficients_altered_env_6) {
            my @line = ($plot_name, @$coeffs);
            my $line_string = join ',', @line;
            print $Fpc "$line_string\n";

            foreach my $t_i (0..20) {
                my $time = $t_i*5/100;
                my $time_rescaled = sprintf("%.2f", $time*($time_max - $time_min) + $time_min);

                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                my $time_term_string = '';
                if ($statistics_select eq 'blupf90_grm_random_regression_gdd_blups' || $statistics_select eq 'airemlf90_grm_random_regression_gdd_blups') {
                    $time_term_string = "GDD $time_rescaled";
                }
                elsif ($statistics_select eq 'blupf90_grm_random_regression_dap_blups' || $statistics_select eq 'airemlf90_grm_random_regression_dap_blups') {
                    $time_term_string = "day $time_rescaled"
                }
                $h_time->execute($time_term_string, 'cxgn_time_ontology');
                my ($time_cvterm_id) = $h_time->fetchrow_array();

                if (!$time_cvterm_id) {
                    my $new_time_term = $schema->resultset("Cv::Cvterm")->create_with({
                       name => $time_term_string,
                       cv => 'cxgn_time_ontology'
                    });
                    $time_cvterm_id = $new_time_term->cvterm_id();
                }
                my $time_term_string_pe = SGN::Model::Cvterm::get_trait_from_cvterm_id($schema, $time_cvterm_id, 'extended');

                $result_blup_pe_data_altered_env_6->{$plot_name}->{$time_term_string_pe} = [$value, $timestamp, $user_name, '', ''];
            }
        }
        close($Fpc);

        while ( my ($plot_name, $coeffs) = each %rr_temporal_coefficients_altered_env_6) {
            foreach my $time_term (@sorted_trait_names) {
                my $time = ($time_term - $time_min)/($time_max - $time_min);
                my $value = 0;
                my $coeff_counter = 0;
                foreach my $b (@$coeffs) {
                    my $eval_string = $legendre_coeff_exec[$coeff_counter];
                    # print STDERR Dumper [$eval_string, $b, $time];
                    $value += eval $eval_string;
                    $coeff_counter++;
                }

                $result_blup_pe_data_delta_altered_env_6->{$plot_name}->{$time_term} = [$value, $timestamp, $user_name, '', ''];

                if ($value < $env_effect_min_altered_env_6) {
                    $env_effect_min_altered_env_6 = $value;
                }
                elsif ($value >= $env_effect_max_altered_env_6) {
                    $env_effect_max_altered_env_6 = $value;
                }

                $env_effect_sum_altered_env_6 += abs($value);
                $env_effect_sum_square_altered_env_6 = $env_effect_sum_square_altered_env_6 + $value*$value;
            }
        }

        if ($perform_cv) {
            my $cmd_f90_cv1 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv1_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv1;
            my $status_cv1 = system($cmd_f90_cv1);

            open(my $fh_log_cv1, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv1>) {
                    print STDERR $row;
                }
            close($fh_log_cv1);

            my $yhat_residual_tempfile_cv1 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv1, '<', $yhat_residual_tempfile_cv1) or die "Could not open file '$yhat_residual_tempfile_cv1' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv1\n";

                while (my $row = <$fh_yhat_res_cv1>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv1_altered_env_6 = $model_sum_square_cv1_altered_env_6 + $residual*$residual;
                }
            close($fh_yhat_res_cv1);

            my $cmd_f90_cv2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv2_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv2;
            my $status_cv2 = system($cmd_f90_cv2);

            open(my $fh_log_cv2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv2>) {
                    print STDERR $row;
                }
            close($fh_log_cv2);

            my $yhat_residual_tempfile_cv2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv2, '<', $yhat_residual_tempfile_cv2) or die "Could not open file '$yhat_residual_tempfile_cv2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv2\n";

                while (my $row = <$fh_yhat_res_cv2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv2_altered_env_6 = $model_sum_square_cv2_altered_env_6 + $residual*$residual;
                }
            close($fh_yhat_res_cv2);

            my $cmd_f90_cv3 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv3_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv3;
            my $status_cv3 = system($cmd_f90_cv3);

            open(my $fh_log_cv3, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv3>) {
                    print STDERR $row;
                }
            close($fh_log_cv3);

            my $yhat_residual_tempfile_cv3 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv3, '<', $yhat_residual_tempfile_cv3) or die "Could not open file '$yhat_residual_tempfile_cv3' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv3\n";

                while (my $row = <$fh_yhat_res_cv3>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv3_altered_env_6 = $model_sum_square_cv3_altered_env_6 + $residual*$residual;
                }
            close($fh_yhat_res_cv3);

            my $cmd_f90_cv4 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv4_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv4;
            my $status_cv4 = system($cmd_f90_cv4);

            open(my $fh_log_cv4, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv4>) {
                    print STDERR $row;
                }
            close($fh_log_cv4);

            my $yhat_residual_tempfile_cv4 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv4, '<', $yhat_residual_tempfile_cv4) or die "Could not open file '$yhat_residual_tempfile_cv4' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv4\n";

                while (my $row = <$fh_yhat_res_cv4>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv4_altered_env_6 = $model_sum_square_cv4_altered_env_6 + $residual*$residual;
                }
            close($fh_yhat_res_cv4);

            my $cmd_f90_cv5 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv5_basename.' | '.$command_name.' > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv5;
            my $status_cv5 = system($cmd_f90_cv5);

            open(my $fh_log_cv5, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv5>) {
                    print STDERR $row;
                }
            close($fh_log_cv5);

            my $yhat_residual_tempfile_cv5 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv5, '<', $yhat_residual_tempfile_cv5) or die "Could not open file '$yhat_residual_tempfile_cv5' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv5\n";

                while (my $row = <$fh_yhat_res_cv5>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv5_altered_env_6 = $model_sum_square_cv5_altered_env_6 + $residual*$residual;
                }
            close($fh_yhat_res_cv5);

            my $cmd_f90_cv1_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv1_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv1_2;
            my $status_cv1_2 = system($cmd_f90_cv1_2);

            open(my $fh_log_cv1_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv1_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv1_2);

            my $yhat_residual_tempfile_cv1_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv1_2, '<', $yhat_residual_tempfile_cv1_2) or die "Could not open file '$yhat_residual_tempfile_cv1_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv1_2\n";

                while (my $row = <$fh_yhat_res_cv1_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv1_2_altered_env_6 = $model_sum_square_cv1_2_altered_env_6 + $residual*$residual;
                }
            close($fh_yhat_res_cv1_2);

            my $cmd_f90_cv2_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv2_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv2_2;
            my $status_cv2_2 = system($cmd_f90_cv2_2);

            open(my $fh_log_cv2_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv2_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv2_2);

            my $yhat_residual_tempfile_cv2_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv2_2, '<', $yhat_residual_tempfile_cv2_2) or die "Could not open file '$yhat_residual_tempfile_cv2_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv2_2\n";

                while (my $row = <$fh_yhat_res_cv2_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv2_2_altered_env_6 = $model_sum_square_cv2_2_altered_env_6 + $residual*$residual;
                }
            close($fh_yhat_res_cv2_2);

            my $cmd_f90_cv3_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv3_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv3_2;
            my $status_cv3_2 = system($cmd_f90_cv3_2);

            open(my $fh_log_cv3_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv3_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv3_2);

            my $yhat_residual_tempfile_cv3_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv3_2, '<', $yhat_residual_tempfile_cv3_2) or die "Could not open file '$yhat_residual_tempfile_cv3_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv3_2\n";

                while (my $row = <$fh_yhat_res_cv3_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv3_2_altered_env_6 = $model_sum_square_cv3_2_altered_env_6 + $residual*$residual;
                }
            close($fh_yhat_res_cv3_2);

            my $cmd_f90_cv4_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv4_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv4_2;
            my $status_cv4_2 = system($cmd_f90_cv4_2);

            open(my $fh_log_cv4_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv4_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv4_2);

            my $yhat_residual_tempfile_cv4_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv4_2, '<', $yhat_residual_tempfile_cv4_2) or die "Could not open file '$yhat_residual_tempfile_cv4_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv4_2\n";

                while (my $row = <$fh_yhat_res_cv4_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv4_2_altered_env_6 = $model_sum_square_cv4_2_altered_env_6 + $residual*$residual;
                }
            close($fh_yhat_res_cv4_2);

            my $cmd_f90_cv5_2 = 'cd '.$tmp_stats_dir.'; echo '.$parameter_tempfile_cv5_2_basename.' | blupf90 > '.$stats_out_tempfile;
            print STDERR Dumper $cmd_f90_cv5_2;
            my $status_cv5_2 = system($cmd_f90_cv5_2);

            open(my $fh_log_cv5_2, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                while (my $row = <$fh_log_cv5_2>) {
                    print STDERR $row;
                }
            close($fh_log_cv5_2);

            my $yhat_residual_tempfile_cv5_2 = $tmp_stats_dir."/yhat_residual";
            open(my $fh_yhat_res_cv5_2, '<', $yhat_residual_tempfile_cv5_2) or die "Could not open file '$yhat_residual_tempfile_cv5_2' $!";
                print STDERR "Opened $yhat_residual_tempfile_cv5_2\n";

                while (my $row = <$fh_yhat_res_cv5_2>) {
                    # print STDERR $row;
                    my @vals = split ' ', $row;
                    my $pred = $vals[0];
                    my $residual = $vals[1];
                    $model_sum_square_cv5_2_altered_env_6 = $model_sum_square_cv5_2_altered_env_6 + $residual*$residual;
                }
            close($fh_yhat_res_cv5_2);
        }
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_spatial_genetic_blups') {
        foreach my $t (@sorted_trait_names) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;
                my @row_col_ordered_plots_names;

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        push @row_col_ordered_plots_names, $stock_name;
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_6->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_6 += abs($residual);
                            $residual_sum_square_altered_env_6 = $residual_sum_square_altered_env_6 + $residual*$residual;}
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_6->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_6 = $model_sum_square_residual_altered_env_6 + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;

                    my $solution_file_counter = 0;
                    while (defined(my $row = <$fh>)) {
                        # print STDERR $row;
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $level = $columns[0];
                        my $value = $columns[1];
                        my $std = $columns[2];
                        my $z_ratio = $columns[3];
                        if (defined $value && $value ne '') {
                            if ($solution_file_counter < $row_number_span) {
                                # print STDERR "$level $value \n";
                            }
                            elsif ($solution_file_counter < $row_number_span + $number_accessions) {
                                my $stock_name = $accession_id_factor_map_reverse{$solution_file_counter - $row_number_span + 1};
                                $result_blup_data_altered_env_6->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $genetic_effect_min_altered_env_6) {
                                    $genetic_effect_min_altered_env_6 = $value;
                                }
                                elsif ($value >= $genetic_effect_max_altered_env_6) {
                                    $genetic_effect_max_altered_env_6 = $value;
                                }

                                $genetic_effect_sum_altered_env_6 += abs($value);
                                $genetic_effect_sum_square_altered_env_6 = $genetic_effect_sum_square_altered_env_6 + $value*$value;

                                $current_gen_row_count++;
                            }
                            elsif ($solution_file_counter < $col_number_span + $row_number_span + $number_accessions) {
                                # print STDERR "$level $value \n";
                            }
                            else {
                                my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                                $result_blup_spatial_data_altered_env_6->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $env_effect_min_altered_env_6) {
                                    $env_effect_min_altered_env_6 = $value;
                                }
                                elsif ($value >= $env_effect_max_altered_env_6) {
                                    $env_effect_max_altered_env_6 = $value;
                                }

                                $env_effect_sum_altered_env_6 += abs($value);
                                $env_effect_sum_square_altered_env_6 = $env_effect_sum_square_altered_env_6 + $value*$value;

                                $current_env_row_count++;
                            }
                        }
                        $solution_file_counter++;
                    }
                close($fh);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_6 = $model_sum_square_cv1_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_6 = $model_sum_square_cv2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_6 = $model_sum_square_cv3_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_6 = $model_sum_square_cv4_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_6 = $model_sum_square_cv5_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_6 = $model_sum_square_cv1_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_6 = $model_sum_square_cv2_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_6 = $model_sum_square_cv3_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_6 = $model_sum_square_cv4_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_6 = $model_sum_square_cv5_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        $columns[0] = "trait:".$columns[0]."!trait_t".$t.":t".$t;
                        push @varcomp_altered_env_6, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'asreml_grm_univariate_pure_spatial_genetic_blups') {
        $analysis_model_language = "R";

        $statistical_ontology_term = "Univariate linear mixed model 2D spline genetic BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000038"; #In the JS this is set to either Univariate linear mixed model 2D spline spatial BLUPs using genetic relationship matrix and row and column spatial effects computed using Sommer R|SGNSTAT:0000039

        $analysis_model_training_data_file_type = "nicksmixedmodelsanalytics_v1.01_asreml_grm_univariate_spatial_genetic_blups_phenotype_file";

        my @grm_old;
        open(my $fh_grm_old, '<', $grm_file) or die "Could not open file '$grm_file' $!";
            print STDERR "Opened $grm_file\n";

            while (my $row = <$fh_grm_old>) {
                my @columns;
                if ($csv->parse($row)) {
                    @columns = $csv->fields();
                }
                push @grm_old, \@columns;
            }
        close($fh_grm_old);

        my %grm_hash_ordered;
        foreach (@grm_old) {
            my $l1 = $accession_id_factor_map{$_->[0]};
            my $l2 = $accession_id_factor_map{$_->[1]};
            my $val = sprintf("%.8f", $_->[2]);
            if ($l1 > $l2) {
                $grm_hash_ordered{$l1}->{$l2} = $val;
            }
            else {
                $grm_hash_ordered{$l2}->{$l1} = $val;
            }
        }

        open(my $fh_grm_new, '>', $grm_rename_tempfile) or die "Could not open file '$grm_rename_tempfile' $!";
            print STDERR "Opened $grm_rename_tempfile\n";

            foreach my $i (sort {$a <=> $b} keys %grm_hash_ordered) {
                my $v = $grm_hash_ordered{$i};
                foreach my $j (sort {$a <=> $b} keys %$v) {
                    my $val = $v->{$j};
                    print $fh_grm_new "$i $j $val\n";
                }
            }
        close($fh_grm_new);

        my @encoded_traits = values %trait_name_encoder;
        $number_traits = scalar(@sorted_trait_names);
        $number_accessions = scalar(@unique_accession_names);
        foreach my $t (@sorted_trait_names) {
            $prepare_file_cv_cmd = $cmd_statistics_uni{$t}->{prepare_file_cv_cmd};
            $statistics_cmd = $cmd_statistics_uni{$t}->{statistics_cmd};
            $statistics_cmd_reading = $cmd_statistics_uni{$t}->{statistics_cmd_reading};
            $statistics_cmd_cv_1 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_1};
            $statistics_cmd_cv_2 = $cmd_statistics_uni{$t}->{statistics_cmd_cv_2};

            # print STDERR Dumper $prepare_file_cv_cmd;
            # print STDERR Dumper $statistics_cmd;
            eval {
                my $status_prepare_file_cv = system($prepare_file_cv_cmd);
                my $status = system($statistics_cmd);
                if ($perform_cv) {
                    my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                    my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
                }
            };

            my $run_stats_fault = 0;
            if ($@) {
                print STDERR "R ERROR\n";
                print STDERR Dumper $@;
                $run_stats_fault = 1;
            }
            else {
                my $current_gen_row_count = 0;
                my $current_env_row_count = 0;
                my @row_col_ordered_plots_names;

                open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                    print STDERR "Opened $stats_out_tempfile_residual\n";
                    my $header_residual = <$fh_residual>;
                    my @header_cols_residual;
                    if ($csv->parse($header_residual)) {
                        @header_cols_residual = $csv->fields();
                    }
                    while (my $row = <$fh_residual>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $stock_id = $columns[0];
                        my $residual = $columns[1];
                        my $fitted = $columns[2];
                        my $stock_name = $plot_id_map{$stock_id};
                        push @row_col_ordered_plots_names, $stock_name;
                        if (defined $residual && $residual ne '') {
                            $result_residual_data_altered_env_6->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                            $residual_sum_altered_env_6 += abs($residual);
                            $residual_sum_square_altered_env_6 = $residual_sum_square_altered_env_6 + $residual*$residual;}
                        if (defined $fitted && $fitted ne '') {
                            $result_fitted_data_altered_env_6->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                        }
                        $model_sum_square_residual_altered_env_6 = $model_sum_square_residual_altered_env_6 + $residual*$residual;
                    }
                close($fh_residual);

                open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                    print STDERR "Opened $stats_out_tempfile\n";
                    my $header = <$fh>;

                    my $solution_file_counter = 0;
                    while (defined(my $row = <$fh>)) {
                        # print STDERR $row;
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        my $level = $columns[0];
                        my $value = $columns[1];
                        my $std = $columns[2];
                        my $z_ratio = $columns[3];
                        if (defined $value && $value ne '') {
                            if ($solution_file_counter < $number_accessions) {
                                my $stock_name = $accession_id_factor_map_reverse{$solution_file_counter + 1};
                                $result_blup_data_altered_env_6->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $genetic_effect_min_altered_env_6) {
                                    $genetic_effect_min_altered_env_6 = $value;
                                }
                                elsif ($value >= $genetic_effect_max_altered_env_6) {
                                    $genetic_effect_max_altered_env_6 = $value;
                                }

                                $genetic_effect_sum_altered_env_6 += abs($value);
                                $genetic_effect_sum_square_altered_env_6 = $genetic_effect_sum_square_altered_env_6 + $value*$value;

                                $current_gen_row_count++;
                            }
                            else {
                                my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                                $result_blup_spatial_data_altered_env_6->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                                if ($value < $env_effect_min_altered_env_6) {
                                    $env_effect_min_altered_env_6 = $value;
                                }
                                elsif ($value >= $env_effect_max_altered_env_6) {
                                    $env_effect_max_altered_env_6 = $value;
                                }

                                $env_effect_sum_altered_env_6 += abs($value);
                                $env_effect_sum_square_altered_env_6 = $env_effect_sum_square_altered_env_6 + $value*$value;

                                $current_env_row_count++;
                            }
                        }
                        $solution_file_counter++;
                    }
                close($fh);

                open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                    my $header_cv1 = <$fh_cv1>;
                    my @header_cols_cv1;
                    if ($csv->parse($header_cv1)) {
                        @header_cols_cv1 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_altered_env_6 = $model_sum_square_cv1_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1);

                open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                    my $header_cv2 = <$fh_cv2>;
                    my @header_cols_cv2;
                    if ($csv->parse($header_cv2)) {
                        @header_cols_cv2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_altered_env_6 = $model_sum_square_cv2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2);

                open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                    my $header_cv3 = <$fh_cv3>;
                    my @header_cols_cv3;
                    if ($csv->parse($header_cv3)) {
                        @header_cols_cv3 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_altered_env_6 = $model_sum_square_cv3_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3);

                open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                    my $header_cv4 = <$fh_cv4>;
                    my @header_cols_cv4;
                    if ($csv->parse($header_cv4)) {
                        @header_cols_cv4 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_altered_env_6 = $model_sum_square_cv4_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4);

                open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                    my $header_cv5 = <$fh_cv5>;
                    my @header_cols_cv5;
                    if ($csv->parse($header_cv5)) {
                        @header_cols_cv5 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_altered_env_6 = $model_sum_square_cv5_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5);

                open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                    my $header_cv1_2 = <$fh_cv1_2>;
                    my @header_cols_cv1_2;
                    if ($csv->parse($header_cv1_2)) {
                        @header_cols_cv1_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv1_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv1_2_altered_env_6 = $model_sum_square_cv1_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv1_2);

                open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                    my $header_cv2_2 = <$fh_cv2_2>;
                    my @header_cols_cv2_2;
                    if ($csv->parse($header_cv2_2)) {
                        @header_cols_cv2_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv2_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv2_2_altered_env_6 = $model_sum_square_cv2_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv2_2);

                open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                    my $header_cv3_2 = <$fh_cv3_2>;
                    my @header_cols_cv3_2;
                    if ($csv->parse($header_cv3_2)) {
                        @header_cols_cv3_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv3_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv3_2_altered_env_6 = $model_sum_square_cv3_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv3_2);

                open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                    my $header_cv4_2 = <$fh_cv4_2>;
                    my @header_cols_cv4_2;
                    if ($csv->parse($header_cv4_2)) {
                        @header_cols_cv4_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv4_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv4_2_altered_env_6 = $model_sum_square_cv4_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv4_2);

                open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                    print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                    my $header_cv5_2 = <$fh_cv5_2>;
                    my @header_cols_cv5_2;
                    if ($csv->parse($header_cv5_2)) {
                        @header_cols_cv5_2 = $csv->fields();
                    }
                    while (my $row = <$fh_cv5_2>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }

                        my $trait_name = $trait_name_encoder_rev{$t};
                        my $stock_id = $columns[0];
                        my $true_value = $columns[1];
                        my $masked_value = $columns[2];
                        my $residual = $columns[3];
                        my $fitted = $columns[4];
                        my $stock_name = $plot_id_map{$stock_id};
                        $model_sum_square_cv5_2_altered_env_6 = $model_sum_square_cv5_2_altered_env_6 + ($true_value-$fitted)**2;
                    }
                close($fh_cv5_2);

                open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                    print STDERR "Opened $stats_out_tempfile_varcomp\n";
                    my $header_varcomp = <$fh_varcomp>;
                    my @header_cols_varcomp;
                    if ($csv->parse($header_varcomp)) {
                        @header_cols_varcomp = $csv->fields();
                    }
                    while (my $row = <$fh_varcomp>) {
                        my @columns;
                        if ($csv->parse($row)) {
                            @columns = $csv->fields();
                        }
                        $columns[0] = "trait:".$columns[0]."!trait_t".$t.":t".$t;
                        push @varcomp_altered_env_6, \@columns;
                    }
                close($fh_varcomp);

                if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                    $run_stats_fault = 1;
                }

                if ($run_stats_fault == 1) {
                    print STDERR "ERROR IN R CMD\n";
                    return {error=>'Error in R! Try a larger tolerance'};
                }
            }
        }
    }
    elsif ($statistics_select eq 'asreml_grm_multivariate_spatial_genetic_blups') {
        # print STDERR Dumper $prepare_file_cv_cmd;
        # print STDERR Dumper $statistics_cmd;
        eval {
            my $status_prepare_file_cv2 = system($prepare_file_cv2_cmd);
            my $status_prepare_file_cv = system($prepare_file_cv_cmd);
            my $status = system($statistics_cmd);
            if ($perform_cv) {
                my $status_cv1 = system($statistics_cmd_reading.$statistics_cmd_cv_1);
                my $status_cv2 = system($statistics_cmd_reading.$statistics_cmd_cv_2);
            }
        };

        my $run_stats_fault = 0;
        if ($@) {
            print STDERR "R ERROR\n";
            print STDERR Dumper $@;
            $run_stats_fault = 1;
        }
        else {
            my $current_gen_row_count = 0;
            my $current_env_row_count = 0;
            my @row_col_ordered_plots_names;

            open(my $fh_residual, '<', $stats_out_tempfile_residual) or die "Could not open file '$stats_out_tempfile_residual' $!";
                print STDERR "Opened $stats_out_tempfile_residual\n";
                my $header_residual = <$fh_residual>;
                my @header_cols_residual;
                if ($csv->parse($header_residual)) {
                    @header_cols_residual = $csv->fields();
                }
                my $residual_file_counter_index = 0;
                my $residual_file_counter = 1;
                while (my $row = <$fh_residual>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    my $residual = $columns[1];
                    my $fitted = $columns[2];
                    my $stock_name = $plot_id_map{$stock_id};
                    push @row_col_ordered_plots_names, $stock_name;
                    my $t = $sorted_trait_names[$residual_file_counter_index];
                    if ($residual_file_counter == scalar(@unique_plot_names)) {
                        $residual_file_counter = 0;
                        $residual_file_counter_index++;
                    }
                    if (defined $residual && $residual ne '') {
                        $result_residual_data_altered_env_6->{$stock_name}->{$t} = [$residual, $timestamp, $user_name, '', ''];
                        $residual_sum_altered_env_6 += abs($residual);
                        $residual_sum_square_altered_env_6 = $residual_sum_square_altered_env_6 + $residual*$residual;
                    }
                    if (defined $fitted && $fitted ne '') {
                        $result_fitted_data_altered_env_6->{$stock_name}->{$t} = [$fitted, $timestamp, $user_name, '', ''];
                    }
                    $model_sum_square_residual_altered_env_6 = $model_sum_square_residual_altered_env_6 + $residual*$residual;

                    $residual_file_counter++;
                }
            close($fh_residual);

            open(my $fh, '<', $stats_out_tempfile) or die "Could not open file '$stats_out_tempfile' $!";
                print STDERR "Opened $stats_out_tempfile\n";
                my $header = <$fh>;
                my @header_cols;
                if ($csv->parse($header)) {
                    @header_cols = $csv->fields();
                }

                my $solution_file_counter = 0;
                my $solution_file_g_counter = 1;
                my $solution_file_p_counter = 1;
                my $solution_file_counter_g_index = 0;
                my $solution_file_counter_p_index = 0;
                while (defined(my $row = <$fh>)) {
                    # print STDERR $row;
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    my $level = $columns[0];
                    my $value = $columns[1];
                    my $std = $columns[2];
                    my $z_ratio = $columns[3];
                    if (defined $value && $value ne '') {
                        if ($solution_file_counter < $number_accessions*$number_traits) {
                            my $t = $sorted_trait_names[$solution_file_counter_g_index];
                            if ($solution_file_g_counter == $number_accessions) {
                                $solution_file_g_counter = 0;
                                $solution_file_counter_g_index++;
                            }

                            my $stock_name = $accession_id_factor_map_reverse{$solution_file_g_counter+1};
                            $result_blup_data_altered_env_6->{$stock_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $genetic_effect_min_altered_env_6) {
                                $genetic_effect_min_altered_env_6 = $value;
                            }
                            elsif ($value >= $genetic_effect_max_altered_env_6) {
                                $genetic_effect_max_altered_env_6 = $value;
                            }

                            $genetic_effect_sum_altered_env_6 += abs($value);
                            $genetic_effect_sum_square_altered_env_6 = $genetic_effect_sum_square_altered_env_6 + $value*$value;

                            $solution_file_g_counter++;
                            $current_gen_row_count++;
                        }
                        else {
                            my $t = $sorted_trait_names[$solution_file_counter_p_index];
                            if ($solution_file_p_counter == scalar(@unique_plot_names)) {
                                $solution_file_p_counter = 0;
                                $solution_file_counter_p_index++;
                            }

                            my $plot_name = $row_col_ordered_plots_names[$current_env_row_count];
                            $result_blup_spatial_data_altered_env_6->{$plot_name}->{$t} = [$value, $timestamp, $user_name, '', ''];

                            if ($value < $env_effect_min_altered_env_6) {
                                $env_effect_min_altered_env_6 = $value;
                            }
                            elsif ($value >= $env_effect_max_altered_env_6) {
                                $env_effect_max_altered_env_6 = $value;
                            }

                            $env_effect_sum_altered_env_6 += abs($value);
                            $env_effect_sum_square_altered_env_6 = $env_effect_sum_square_altered_env_6 + $value*$value;

                            $solution_file_p_counter++;
                            $current_env_row_count++;
                        }
                    }
                    $solution_file_counter++;
                }
            close($fh);

            open(my $fh_cv1, '<', $stats_out_cv1_predict_tempfile) or die "Could not open file '$stats_out_cv1_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_predict_tempfile\n";
                my $header_cv1 = <$fh_cv1>;
                my @header_cols_cv1;
                if ($csv->parse($header_cv1)) {
                    @header_cols_cv1 = $csv->fields();
                }
                while (my $row = <$fh_cv1>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv1_altered_env_6 = $model_sum_square_cv1_altered_env_6 + ($true_value-$fitted)**2;
                }
            close($fh_cv1);

            open(my $fh_cv2, '<', $stats_out_cv2_predict_tempfile) or die "Could not open file '$stats_out_cv2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_predict_tempfile\n";
                my $header_cv2 = <$fh_cv2>;
                my @header_cols_cv2;
                if ($csv->parse($header_cv2)) {
                    @header_cols_cv2 = $csv->fields();
                }
                while (my $row = <$fh_cv2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv2_altered_env_6 = $model_sum_square_cv2_altered_env_6 + ($true_value-$fitted)**2;
                }
            close($fh_cv2);

            open(my $fh_cv3, '<', $stats_out_cv3_predict_tempfile) or die "Could not open file '$stats_out_cv3_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_predict_tempfile\n";
                my $header_cv3 = <$fh_cv3>;
                my @header_cols_cv3;
                if ($csv->parse($header_cv3)) {
                    @header_cols_cv3 = $csv->fields();
                }
                while (my $row = <$fh_cv3>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv3_altered_env_6 = $model_sum_square_cv3_altered_env_6 + ($true_value-$fitted)**2;
                }
            close($fh_cv3);

            open(my $fh_cv4, '<', $stats_out_cv4_predict_tempfile) or die "Could not open file '$stats_out_cv4_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_predict_tempfile\n";
                my $header_cv4 = <$fh_cv4>;
                my @header_cols_cv4;
                if ($csv->parse($header_cv4)) {
                    @header_cols_cv4 = $csv->fields();
                }
                while (my $row = <$fh_cv4>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv4_altered_env_6 = $model_sum_square_cv4_altered_env_6 + ($true_value-$fitted)**2;
                }
            close($fh_cv4);

            open(my $fh_cv5, '<', $stats_out_cv5_predict_tempfile) or die "Could not open file '$stats_out_cv5_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_predict_tempfile\n";
                my $header_cv5 = <$fh_cv5>;
                my @header_cols_cv5;
                if ($csv->parse($header_cv5)) {
                    @header_cols_cv5 = $csv->fields();
                }
                while (my $row = <$fh_cv5>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv5_altered_env_6 = $model_sum_square_cv5_altered_env_6 + ($true_value-$fitted)**2;
                }
            close($fh_cv5);

            open(my $fh_cv1_2, '<', $stats_out_cv1_2_predict_tempfile) or die "Could not open file '$stats_out_cv1_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv1_2_predict_tempfile\n";
                my $header_cv1_2 = <$fh_cv1_2>;
                my @header_cols_cv1_2;
                if ($csv->parse($header_cv1_2)) {
                    @header_cols_cv1_2 = $csv->fields();
                }
                while (my $row = <$fh_cv1_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv1_2_altered_env_6 = $model_sum_square_cv1_2_altered_env_6 + ($true_value-$fitted)**2;
                }
            close($fh_cv1_2);

            open(my $fh_cv2_2, '<', $stats_out_cv2_2_predict_tempfile) or die "Could not open file '$stats_out_cv2_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv2_2_predict_tempfile\n";
                my $header_cv2_2 = <$fh_cv2_2>;
                my @header_cols_cv2_2;
                if ($csv->parse($header_cv2_2)) {
                    @header_cols_cv2_2 = $csv->fields();
                }
                while (my $row = <$fh_cv2_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv2_2_altered_env_6 = $model_sum_square_cv2_2_altered_env_6 + ($true_value-$fitted)**2;
                }
            close($fh_cv2_2);

            open(my $fh_cv3_2, '<', $stats_out_cv3_2_predict_tempfile) or die "Could not open file '$stats_out_cv3_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv3_2_predict_tempfile\n";
                my $header_cv3_2 = <$fh_cv3_2>;
                my @header_cols_cv3_2;
                if ($csv->parse($header_cv3_2)) {
                    @header_cols_cv3_2 = $csv->fields();
                }
                while (my $row = <$fh_cv3_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv3_2_altered_env_6 = $model_sum_square_cv3_2_altered_env_6 + ($true_value-$fitted)**2;
                }
            close($fh_cv3_2);

            open(my $fh_cv4_2, '<', $stats_out_cv4_2_predict_tempfile) or die "Could not open file '$stats_out_cv4_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv4_2_predict_tempfile\n";
                my $header_cv4_2 = <$fh_cv4_2>;
                my @header_cols_cv4_2;
                if ($csv->parse($header_cv4_2)) {
                    @header_cols_cv4_2 = $csv->fields();
                }
                while (my $row = <$fh_cv4_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv4_2_altered_env_6 = $model_sum_square_cv4_2_altered_env_6 + ($true_value-$fitted)**2;
                }
            close($fh_cv4_2);

            open(my $fh_cv5_2, '<', $stats_out_cv5_2_predict_tempfile) or die "Could not open file '$stats_out_cv5_2_predict_tempfile' $!";
                print STDERR "Opened $stats_out_cv5_2_predict_tempfile\n";
                my $header_cv5_2 = <$fh_cv5_2>;
                my @header_cols_cv5_2;
                if ($csv->parse($header_cv5_2)) {
                    @header_cols_cv5_2 = $csv->fields();
                }
                while (my $row = <$fh_cv5_2>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }

                    my $stock_id = $columns[0];
                    # my $trait_name = $sorted_trait_names[$cv1_trait_counter];
                    my $true_value = $columns[1];
                    my $masked_value = $columns[2];
                    my $residual = $columns[3];
                    my $fitted = $columns[4];
                    my $stock_name = $plot_id_map{$stock_id};
                    $model_sum_square_cv5_2_altered_env_6 = $model_sum_square_cv5_2_altered_env_6 + ($true_value-$fitted)**2;
                }
            close($fh_cv5_2);

            open(my $fh_varcomp, '<', $stats_out_tempfile_varcomp) or die "Could not open file '$stats_out_tempfile_varcomp' $!";
                print STDERR "Opened $stats_out_tempfile_varcomp\n";
                my $header_varcomp = <$fh_varcomp>;
                my @header_cols_varcomp;
                if ($csv->parse($header_varcomp)) {
                    @header_cols_varcomp = $csv->fields();
                }
                while (my $row = <$fh_varcomp>) {
                    my @columns;
                    if ($csv->parse($row)) {
                        @columns = $csv->fields();
                    }
                    push @varcomp_altered_env_6, \@columns;
                }
            close($fh_varcomp);

            if ($current_env_row_count == 0 || $current_gen_row_count == 0) {
                $run_stats_fault = 1;
            }

            if ($run_stats_fault == 1) {
                print STDERR "ERROR IN R CMD\n";
                return {error=>'Error in R! Try a larger tolerance'};
            }
        }
    }
    print STDERR "ALTERED w/SIM_ENV selected_field_trial_htp_env $statistics_select GENETIC EFFECT SUM $genetic_effect_sum_altered_env_6\n";
    print STDERR "ALTERED w/SIM_ENV selected_field_trial_htp_env $statistics_select ENV EFFECT SUM $env_effect_sum_altered_env_6\n";
    print STDERR Dumper [$genetic_effect_min_altered_env_6, $genetic_effect_max_altered_env_6, $env_effect_min_altered_env_6, $env_effect_max_altered_env_6];

    my @model_sum_square_altered_env_6_cv_values = ($model_sum_square_cv1_altered_env_6, $model_sum_square_cv2_altered_env_6, $model_sum_square_cv3_altered_env_6, $model_sum_square_cv4_altered_env_6, $model_sum_square_cv5_altered_env_6);
    my @model_sum_square_altered_env_6_cv_2_values = ($model_sum_square_cv1_2_altered_env_6, $model_sum_square_cv2_2_altered_env_6, $model_sum_square_cv3_2_altered_env_6, $model_sum_square_cv4_2_altered_env_6, $model_sum_square_cv5_2_altered_env_6);
    print STDERR Dumper \@model_sum_square_altered_env_6_cv_values;
    print STDERR Dumper \@model_sum_square_altered_env_6_cv_2_values;
    my $model_sum_square_altered_env_6_cv_stat = Statistics::Descriptive::Full->new();
    $model_sum_square_altered_env_6_cv_stat->add_data(@model_sum_square_altered_env_6_cv_values);
    my $model_sum_square_altered_env_cv_result_6 = {
        values => \@model_sum_square_altered_env_6_cv_values,
        variance => $model_sum_square_altered_env_6_cv_stat->variance(),
        mean => $model_sum_square_altered_env_6_cv_stat->mean()
    };
    my $model_sum_square_altered_env_6_cv_2_stat = Statistics::Descriptive::Full->new();
    $model_sum_square_altered_env_6_cv_2_stat->add_data(@model_sum_square_altered_env_6_cv_2_values);
    my $model_sum_square_altered_env_cv_2_result_6 = {
        values => \@model_sum_square_altered_env_6_cv_2_values,
        variance => $model_sum_square_altered_env_6_cv_2_stat->variance(),
        mean => $model_sum_square_altered_env_6_cv_2_stat->mean()
    };

    return [$statistical_ontology_term, $analysis_model_training_data_file_type, $analysis_model_language, \@sorted_residual_trait_names, \%rr_unique_traits, \%rr_residual_unique_traits, $statistics_cmd, $cmd_f90, $number_traits, \%trait_to_time_map,

    $result_blup_data_original, $result_blup_data_delta_original, $result_blup_spatial_data_original, $result_blup_pe_data_original, $result_blup_pe_data_delta_original, $result_residual_data_original, $result_fitted_data_original, \%fixed_effects_original, \%rr_genetic_coefficients_original, \%rr_temporal_coefficients_original, \@rr_coeff_genetic_covariance_original, \@rr_coeff_env_covariance_original, \@rr_coeff_genetic_correlation_original, \@rr_coeff_env_correlation_original, $rr_residual_variance_original, \@varcomp_original,

    $model_sum_square_residual_original, $genetic_effect_min_original, $genetic_effect_max_original, $env_effect_min_original, $env_effect_max_original, $genetic_effect_sum_square_original, $genetic_effect_sum_original, $env_effect_sum_square_original, $env_effect_sum_original, $residual_sum_square_original, $residual_sum_original, $model_sum_square_original_cv_result, $model_sum_square_original_cv_2_result,

    \%phenotype_data_altered, \@data_matrix_altered, \@data_matrix_phenotypes_altered, $phenotype_min_altered, $phenotype_max_altered,

    $result_blup_data_altered, $result_blup_data_delta_altered, $result_blup_spatial_data_altered, $result_blup_pe_data_altered, $result_blup_pe_data_delta_altered, $result_residual_data_altered, $result_fitted_data_altered, \%fixed_effects_altered, \%rr_genetic_coefficients_altered, \%rr_temporal_coefficients_altered, \@rr_coeff_genetic_covariance_altered, \@rr_coeff_env_covariance_altered, \@rr_coeff_genetic_correlation_altered, \@rr_coeff_env_correlation_altered, $rr_residual_variance_altered, \@varcomp_altered,

    $model_sum_square_residual_altered, $genetic_effect_min_altered, $genetic_effect_max_altered, $env_effect_min_altered, $env_effect_max_altered, $genetic_effect_sum_square_altered, $genetic_effect_sum_altered, $env_effect_sum_square_altered, $env_effect_sum_altered, $residual_sum_square_altered, $residual_sum_altered, $model_sum_square_altered_cv_result, $model_sum_square_altered_cv_2_result,

    \%phenotype_data_altered_env, \@data_matrix_altered_env, \@data_matrix_phenotypes_altered_env, $phenotype_min_altered_env, $phenotype_max_altered_env, $env_sim_min, $env_sim_max, \%sim_data,

    $result_blup_data_altered_env, $result_blup_data_delta_altered_env, $result_blup_spatial_data_altered_env, $result_blup_pe_data_altered_env, $result_blup_pe_data_delta_altered_env, $result_residual_data_altered_env, $result_fitted_data_altered_env, \%fixed_effects_altered_env, \%rr_genetic_coefficients_altered_env, \%rr_temporal_coefficients_altered_env, \@rr_coeff_genetic_covariance_altered_env, \@rr_coeff_env_covariance_altered_env, \@rr_coeff_genetic_correlation_altered_env, \@rr_coeff_env_correlation_altered_env, $rr_residual_variance_altered_env, \@varcomp_altered_env,

    $model_sum_square_residual_altered_env, $genetic_effect_min_altered_env, $genetic_effect_max_altered_env, $env_effect_min_altered_env, $env_effect_max_altered_env, $genetic_effect_sum_square_altered_env, $genetic_effect_sum_altered_env, $env_effect_sum_square_altered_env, $env_effect_sum_altered_env, $residual_sum_square_altered_env, $residual_sum_altered_env, $model_sum_square_altered_env_cv_result, $model_sum_square_altered_env_cv_2_result,

    \%phenotype_data_altered_env_2, \@data_matrix_altered_env_2, \@data_matrix_phenotypes_altered_env_2, $phenotype_min_altered_env_2, $phenotype_max_altered_env_2, $env_sim_min_2, $env_sim_max_2, \%sim_data_2,

    $result_blup_data_altered_env_2, $result_blup_data_delta_altered_env_2, $result_blup_spatial_data_altered_env_2, $result_blup_pe_data_altered_env_2, $result_blup_pe_data_delta_altered_env_2, $result_residual_data_altered_env_2, $result_fitted_data_altered_env_2, \%fixed_effects_altered_env_2, \%rr_genetic_coefficients_altered_env_2, \%rr_temporal_coefficients_altered_env_2, \@rr_coeff_genetic_covariance_altered_env_2, \@rr_coeff_env_covariance_altered_env_2, \@rr_coeff_genetic_correlation_altered_env_2, \@rr_coeff_env_correlation_altered_env_2, $rr_residual_variance_altered_env_2, \@varcomp_altered_env_2,

    $model_sum_square_residual_altered_env_2, $genetic_effect_min_altered_env_2, $genetic_effect_max_altered_env_2, $env_effect_min_altered_env_2, $env_effect_max_altered_env_2, $genetic_effect_sum_square_altered_env_2, $genetic_effect_sum_altered_env_2, $env_effect_sum_square_altered_env_2, $env_effect_sum_altered_env_2, $residual_sum_square_altered_env_2, $residual_sum_altered_env_2, $model_sum_square_altered_env_cv_result_2, $model_sum_square_altered_env_cv_2_result_2,

    \%phenotype_data_altered_env_3, \@data_matrix_altered_env_3, \@data_matrix_phenotypes_altered_env_3, $phenotype_min_altered_env_3, $phenotype_max_altered_env_3, $env_sim_min_3, $env_sim_max_3, \%sim_data_3,

    $result_blup_data_altered_env_3, $result_blup_data_delta_altered_env_3, $result_blup_spatial_data_altered_env_3, $result_blup_pe_data_altered_env_3, $result_blup_pe_data_delta_altered_env_3, $result_residual_data_altered_env_3, $result_fitted_data_altered_env_3, \%fixed_effects_altered_env_3, \%rr_genetic_coefficients_altered_env_3, \%rr_temporal_coefficients_altered_env_3, \@rr_coeff_genetic_covariance_altered_env_3, \@rr_coeff_env_covariance_altered_env_3, \@rr_coeff_genetic_correlation_altered_env_3, \@rr_coeff_env_correlation_altered_env_3, $rr_residual_variance_altered_env_3, \@varcomp_altered_env_3,

    $model_sum_square_residual_altered_env_3, $genetic_effect_min_altered_env_3, $genetic_effect_max_altered_env_3, $env_effect_min_altered_env_3, $env_effect_max_altered_env_3, $genetic_effect_sum_square_altered_env_3, $genetic_effect_sum_altered_env_3, $env_effect_sum_square_altered_env_3, $env_effect_sum_altered_env_3, $residual_sum_square_altered_env_3, $residual_sum_altered_env_3, $model_sum_square_altered_env_cv_result_3, $model_sum_square_altered_env_cv_2_result_3,

    \%phenotype_data_altered_env_4, \@data_matrix_altered_env_4, \@data_matrix_phenotypes_altered_env_4, $phenotype_min_altered_env_4, $phenotype_max_altered_env_4, $env_sim_min_4, $env_sim_max_4, \%sim_data_4,

    $result_blup_data_altered_env_4, $result_blup_data_delta_altered_env_4, $result_blup_spatial_data_altered_env_4, $result_blup_pe_data_altered_env_4, $result_blup_pe_data_delta_altered_env_4, $result_residual_data_altered_env_4, $result_fitted_data_altered_env_4, \%fixed_effects_altered_env_4, \%rr_genetic_coefficients_altered_env_4, \%rr_temporal_coefficients_altered_env_4, \@rr_coeff_genetic_covariance_altered_env_4, \@rr_coeff_env_covariance_altered_env_4, \@rr_coeff_genetic_correlation_altered_env_4, \@rr_coeff_env_correlation_altered_env_4, $rr_residual_variance_altered_env_4, \@varcomp_altered_env_4,

    $model_sum_square_residual_altered_env_4, $genetic_effect_min_altered_env_4, $genetic_effect_max_altered_env_4, $env_effect_min_altered_env_4, $env_effect_max_altered_env_4, $genetic_effect_sum_square_altered_env_4, $genetic_effect_sum_altered_env_4, $env_effect_sum_square_altered_env_4, $env_effect_sum_altered_env_4, $residual_sum_square_altered_env_4, $residual_sum_altered_env_4, $model_sum_square_altered_env_cv_result_4, $model_sum_square_altered_env_cv_2_result_4,

    \%phenotype_data_altered_env_5, \@data_matrix_altered_env_5, \@data_matrix_phenotypes_altered_env_5, $phenotype_min_altered_env_5, $phenotype_max_altered_env_5, $env_sim_min_5, $env_sim_max_5, \%sim_data_5,

    $result_blup_data_altered_env_5, $result_blup_data_delta_altered_env_5, $result_blup_spatial_data_altered_env_5, $result_blup_pe_data_altered_env_5, $result_blup_pe_data_delta_altered_env_5, $result_residual_data_altered_env_5, $result_fitted_data_altered_env_5, \%fixed_effects_altered_env_5, \%rr_genetic_coefficients_altered_env_5, \%rr_temporal_coefficients_altered_env_5, \@rr_coeff_genetic_covariance_altered_env_5, \@rr_coeff_env_covariance_altered_env_5, \@rr_coeff_genetic_correlation_altered_env_5, \@rr_coeff_env_correlation_altered_env_5, $rr_residual_variance_altered_env_5, \@varcomp_altered_env_5,

    $model_sum_square_residual_altered_env_5, $genetic_effect_min_altered_env_5, $genetic_effect_max_altered_env_5, $env_effect_min_altered_env_5, $env_effect_max_altered_env_5, $genetic_effect_sum_square_altered_env_5, $genetic_effect_sum_altered_env_5, $env_effect_sum_square_altered_env_5, $env_effect_sum_altered_env_5, $residual_sum_square_altered_env_5, $residual_sum_altered_env_5, $model_sum_square_altered_env_cv_result_5, $model_sum_square_altered_env_cv_2_result_5,

    \%phenotype_data_altered_env_6, \@data_matrix_altered_env_6, \@data_matrix_phenotypes_altered_env_6, $phenotype_min_altered_env_6, $phenotype_max_altered_env_6, $env_sim_min_6, $env_sim_max_6, \%sim_data_6,

    $result_blup_data_altered_env_6, $result_blup_data_delta_altered_env_6, $result_blup_spatial_data_altered_env_6, $result_blup_pe_data_altered_env_6, $result_blup_pe_data_delta_altered_env_6, $result_residual_data_altered_env_6, $result_fitted_data_altered_env_6, \%fixed_effects_altered_env_6, \%rr_genetic_coefficients_altered_env_6, \%rr_temporal_coefficients_altered_env_6, \@rr_coeff_genetic_covariance_altered_env_6, \@rr_coeff_env_covariance_altered_env_6, \@rr_coeff_genetic_correlation_altered_env_6, \@rr_coeff_env_correlation_altered_env_6, $rr_residual_variance_altered_env_6, \@varcomp_altered_env_6,

    $model_sum_square_residual_altered_env_6, $genetic_effect_min_altered_env_6, $genetic_effect_max_altered_env_6, $env_effect_min_altered_env_6, $env_effect_max_altered_env_6, $genetic_effect_sum_square_altered_env_6, $genetic_effect_sum_altered_env_6, $env_effect_sum_square_altered_env_6, $env_effect_sum_altered_env_6, $residual_sum_square_altered_env_6, $residual_sum_altered_env_6, $model_sum_square_altered_env_cv_result_6, $model_sum_square_altered_env_cv_2_result_6
    ];
}

1;
